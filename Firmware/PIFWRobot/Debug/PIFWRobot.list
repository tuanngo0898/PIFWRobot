
PIFWRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800b9b8  0800b9b8  0001b9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb30  0800bb30  00021214  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb30  0800bb30  00021214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb30  0800bb30  00021214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb34  0800bb34  0001bb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001214  20000000  0800bb38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f70  20001218  0800cd4c  00021218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002188  0800cd4c  00022188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd19  00000000  00000000  0002123d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000535e  00000000  00000000  0004cf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a00  00000000  00000000  000522b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001828  00000000  00000000  00053cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e7f0  00000000  00000000  000554e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002017c  00000000  00000000  00073cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098e2c  00000000  00000000  00093e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012cc78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df4  00000000  00000000  0012ccf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20001218 	.word	0x20001218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9a0 	.word	0x0800b9a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000121c 	.word	0x2000121c
 800014c:	0800b9a0 	.word	0x0800b9a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_f2iz>:
 800109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a4:	d30f      	bcc.n	80010c6 <__aeabi_f2iz+0x2a>
 80010a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ae:	d90d      	bls.n	80010cc <__aeabi_f2iz+0x30>
 80010b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010bc:	fa23 f002 	lsr.w	r0, r3, r2
 80010c0:	bf18      	it	ne
 80010c2:	4240      	negne	r0, r0
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr
 80010cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d0:	d101      	bne.n	80010d6 <__aeabi_f2iz+0x3a>
 80010d2:	0242      	lsls	r2, r0, #9
 80010d4:	d105      	bne.n	80010e2 <__aeabi_f2iz+0x46>
 80010d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010da:	bf08      	it	eq
 80010dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr

080010e8 <mavlink_msg_cmd_change_mode_decode>:
 *
 * @param msg The message to decode
 * @param cmd_change_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_cmd_change_mode_decode(const mavlink_message_t* msg, mavlink_cmd_change_mode_t* cmd_change_mode)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    cmd_change_mode->cmd_change_mode = mavlink_msg_cmd_change_mode_get_cmd_change_mode(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_CHANGE_MODE_LEN? msg->len : MAVLINK_MSG_ID_CMD_CHANGE_MODE_LEN;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	78db      	ldrb	r3, [r3, #3]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	73fb      	strb	r3, [r7, #15]
        memset(cmd_change_mode, 0, MAVLINK_MSG_ID_CMD_CHANGE_MODE_LEN);
 8001102:	2201      	movs	r2, #1
 8001104:	2100      	movs	r1, #0
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f00a f8cf 	bl	800b2aa <memset>
    memcpy(cmd_change_mode, _MAV_PAYLOAD(msg), len);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3308      	adds	r3, #8
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	4619      	mov	r1, r3
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f00a f8bd 	bl	800b294 <memcpy>
#endif
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <app_reset>:
	func_t 		 	init;			// Save mode init function pointer
	func_t 		 	deinit;		// Save mode de-init function pointer
	on_mav_recv_t 	on_mode_mav_recv;	// Save mode msg receive function pointer
}app_t;

void app_reset(app_t *app, func_t init, func_t deinit, on_mav_recv_t on_mav_recv){
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
	app->init = init;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	601a      	str	r2, [r3, #0]
	app->deinit = deinit;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	605a      	str	r2, [r3, #4]
	app->on_mode_mav_recv = on_mav_recv;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	609a      	str	r2, [r3, #8]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <app_run_init>:
void app_run_init(app_t *app){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	app->init();
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4798      	blx	r3
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <app_run_deinit>:
void app_run_deinit(app_t *app){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	app->deinit();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4798      	blx	r3
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <app_run_on_msg_recv>:
void app_run_on_msg_recv(app_t *app, mavlink_message_t *msg){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	app->on_mode_mav_recv(msg);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	4798      	blx	r3
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <LED_Callback>:

void LED_Callback(void *context)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <LED_Callback+0x1c>)
 80011a2:	f006 fd55 	bl	8007c50 <HAL_GPIO_TogglePin>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010800 	.word	0x40010800

080011b4 <on_mavlink_recv>:

static app_t g_app;

static void on_mavlink_recv(mavlink_message_t *msg){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

	// Check if message is a change mode command. If not, send message to higher level layer
	if(msg->msgid == MAVLINK_MSG_ID_CMD_CHANGE_MODE){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	79db      	ldrb	r3, [r3, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d138      	bne.n	8001236 <on_mavlink_recv+0x82>

		// De-initialize current mode
		app_run_deinit(&g_app);
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <on_mavlink_recv+0x94>)
 80011c6:	f7ff ffcc 	bl	8001162 <app_run_deinit>

		// Parse change mode message
		mavlink_cmd_change_mode_t cmd_change_mode;
		mavlink_msg_cmd_change_mode_decode(msg, &cmd_change_mode);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff89 	bl	80010e8 <mavlink_msg_cmd_change_mode_decode>

		// Prepare for new mode
		if(cmd_change_mode.cmd_change_mode == MODE_RUN){
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <on_mavlink_recv+0x36>
			app_reset(&g_app, mode_run_init, mode_run_deinit, on_mode_run_mavlink_recv);
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <on_mavlink_recv+0x98>)
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <on_mavlink_recv+0x9c>)
 80011e0:	491c      	ldr	r1, [pc, #112]	; (8001254 <on_mavlink_recv+0xa0>)
 80011e2:	4819      	ldr	r0, [pc, #100]	; (8001248 <on_mavlink_recv+0x94>)
 80011e4:	f7ff ff9d 	bl	8001122 <app_reset>
 80011e8:	e01f      	b.n	800122a <on_mavlink_recv+0x76>
		}
		else if(cmd_change_mode.cmd_change_mode == MODE_HW){
 80011ea:	7b3b      	ldrb	r3, [r7, #12]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d106      	bne.n	80011fe <on_mavlink_recv+0x4a>
			app_reset(&g_app, mode_hw_init, mode_hw_deinit, on_mode_hw_mavlink_recv);
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <on_mavlink_recv+0xa4>)
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <on_mavlink_recv+0xa8>)
 80011f4:	491a      	ldr	r1, [pc, #104]	; (8001260 <on_mavlink_recv+0xac>)
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <on_mavlink_recv+0x94>)
 80011f8:	f7ff ff93 	bl	8001122 <app_reset>
 80011fc:	e015      	b.n	800122a <on_mavlink_recv+0x76>
		}
		else if(cmd_change_mode.cmd_change_mode == MODE_IMU){
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d106      	bne.n	8001212 <on_mavlink_recv+0x5e>
			app_reset(&g_app, mode_imu_init, mode_imu_deinit, on_mode_imu_mavlink_recv);
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <on_mavlink_recv+0xb0>)
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <on_mavlink_recv+0xb4>)
 8001208:	4918      	ldr	r1, [pc, #96]	; (800126c <on_mavlink_recv+0xb8>)
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <on_mavlink_recv+0x94>)
 800120c:	f7ff ff89 	bl	8001122 <app_reset>
 8001210:	e00b      	b.n	800122a <on_mavlink_recv+0x76>
		}
		else if(cmd_change_mode.cmd_change_mode == MODE_PIDT_TW || cmd_change_mode.cmd_change_mode == MODE_PIDT_TA){
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d002      	beq.n	800121e <on_mavlink_recv+0x6a>
 8001218:	7b3b      	ldrb	r3, [r7, #12]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d105      	bne.n	800122a <on_mavlink_recv+0x76>
			app_reset(&g_app, mode_pidt_init, mode_pidt_deinit, on_mode_pidt_mavlink_recv);
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <on_mavlink_recv+0xbc>)
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <on_mavlink_recv+0xc0>)
 8001222:	4915      	ldr	r1, [pc, #84]	; (8001278 <on_mavlink_recv+0xc4>)
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <on_mavlink_recv+0x94>)
 8001226:	f7ff ff7c 	bl	8001122 <app_reset>
		}

		// Initialize new mode
		app_run_init(&g_app);
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <on_mavlink_recv+0x94>)
 800122c:	f7ff ff8e 	bl	800114c <app_run_init>

		// Response OK
		respond_ok();
 8001230:	f001 fa34 	bl	800269c <respond_ok>
	}
	else{
		app_run_on_msg_recv(&g_app, msg);
	}
}
 8001234:	e003      	b.n	800123e <on_mavlink_recv+0x8a>
		app_run_on_msg_recv(&g_app, msg);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <on_mavlink_recv+0x94>)
 800123a:	f7ff ff9d 	bl	8001178 <app_run_on_msg_recv>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20001234 	.word	0x20001234
 800124c:	08005031 	.word	0x08005031
 8001250:	08004fe9 	.word	0x08004fe9
 8001254:	08004f35 	.word	0x08004f35
 8001258:	080032e5 	.word	0x080032e5
 800125c:	080032c5 	.word	0x080032c5
 8001260:	08003299 	.word	0x08003299
 8001264:	08003d15 	.word	0x08003d15
 8001268:	08003ce9 	.word	0x08003ce9
 800126c:	08003ca5 	.word	0x08003ca5
 8001270:	08004809 	.word	0x08004809
 8001274:	080047b5 	.word	0x080047b5
 8001278:	080046e5 	.word	0x080046e5

0800127c <app_main>:

void app_main(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

	buzzer_sys_start();
 8001280:	f000 f828 	bl	80012d4 <buzzer_sys_start>

	timer_init();
 8001284:	f004 fc48 	bl	8005b18 <timer_init>
	timer_register_callback(LED_Callback, 500, 0, TIMER_MODE_REPEAT);
 8001288:	2300      	movs	r3, #0
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <app_main+0x40>)
 8001292:	f004 fc4b 	bl	8005b2c <timer_register_callback>

	// Load parameters from non-volatile memory
	params_load();
 8001296:	f004 fa91 	bl	80057bc <params_load>

	// Run default mode
	app_reset(&g_app, mode_run_init, mode_run_deinit, on_mode_run_mavlink_recv);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <app_main+0x44>)
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <app_main+0x48>)
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <app_main+0x4c>)
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <app_main+0x50>)
 80012a2:	f7ff ff3e 	bl	8001122 <app_reset>
	app_run_init(&g_app);
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <app_main+0x50>)
 80012a8:	f7ff ff50 	bl	800114c <app_run_init>

	// Initialize communication
	mav_init();
 80012ac:	f001 f9b8 	bl	8002620 <mav_init>
	mav_set_on_mav_recv(on_mavlink_recv);
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <app_main+0x54>)
 80012b2:	f001 f9cb 	bl	800264c <mav_set_on_mav_recv>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08001195 	.word	0x08001195
 80012c0:	08005031 	.word	0x08005031
 80012c4:	08004fe9 	.word	0x08004fe9
 80012c8:	08004f35 	.word	0x08004f35
 80012cc:	20001234 	.word	0x20001234
 80012d0:	080011b5 	.word	0x080011b5

080012d4 <buzzer_sys_start>:
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
		gbuzzer_id = timer_register_callback(buzzer_cb, 200, 0, TIMER_MODE_ONE_SHOT);
	}
}

void buzzer_sys_start(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <buzzer_sys_start+0x4c>)
 80012e0:	f006 fc9e 	bl	8007c20 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80012e4:	20fa      	movs	r0, #250	; 0xfa
 80012e6:	f005 fdad 	bl	8006e44 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <buzzer_sys_start+0x4c>)
 80012f2:	f006 fc95 	bl	8007c20 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80012f6:	20fa      	movs	r0, #250	; 0xfa
 80012f8:	f005 fda4 	bl	8006e44 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <buzzer_sys_start+0x4c>)
 8001304:	f006 fc8c 	bl	8007c20 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001308:	20fa      	movs	r0, #250	; 0xfa
 800130a:	f005 fd9b 	bl	8006e44 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <buzzer_sys_start+0x4c>)
 8001316:	f006 fc83 	bl	8007c20 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40011000 	.word	0x40011000

08001324 <enc_callback>:
static int16_t 	  	m0_speed=0, m1_speed=0;
static enc_read_t 	genc_read = 0;
static timer_id_t 	genc_id;
static bool 		ginitialized = false;

static void enc_callback(void *ctx){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	m0_speed = MOTOR0_ENCODER.Instance->CNT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <enc_callback+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <enc_callback+0x40>)
 8001336:	801a      	strh	r2, [r3, #0]
	MOTOR0_ENCODER.Instance->CNT = 0;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <enc_callback+0x3c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24

	m1_speed = MOTOR1_ENCODER.Instance->CNT;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <enc_callback+0x44>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	b21a      	sxth	r2, r3
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <enc_callback+0x48>)
 800134a:	801a      	strh	r2, [r3, #0]
	MOTOR1_ENCODER.Instance->CNT = 0;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <enc_callback+0x44>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20001eb8 	.word	0x20001eb8
 8001364:	20001240 	.word	0x20001240
 8001368:	20001e70 	.word	0x20001e70
 800136c:	20001242 	.word	0x20001242

08001370 <enc_init>:

int enc_init(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	if(ginitialized) return 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <enc_init+0x68>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <enc_init+0x10>
 800137c:	2300      	movs	r3, #0
 800137e:	e029      	b.n	80013d4 <enc_init+0x64>

	HAL_TIM_Encoder_Start(&MOTOR0_ENCODER,TIM_CHANNEL_ALL);
 8001380:	213c      	movs	r1, #60	; 0x3c
 8001382:	4816      	ldr	r0, [pc, #88]	; (80013dc <enc_init+0x6c>)
 8001384:	f008 fc08 	bl	8009b98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&MOTOR1_ENCODER,TIM_CHANNEL_ALL);
 8001388:	213c      	movs	r1, #60	; 0x3c
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <enc_init+0x70>)
 800138c:	f008 fc04 	bl	8009b98 <HAL_TIM_Encoder_Start>
	MOTOR0_ENCODER.Instance->CNT = 0;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <enc_init+0x6c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	MOTOR1_ENCODER.Instance->CNT = 0;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <enc_init+0x70>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24

	if(params.encoder_exchange) genc_read = enc_read_0;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <enc_init+0x74>)
 80013a2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <enc_init+0x42>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <enc_init+0x78>)
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <enc_init+0x7c>)
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e002      	b.n	80013b8 <enc_init+0x48>
	else genc_read = enc_read_1;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <enc_init+0x78>)
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <enc_init+0x80>)
 80013b6:	601a      	str	r2, [r3, #0]

	genc_id = timer_register_callback(enc_callback, ENC_PERIOD, 0, TIMER_MODE_REPEAT);
 80013b8:	2300      	movs	r3, #0
 80013ba:	2200      	movs	r2, #0
 80013bc:	2164      	movs	r1, #100	; 0x64
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <enc_init+0x84>)
 80013c0:	f004 fbb4 	bl	8005b2c <timer_register_callback>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <enc_init+0x88>)
 80013ca:	701a      	strb	r2, [r3, #0]

	ginitialized = true;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <enc_init+0x68>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20001249 	.word	0x20001249
 80013dc:	20001eb8 	.word	0x20001eb8
 80013e0:	20001e70 	.word	0x20001e70
 80013e4:	20001078 	.word	0x20001078
 80013e8:	20001244 	.word	0x20001244
 80013ec:	08001445 	.word	0x08001445
 80013f0:	080014b9 	.word	0x080014b9
 80013f4:	08001325 	.word	0x08001325
 80013f8:	20001248 	.word	0x20001248

080013fc <enc_deinit>:

int enc_deinit(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	timer_unregister_callback(genc_id);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <enc_deinit+0x1c>)
 8001402:	f993 3000 	ldrsb.w	r3, [r3]
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fbe0 	bl	8005bcc <timer_unregister_callback>
	ginitialized = false;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <enc_deinit+0x20>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
	return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20001248 	.word	0x20001248
 800141c:	20001249 	.word	0x20001249

08001420 <enc_read>:

int16_t enc_read(motors_t motor){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	return genc_read(motor);
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <enc_read+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4610      	mov	r0, r2
 8001432:	4798      	blx	r3
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20001244 	.word	0x20001244

08001444 <enc_read_0>:

static int16_t enc_read_0(motors_t motor){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <enc_read_0+0x16>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d011      	beq.n	800147c <enc_read_0+0x38>
 8001458:	e021      	b.n	800149e <enc_read_0+0x5a>
	case MOTOR_0:
		if(params.encoder0_invert) return -m0_speed;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <enc_read_0+0x68>)
 800145c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <enc_read_0+0x30>
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <enc_read_0+0x6c>)
 8001466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146a:	b29b      	uxth	r3, r3
 800146c:	425b      	negs	r3, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	b21b      	sxth	r3, r3
 8001472:	e015      	b.n	80014a0 <enc_read_0+0x5c>
		else return m0_speed;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <enc_read_0+0x6c>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	e011      	b.n	80014a0 <enc_read_0+0x5c>
		break;
	case MOTOR_1:
		if(params.encoder1_invert) return -m1_speed;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <enc_read_0+0x68>)
 800147e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <enc_read_0+0x52>
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <enc_read_0+0x70>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	b29b      	uxth	r3, r3
 800148e:	425b      	negs	r3, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	b21b      	sxth	r3, r3
 8001494:	e004      	b.n	80014a0 <enc_read_0+0x5c>
		else return m1_speed;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <enc_read_0+0x70>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	e000      	b.n	80014a0 <enc_read_0+0x5c>
		break;
	}
	return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20001078 	.word	0x20001078
 80014b0:	20001240 	.word	0x20001240
 80014b4:	20001242 	.word	0x20001242

080014b8 <enc_read_1>:

static int16_t enc_read_1(motors_t motor){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <enc_read_1+0x16>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d011      	beq.n	80014f0 <enc_read_1+0x38>
 80014cc:	e021      	b.n	8001512 <enc_read_1+0x5a>
	case MOTOR_0:
		if(params.encoder0_invert) return -m1_speed;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <enc_read_1+0x68>)
 80014d0:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <enc_read_1+0x30>
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <enc_read_1+0x6c>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	425b      	negs	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	e015      	b.n	8001514 <enc_read_1+0x5c>
		else return m1_speed;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <enc_read_1+0x6c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	e011      	b.n	8001514 <enc_read_1+0x5c>
		break;
	case MOTOR_1:
		if(params.encoder1_invert) return -m0_speed;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <enc_read_1+0x68>)
 80014f2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <enc_read_1+0x52>
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <enc_read_1+0x70>)
 80014fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001500:	b29b      	uxth	r3, r3
 8001502:	425b      	negs	r3, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	b21b      	sxth	r3, r3
 8001508:	e004      	b.n	8001514 <enc_read_1+0x5c>
		else return m0_speed;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <enc_read_1+0x70>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	e000      	b.n	8001514 <enc_read_1+0x5c>
		break;
	}
	return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20001078 	.word	0x20001078
 8001524:	20001242 	.word	0x20001242
 8001528:	20001240 	.word	0x20001240

0800152c <mpu6500_read>:

float g_lsb_per_dpfs;
float g_lsb_per_g;
float g_microTesla_per_LSB;

static int mpu6500_read(uint8_t addr, uint8_t *value){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af04      	add	r7, sp, #16
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&MPU9250_I2C, MPU9250_I2C_ADDR, addr, 1, value, 1, I2C_TIMEOUT_MS) != HAL_OK)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	b29a      	uxth	r2, r3
 800153c:	2314      	movs	r3, #20
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	21d0      	movs	r1, #208	; 0xd0
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <mpu6500_read+0x3c>)
 800154e:	f006 fdcb 	bl	80080e8 <HAL_I2C_Mem_Read>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <mpu6500_read+0x32>
		return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e000      	b.n	8001560 <mpu6500_read+0x34>
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20001d6c 	.word	0x20001d6c

0800156c <mpu6500_write>:

static int mpu6500_write(uint8_t addr, uint8_t *value){
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af04      	add	r7, sp, #16
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&MPU9250_I2C, MPU9250_I2C_ADDR, addr, 1, value, 1, I2C_TIMEOUT_MS) != HAL_OK)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	b29a      	uxth	r2, r3
 800157c:	2314      	movs	r3, #20
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	21d0      	movs	r1, #208	; 0xd0
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <mpu6500_write+0x68>)
 800158e:	f006 fcb1 	bl	8007ef4 <HAL_I2C_Mem_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <mpu6500_write+0x32>
		return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e015      	b.n	80015ca <mpu6500_write+0x5e>
	uint8_t tmp;
	if(mpu6500_read(addr, &tmp) < 0) return -1;
 800159e:	f107 020f 	add.w	r2, r7, #15
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ffc0 	bl	800152c <mpu6500_read>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <mpu6500_write+0x4c>
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e008      	b.n	80015ca <mpu6500_write+0x5e>
	if(tmp != *value) return -1;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d002      	beq.n	80015c8 <mpu6500_write+0x5c>
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e000      	b.n	80015ca <mpu6500_write+0x5e>
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20001d6c 	.word	0x20001d6c

080015d8 <mpu6500_read_bytes>:

static int mpu6500_read_bytes(uint8_t addr, uint8_t* value, uint8_t len){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af04      	add	r7, sp, #16
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&MPU9250_I2C, MPU9250_I2C_ADDR, addr, 1, value, len, I2C_TIMEOUT_MS) != HAL_OK){
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b299      	uxth	r1, r3
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2214      	movs	r2, #20
 80015f2:	9202      	str	r2, [sp, #8]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	460a      	mov	r2, r1
 80015fe:	21d0      	movs	r1, #208	; 0xd0
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <mpu6500_read_bytes+0x50>)
 8001602:	f006 fd71 	bl	80080e8 <HAL_I2C_Mem_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <mpu6500_read_bytes+0x46>
		memset(value, 0, len);
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	461a      	mov	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f009 fe49 	bl	800b2aa <memset>
		return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	e000      	b.n	8001620 <mpu6500_read_bytes+0x48>
	}
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20001d6c 	.word	0x20001d6c

0800162c <mpu6500_write_mask>:
//	}
//	*value &= mask;
//	return 0;
//}

static int mpu6500_write_mask(uint8_t addr, uint8_t* value, uint8_t mask){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	if(mpu6500_read(addr, &tmp) < 0) return -1;
 800163c:	f107 020f 	add.w	r2, r7, #15
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff71 	bl	800152c <mpu6500_read>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	da02      	bge.n	8001656 <mpu6500_write_mask+0x2a>
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	e020      	b.n	8001698 <mpu6500_write_mask+0x6c>
	tmp &= ~mask;
 8001656:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800165a:	43db      	mvns	r3, r3
 800165c:	b25a      	sxtb	r2, r3
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4013      	ands	r3, r2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	73fb      	strb	r3, [r7, #15]
	tmp += (*value & mask);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	4013      	ands	r3, r2
 8001672:	b2da      	uxtb	r2, r3
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write(addr, &tmp) < 0) return -1;
 800167c:	f107 020f 	add.w	r2, r7, #15
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff71 	bl	800156c <mpu6500_write>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	da02      	bge.n	8001696 <mpu6500_write_mask+0x6a>
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	e000      	b.n	8001698 <mpu6500_write_mask+0x6c>
	return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ak8963_read>:

static void ak8963_read(uint8_t addr, uint8_t* value){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&MPU9250_I2C, AK8963_I2C_ADDR, addr, 1, value, 1, I2C_TIMEOUT_MS);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	2314      	movs	r3, #20
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	2118      	movs	r1, #24
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <ak8963_read+0x30>)
 80016c2:	f006 fd11 	bl	80080e8 <HAL_I2C_Mem_Read>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20001d6c 	.word	0x20001d6c

080016d4 <mpu9250_init>:

//static void ak8963_write(uint8_t addr, uint8_t* value){
//	HAL_I2C_Mem_Write(&MPU9250_I2C, AK8963_I2C_ADDR, addr, 1, value, 1, I2C_TIMEOUT_MS);
//}

int mpu9250_init(gyro_params_t gyro_params, accel_params_t accel_params, mag_params_t mag_params){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	7138      	strb	r0, [r7, #4]
 80016dc:	7039      	strb	r1, [r7, #0]
	uint8_t tmp;

	// Reset mpu9250
	tmp = H_RESET;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_mask(MPU9250_PWR_MGMT_1, &tmp, H_RESET_MASK) < 0) return -1;
 80016e2:	f107 030f 	add.w	r3, r7, #15
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	206b      	movs	r0, #107	; 0x6b
 80016ec:	f7ff ff9e 	bl	800162c <mpu6500_write_mask>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da02      	bge.n	80016fc <mpu9250_init+0x28>
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e117      	b.n	800192c <mpu9250_init+0x258>

	// Wake up chip.
	tmp = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write(MPU9250_PWR_MGMT_1, &tmp) < 0) return -1;
 8001700:	f107 030f 	add.w	r3, r7, #15
 8001704:	4619      	mov	r1, r3
 8001706:	206b      	movs	r0, #107	; 0x6b
 8001708:	f7ff ff30 	bl	800156c <mpu6500_write>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	da02      	bge.n	8001718 <mpu9250_init+0x44>
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e109      	b.n	800192c <mpu9250_init+0x258>

	// i2c bypass mode clock source
	tmp = BYPASS_EN;
 8001718:	2302      	movs	r3, #2
 800171a:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_mask(MPU9250_INT_PIN_CFG, &tmp, BYPASS_EN_MASK) < 0) return -1;
 800171c:	f107 030f 	add.w	r3, r7, #15
 8001720:	2202      	movs	r2, #2
 8001722:	4619      	mov	r1, r3
 8001724:	2037      	movs	r0, #55	; 0x37
 8001726:	f7ff ff81 	bl	800162c <mpu6500_write_mask>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	da02      	bge.n	8001736 <mpu9250_init+0x62>
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	e0fa      	b.n	800192c <mpu9250_init+0x258>

	if(mpu9250_test() < 0) return -1;
 8001736:	f000 f90d 	bl	8001954 <mpu9250_test>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	da02      	bge.n	8001746 <mpu9250_init+0x72>
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	e0f2      	b.n	800192c <mpu9250_init+0x258>

	// mpu9250 clock source
	tmp = CLKSEL;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_mask(MPU9250_PWR_MGMT_1, &tmp, CLKSEL_MASK) < 0) return -1;
 800174a:	f107 030f 	add.w	r3, r7, #15
 800174e:	2207      	movs	r2, #7
 8001750:	4619      	mov	r1, r3
 8001752:	206b      	movs	r0, #107	; 0x6b
 8001754:	f7ff ff6a 	bl	800162c <mpu6500_write_mask>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	da02      	bge.n	8001764 <mpu9250_init+0x90>
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e0e3      	b.n	800192c <mpu9250_init+0x258>

	switch(gyro_params.gfsr){
 8001764:	793b      	ldrb	r3, [r7, #4]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d856      	bhi.n	8001818 <mpu9250_init+0x144>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <mpu9250_init+0x9c>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	08001781 	.word	0x08001781
 8001774:	080017a7 	.word	0x080017a7
 8001778:	080017cd 	.word	0x080017cd
 800177c:	080017f3 	.word	0x080017f3
		case GFS_SEL_250DPS:
			tmp = GYRO_FS_SEL_250DPS;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_GYRO_CONFIG, &tmp, GYRO_FS_SEL_MASK) < 0) return -1;
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	2218      	movs	r2, #24
 800178a:	4619      	mov	r1, r3
 800178c:	201b      	movs	r0, #27
 800178e:	f7ff ff4d 	bl	800162c <mpu6500_write_mask>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	da02      	bge.n	800179e <mpu9250_init+0xca>
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	e0c6      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_dpfs = 131.f;
 800179e:	4b65      	ldr	r3, [pc, #404]	; (8001934 <mpu9250_init+0x260>)
 80017a0:	4a65      	ldr	r2, [pc, #404]	; (8001938 <mpu9250_init+0x264>)
 80017a2:	601a      	str	r2, [r3, #0]
			break;
 80017a4:	e04b      	b.n	800183e <mpu9250_init+0x16a>
		case GFS_SEL_500DPS:
			tmp = GYRO_FS_SEL_500DPS;
 80017a6:	2308      	movs	r3, #8
 80017a8:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_GYRO_CONFIG, &tmp, GYRO_FS_SEL_MASK) < 0) return -1;
 80017aa:	f107 030f 	add.w	r3, r7, #15
 80017ae:	2218      	movs	r2, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	201b      	movs	r0, #27
 80017b4:	f7ff ff3a 	bl	800162c <mpu6500_write_mask>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da02      	bge.n	80017c4 <mpu9250_init+0xf0>
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e0b3      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_dpfs = 65.5f;
 80017c4:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <mpu9250_init+0x260>)
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <mpu9250_init+0x268>)
 80017c8:	601a      	str	r2, [r3, #0]
			break;
 80017ca:	e038      	b.n	800183e <mpu9250_init+0x16a>
	    case GFS_SEL_1000DPS:
			tmp = GYRO_FS_SEL_1000DPS;
 80017cc:	2310      	movs	r3, #16
 80017ce:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_GYRO_CONFIG, &tmp, GYRO_FS_SEL_MASK) < 0) return -1;
 80017d0:	f107 030f 	add.w	r3, r7, #15
 80017d4:	2218      	movs	r2, #24
 80017d6:	4619      	mov	r1, r3
 80017d8:	201b      	movs	r0, #27
 80017da:	f7ff ff27 	bl	800162c <mpu6500_write_mask>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da02      	bge.n	80017ea <mpu9250_init+0x116>
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	e0a0      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_dpfs = 32.8f;
 80017ea:	4b52      	ldr	r3, [pc, #328]	; (8001934 <mpu9250_init+0x260>)
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <mpu9250_init+0x26c>)
 80017ee:	601a      	str	r2, [r3, #0]
	    	break;
 80017f0:	e025      	b.n	800183e <mpu9250_init+0x16a>
	    case GFS_SEL_2000DPS:
			tmp = GYRO_FS_SEL_2000DPS;
 80017f2:	2318      	movs	r3, #24
 80017f4:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_GYRO_CONFIG, &tmp, GYRO_FS_SEL_MASK) < 0) return -1;
 80017f6:	f107 030f 	add.w	r3, r7, #15
 80017fa:	2218      	movs	r2, #24
 80017fc:	4619      	mov	r1, r3
 80017fe:	201b      	movs	r0, #27
 8001800:	f7ff ff14 	bl	800162c <mpu6500_write_mask>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	da02      	bge.n	8001810 <mpu9250_init+0x13c>
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e08d      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_dpfs = 16.4f;
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <mpu9250_init+0x260>)
 8001812:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <mpu9250_init+0x270>)
 8001814:	601a      	str	r2, [r3, #0]
	      break;
 8001816:	e012      	b.n	800183e <mpu9250_init+0x16a>
		default:
			tmp = GYRO_FS_SEL_250DPS;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_GYRO_CONFIG, &tmp, GYRO_FS_SEL_MASK) < 0) return -1;
 800181c:	f107 030f 	add.w	r3, r7, #15
 8001820:	2218      	movs	r2, #24
 8001822:	4619      	mov	r1, r3
 8001824:	201b      	movs	r0, #27
 8001826:	f7ff ff01 	bl	800162c <mpu6500_write_mask>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	da02      	bge.n	8001836 <mpu9250_init+0x162>
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	e07a      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_dpfs = 131.f;
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <mpu9250_init+0x260>)
 8001838:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <mpu9250_init+0x264>)
 800183a:	601a      	str	r2, [r3, #0]
			break;
 800183c:	bf00      	nop
	}

	switch(accel_params.afsr){
 800183e:	783b      	ldrb	r3, [r7, #0]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d85b      	bhi.n	80018fc <mpu9250_init+0x228>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <mpu9250_init+0x178>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	0800185d 	.word	0x0800185d
 8001850:	08001885 	.word	0x08001885
 8001854:	080018ad 	.word	0x080018ad
 8001858:	080018d5 	.word	0x080018d5
		case AFS_SEL_2G:
			tmp = ACCEL_FS_SEL_2G;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_ACCEL_CONFIG, &tmp, ACCEL_FS_SEL_MASK) < 0) return -1;
 8001860:	f107 030f 	add.w	r3, r7, #15
 8001864:	2218      	movs	r2, #24
 8001866:	4619      	mov	r1, r3
 8001868:	201c      	movs	r0, #28
 800186a:	f7ff fedf 	bl	800162c <mpu6500_write_mask>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	da02      	bge.n	800187a <mpu9250_init+0x1a6>
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e058      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_g = 16384.f;
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <mpu9250_init+0x274>)
 800187c:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001880:	601a      	str	r2, [r3, #0]
			break;
 8001882:	e04f      	b.n	8001924 <mpu9250_init+0x250>
		case AFS_SEL_4G:
			tmp = ACCEL_FS_SEL_4G;
 8001884:	2308      	movs	r3, #8
 8001886:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_ACCEL_CONFIG, &tmp, ACCEL_FS_SEL_MASK) < 0) return -1;
 8001888:	f107 030f 	add.w	r3, r7, #15
 800188c:	2218      	movs	r2, #24
 800188e:	4619      	mov	r1, r3
 8001890:	201c      	movs	r0, #28
 8001892:	f7ff fecb 	bl	800162c <mpu6500_write_mask>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	da02      	bge.n	80018a2 <mpu9250_init+0x1ce>
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	e044      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_g = 8192.f;
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <mpu9250_init+0x274>)
 80018a4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80018a8:	601a      	str	r2, [r3, #0]
			break;
 80018aa:	e03b      	b.n	8001924 <mpu9250_init+0x250>
	    case AFS_SEL_8G:
			tmp = ACCEL_FS_SEL_8G;
 80018ac:	2310      	movs	r3, #16
 80018ae:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_ACCEL_CONFIG, &tmp, ACCEL_FS_SEL_MASK) < 0) return -1;
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	2218      	movs	r2, #24
 80018b6:	4619      	mov	r1, r3
 80018b8:	201c      	movs	r0, #28
 80018ba:	f7ff feb7 	bl	800162c <mpu6500_write_mask>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da02      	bge.n	80018ca <mpu9250_init+0x1f6>
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	e030      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_g = 4096.f;
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <mpu9250_init+0x274>)
 80018cc:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80018d0:	601a      	str	r2, [r3, #0]
	    	break;
 80018d2:	e027      	b.n	8001924 <mpu9250_init+0x250>
	    case AFS_SEL_16G:
			tmp = ACCEL_FS_SEL_16G;
 80018d4:	2318      	movs	r3, #24
 80018d6:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_ACCEL_CONFIG, &tmp, ACCEL_FS_SEL_MASK) < 0) return -1;
 80018d8:	f107 030f 	add.w	r3, r7, #15
 80018dc:	2218      	movs	r2, #24
 80018de:	4619      	mov	r1, r3
 80018e0:	201c      	movs	r0, #28
 80018e2:	f7ff fea3 	bl	800162c <mpu6500_write_mask>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da02      	bge.n	80018f2 <mpu9250_init+0x21e>
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	e01c      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_g = 2048.f;
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <mpu9250_init+0x274>)
 80018f4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80018f8:	601a      	str	r2, [r3, #0]
	      break;
 80018fa:	e013      	b.n	8001924 <mpu9250_init+0x250>
		default:
			tmp = ACCEL_FS_SEL_2G;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
			if(mpu6500_write_mask(MPU9250_ACCEL_CONFIG, &tmp, ACCEL_FS_SEL_MASK) < 0) return -1;
 8001900:	f107 030f 	add.w	r3, r7, #15
 8001904:	2218      	movs	r2, #24
 8001906:	4619      	mov	r1, r3
 8001908:	201c      	movs	r0, #28
 800190a:	f7ff fe8f 	bl	800162c <mpu6500_write_mask>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	da02      	bge.n	800191a <mpu9250_init+0x246>
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	e008      	b.n	800192c <mpu9250_init+0x258>
			g_lsb_per_g = 16384.f;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <mpu9250_init+0x274>)
 800191c:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001920:	601a      	str	r2, [r3, #0]
			break;
 8001922:	bf00      	nop
	}

	g_microTesla_per_LSB = 0.6f;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <mpu9250_init+0x278>)
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <mpu9250_init+0x27c>)
 8001928:	601a      	str	r2, [r3, #0]

	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20001d64 	.word	0x20001d64
 8001938:	43030000 	.word	0x43030000
 800193c:	42830000 	.word	0x42830000
 8001940:	42033333 	.word	0x42033333
 8001944:	41833333 	.word	0x41833333
 8001948:	20001d60 	.word	0x20001d60
 800194c:	20001d5c 	.word	0x20001d5c
 8001950:	3f19999a 	.word	0x3f19999a

08001954 <mpu9250_test>:

int mpu9250_test(){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	uint8_t tmp;

	mpu6500_read(MPU9250_WHO_AM_I, &tmp);
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	4619      	mov	r1, r3
 800195e:	2075      	movs	r0, #117	; 0x75
 8001960:	f7ff fde4 	bl	800152c <mpu6500_read>
	if(tmp!=MPU9250_WAI_RESULT) return -1;
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b71      	cmp	r3, #113	; 0x71
 8001968:	d002      	beq.n	8001970 <mpu9250_test+0x1c>
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e00b      	b.n	8001988 <mpu9250_test+0x34>

	ak8963_read(AK8963_WIA, &tmp);
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	4619      	mov	r1, r3
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fe93 	bl	80016a0 <ak8963_read>
	if(tmp!=AK8963_WAI_RESULT) return -1;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b48      	cmp	r3, #72	; 0x48
 800197e:	d002      	beq.n	8001986 <mpu9250_test+0x32>
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e000      	b.n	8001988 <mpu9250_test+0x34>

	return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <mpu9250_get_accel_gyro>:

int mpu9250_get_accel_gyro(float *ax, float *ay, float *az, float *gx, float *gy, float *gz){
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[14] = {};
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	819a      	strh	r2, [r3, #12]
	if(mpu6500_read_bytes(MPU9250_ACCEL_XOUT_H, buffer, 14) < 0){
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	220e      	movs	r2, #14
 80019b2:	4619      	mov	r1, r3
 80019b4:	203b      	movs	r0, #59	; 0x3b
 80019b6:	f7ff fe0f 	bl	80015d8 <mpu6500_read_bytes>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da02      	bge.n	80019c6 <mpu9250_get_accel_gyro+0x36>
		return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e090      	b.n	8001ae8 <mpu9250_get_accel_gyro+0x158>
	}

    *ax = (int16_t)((int16_t)buffer[0]  << 8) | buffer[1];	*ax /= g_lsb_per_g;
 80019c6:	7c3b      	ldrb	r3, [r7, #16]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	7c7b      	ldrb	r3, [r7, #17]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f932 	bl	8000c3c <__aeabi_i2f>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <mpu9250_get_accel_gyro+0x160>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4610      	mov	r0, r2
 80019ea:	f7ff fa2f 	bl	8000e4c <__aeabi_fdiv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]
    *ay = (int16_t)((int16_t)buffer[2]  << 8) | buffer[3];  *ay /= g_lsb_per_g;
 80019f6:	7cbb      	ldrb	r3, [r7, #18]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	7cfb      	ldrb	r3, [r7, #19]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f91a 	bl	8000c3c <__aeabi_i2f>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <mpu9250_get_accel_gyro+0x160>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff fa17 	bl	8000e4c <__aeabi_fdiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	601a      	str	r2, [r3, #0]
    *az = (int16_t)((int16_t)buffer[4]  << 8) | buffer[5];  *az /= g_lsb_per_g;
 8001a26:	7d3b      	ldrb	r3, [r7, #20]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	7d7b      	ldrb	r3, [r7, #21]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f902 	bl	8000c3c <__aeabi_i2f>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <mpu9250_get_accel_gyro+0x160>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff f9ff 	bl	8000e4c <__aeabi_fdiv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
    *gx = (int16_t)((int16_t)buffer[8]  << 8) | buffer[9];	*gx /= g_lsb_per_dpfs;
 8001a56:	7e3b      	ldrb	r3, [r7, #24]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	7e7b      	ldrb	r3, [r7, #25]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f8ea 	bl	8000c3c <__aeabi_i2f>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <mpu9250_get_accel_gyro+0x164>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff f9e7 	bl	8000e4c <__aeabi_fdiv>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	601a      	str	r2, [r3, #0]
    *gy = (int16_t)((int16_t)buffer[10] << 8) | buffer[11]; *gy /= g_lsb_per_dpfs;
 8001a86:	7ebb      	ldrb	r3, [r7, #26]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	7efb      	ldrb	r3, [r7, #27]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8d2 	bl	8000c3c <__aeabi_i2f>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <mpu9250_get_accel_gyro+0x164>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7ff f9cf 	bl	8000e4c <__aeabi_fdiv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	601a      	str	r2, [r3, #0]
    *gz = (int16_t)((int16_t)buffer[12] << 8) | buffer[13]; *gz /= g_lsb_per_dpfs;
 8001ab6:	7f3b      	ldrb	r3, [r7, #28]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	7f7b      	ldrb	r3, [r7, #29]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8ba 	bl	8000c3c <__aeabi_i2f>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <mpu9250_get_accel_gyro+0x164>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff f9b7 	bl	8000e4c <__aeabi_fdiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	601a      	str	r2, [r3, #0]

	return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20001d60 	.word	0x20001d60
 8001af4:	20001d64 	.word	0x20001d64

08001af8 <imu_callback>:
static float pitch;
static float motion_6[6];

TID(gtid_imu_callback);

static void imu_callback(void* ctx){
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	6078      	str	r0, [r7, #4]
	if(mpu9250_get_accel_gyro(&motion_6[0], &motion_6[1], &motion_6[2], &motion_6[3], &motion_6[4], &motion_6[5]) < 0){
 8001b00:	4b99      	ldr	r3, [pc, #612]	; (8001d68 <imu_callback+0x270>)
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	4b99      	ldr	r3, [pc, #612]	; (8001d6c <imu_callback+0x274>)
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b99      	ldr	r3, [pc, #612]	; (8001d70 <imu_callback+0x278>)
 8001b0a:	4a9a      	ldr	r2, [pc, #616]	; (8001d74 <imu_callback+0x27c>)
 8001b0c:	499a      	ldr	r1, [pc, #616]	; (8001d78 <imu_callback+0x280>)
 8001b0e:	489b      	ldr	r0, [pc, #620]	; (8001d7c <imu_callback+0x284>)
 8001b10:	f7ff ff3e 	bl	8001990 <mpu9250_get_accel_gyro>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f2c0 811b 	blt.w	8001d52 <imu_callback+0x25a>
		return;
	}
	float accel_roll  = atan2(motion_6[1], sqrt(motion_6[0]*motion_6[0] + motion_6[2]*motion_6[2]))*180.f/M_PI;
 8001b1c:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <imu_callback+0x284>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fc79 	bl	8000418 <__aeabi_f2d>
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <imu_callback+0x284>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b93      	ldr	r3, [pc, #588]	; (8001d7c <imu_callback+0x284>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7ff f8d5 	bl	8000ce4 <__aeabi_fmul>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461e      	mov	r6, r3
 8001b3e:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <imu_callback+0x284>)
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <imu_callback+0x284>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7ff f8cb 	bl	8000ce4 <__aeabi_fmul>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4630      	mov	r0, r6
 8001b54:	f7fe ffbe 	bl	8000ad4 <__addsf3>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc5c 	bl	8000418 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f009 fbaa 	bl	800b2c0 <sqrt>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4620      	mov	r0, r4
 8001b72:	4629      	mov	r1, r5
 8001b74:	f009 fba1 	bl	800b2ba <atan2>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b80      	ldr	r3, [pc, #512]	; (8001d80 <imu_callback+0x288>)
 8001b7e:	f7fe fca3 	bl	80004c8 <__aeabi_dmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	4618      	mov	r0, r3
 8001b88:	4621      	mov	r1, r4
 8001b8a:	a375      	add	r3, pc, #468	; (adr r3, 8001d60 <imu_callback+0x268>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fdc4 	bl	800071c <__aeabi_ddiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7fe ff44 	bl	8000a28 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	617b      	str	r3, [r7, #20]
	float accel_pitch = atan2(-motion_6[0], sqrt(motion_6[1]*motion_6[1] + motion_6[2]*motion_6[2]))*180.f/M_PI;
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <imu_callback+0x284>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc33 	bl	8000418 <__aeabi_f2d>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	460d      	mov	r5, r1
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <imu_callback+0x284>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <imu_callback+0x284>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7ff f88f 	bl	8000ce4 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461e      	mov	r6, r3
 8001bca:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <imu_callback+0x284>)
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <imu_callback+0x284>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7ff f885 	bl	8000ce4 <__aeabi_fmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7fe ff78 	bl	8000ad4 <__addsf3>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc16 	bl	8000418 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f009 fb64 	bl	800b2c0 <sqrt>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f009 fb5b 	bl	800b2ba <atan2>
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <imu_callback+0x288>)
 8001c0a:	f7fe fc5d 	bl	80004c8 <__aeabi_dmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	4618      	mov	r0, r3
 8001c14:	4621      	mov	r1, r4
 8001c16:	a352      	add	r3, pc, #328	; (adr r3, 8001d60 <imu_callback+0x268>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fd7e 	bl	800071c <__aeabi_ddiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4618      	mov	r0, r3
 8001c26:	4621      	mov	r1, r4
 8001c28:	f7fe fefe 	bl	8000a28 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]
	float roll_rate = (motion_6[3]-params.gx_offset)*0.001f*IMU_PERIOD;
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <imu_callback+0x284>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <imu_callback+0x28c>)
 8001c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7fe ff47 	bl	8000ad0 <__aeabi_fsub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4950      	ldr	r1, [pc, #320]	; (8001d88 <imu_callback+0x290>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f84c 	bl	8000ce4 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe ff3f 	bl	8000ad4 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60fb      	str	r3, [r7, #12]
	float pitch_rate = (motion_6[4]-params.gy_offset)*0.001f*IMU_PERIOD;
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <imu_callback+0x284>)
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <imu_callback+0x28c>)
 8001c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ff32 	bl	8000ad0 <__aeabi_fsub>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4946      	ldr	r1, [pc, #280]	; (8001d88 <imu_callback+0x290>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f837 	bl	8000ce4 <__aeabi_fmul>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe ff2a 	bl	8000ad4 <__addsf3>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60bb      	str	r3, [r7, #8]
	roll = params.g_believe*(roll+roll_rate) + (1-params.g_believe)*accel_roll;
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <imu_callback+0x28c>)
 8001c86:	f8d3 40ec 	ldr.w	r4, [r3, #236]	; 0xec
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <imu_callback+0x294>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff1f 	bl	8000ad4 <__addsf3>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff f822 	bl	8000ce4 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461c      	mov	r4, r3
 8001ca4:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <imu_callback+0x28c>)
 8001ca6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001cb0:	f7fe ff0e 	bl	8000ad0 <__aeabi_fsub>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	6979      	ldr	r1, [r7, #20]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f813 	bl	8000ce4 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7fe ff06 	bl	8000ad4 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <imu_callback+0x294>)
 8001cce:	601a      	str	r2, [r3, #0]
	pitch = params.g_believe*(pitch+pitch_rate) + (1-params.g_believe)*accel_pitch;
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <imu_callback+0x28c>)
 8001cd2:	f8d3 40ec 	ldr.w	r4, [r3, #236]	; 0xec
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <imu_callback+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fef9 	bl	8000ad4 <__addsf3>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7fe fffc 	bl	8000ce4 <__aeabi_fmul>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461c      	mov	r4, r3
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <imu_callback+0x28c>)
 8001cf2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001cfc:	f7fe fee8 	bl	8000ad0 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	6939      	ldr	r1, [r7, #16]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ffed 	bl	8000ce4 <__aeabi_fmul>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7fe fee0 	bl	8000ad4 <__addsf3>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <imu_callback+0x298>)
 8001d1a:	601a      	str	r2, [r3, #0]
	if(isnan(roll)) roll = 0;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <imu_callback+0x294>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f9a4 	bl	8001070 <__aeabi_fcmpun>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <imu_callback+0x23e>
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <imu_callback+0x294>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
	if(isnan(pitch)) pitch = 0;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <imu_callback+0x298>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f997 	bl	8001070 <__aeabi_fcmpun>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <imu_callback+0x25c>
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <imu_callback+0x298>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e000      	b.n	8001d54 <imu_callback+0x25c>
		return;
 8001d52:	bf00      	nop
}
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	54442d18 	.word	0x54442d18
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	20001268 	.word	0x20001268
 8001d6c:	20001264 	.word	0x20001264
 8001d70:	20001260 	.word	0x20001260
 8001d74:	2000125c 	.word	0x2000125c
 8001d78:	20001258 	.word	0x20001258
 8001d7c:	20001254 	.word	0x20001254
 8001d80:	40668000 	.word	0x40668000
 8001d84:	20001078 	.word	0x20001078
 8001d88:	3a83126f 	.word	0x3a83126f
 8001d8c:	2000124c 	.word	0x2000124c
 8001d90:	20001250 	.word	0x20001250

08001d94 <imu_init>:

int imu_init(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	gyro_params_t gyro_params = {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	713b      	strb	r3, [r7, #4]
			.gfsr = GFS_SEL_250DPS
	};
	accel_params_t accel_params = {
 8001d9e:	2300      	movs	r3, #0
 8001da0:	703b      	strb	r3, [r7, #0]
			.afsr = AFS_SEL_2G
	};
	mag_params_t mag_params;

	mpu9250_init(gyro_params, accel_params, mag_params);
 8001da2:	7839      	ldrb	r1, [r7, #0]
 8001da4:	7938      	ldrb	r0, [r7, #4]
 8001da6:	f7ff fc95 	bl	80016d4 <mpu9250_init>
	gtid_imu_callback = timer_register_callback(imu_callback, IMU_PERIOD, 0, TIMER_MODE_REPEAT);
 8001daa:	2300      	movs	r3, #0
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <imu_init+0x34>)
 8001db2:	f003 febb 	bl	8005b2c <timer_register_callback>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <imu_init+0x38>)
 8001dbc:	701a      	strb	r2, [r3, #0]

	return true;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08001af9 	.word	0x08001af9
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <imu_deinit>:

int imu_deinit(void){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	timer_unregister_callback(gtid_imu_callback);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <imu_deinit+0x18>)
 8001dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fef6 	bl	8005bcc <timer_unregister_callback>
	return true;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000

08001dec <imu_get_roll>:

int imu_test_connection(){
	return MPU6050_test_connection();
}

float imu_get_roll(void){
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	return roll;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <imu_get_roll+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	2000124c 	.word	0x2000124c

08001e00 <imu_get_pitch>:

float imu_get_pitch(void){
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
	return pitch;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <imu_get_pitch+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20001250 	.word	0x20001250

08001e14 <imu_get_yaw>:

float imu_get_yaw(void){
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
	return 0;
 8001e18:	f04f 0300 	mov.w	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <imu_get_accel_raw>:

int imu_get_accel_raw(float raw[3]){
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	raw[0] = motion_6[0];
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <imu_get_accel_raw+0x30>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
	raw[1] = motion_6[1];
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <imu_get_accel_raw+0x30>)
 8001e3a:	6852      	ldr	r2, [r2, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
	raw[2] = motion_6[2];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3308      	adds	r3, #8
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <imu_get_accel_raw+0x30>)
 8001e44:	6892      	ldr	r2, [r2, #8]
 8001e46:	601a      	str	r2, [r3, #0]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20001254 	.word	0x20001254

08001e58 <imu_get_gyro_raw>:

int imu_get_gyro_raw(float raw[3]){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	raw[0] = motion_6[3];
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <imu_get_gyro_raw+0x30>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
	raw[1] = motion_6[4];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <imu_get_gyro_raw+0x30>)
 8001e6e:	6912      	ldr	r2, [r2, #16]
 8001e70:	601a      	str	r2, [r3, #0]
	raw[2] = motion_6[5];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3308      	adds	r3, #8
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <imu_get_gyro_raw+0x30>)
 8001e78:	6952      	ldr	r2, [r2, #20]
 8001e7a:	601a      	str	r2, [r3, #0]
	return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20001254 	.word	0x20001254

08001e8c <imu_get_mag_raw>:

int imu_get_mag_raw(float raw[3]){
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	raw[0] = 0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
	raw[1] = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
	raw[2] = 0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3308      	adds	r3, #8
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4053      	eors	r3, r2
 8001ed4:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	b25a      	sxtb	r2, r3
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee0:	4053      	eors	r3, r2
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4053      	eors	r3, r2
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4053      	eors	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4053      	eors	r3, r2
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	801a      	strh	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2e:	801a      	strh	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8001f46:	f107 030e 	add.w	r3, r7, #14
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffe8 	bl	8001f20 <crc_init>
	while (length--) {
 8001f50:	e009      	b.n	8001f66 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f107 020e 	add.w	r2, r7, #14
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ffac 	bl	8001ebe <crc_accumulate>
	while (length--) {
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	807a      	strh	r2, [r7, #2]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <crc_calculate+0x18>
        }
        return crcTmp;
 8001f70:	89fb      	ldrh	r3, [r7, #14]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	4613      	mov	r3, r2
 8001f86:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	617b      	str	r3, [r7, #20]
	while (length--) {
 8001f8c:	e007      	b.n	8001f9e <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	617a      	str	r2, [r7, #20]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff90 	bl	8001ebe <crc_accumulate>
	while (length--) {
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	80fa      	strh	r2, [r7, #6]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f2      	bne.n	8001f8e <crc_accumulate_buffer+0x14>
        }
}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001fba:	79fa      	ldrb	r2, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <mavlink_get_channel_status+0x24>)
 8001fc6:	4413      	add	r3, r2
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200019cc 	.word	0x200019cc

08001fd8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8001fe2:	79fa      	ldrb	r2, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <mavlink_get_channel_buffer+0x24>)
 8001fee:	4413      	add	r3, r2
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000158c 	.word	0x2000158c

08002000 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	70fb      	strb	r3, [r7, #3]
 8002012:	460b      	mov	r3, r1
 8002014:	70bb      	strb	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	707b      	strb	r3, [r7, #1]
	// This is only used for the v2 protocol and we silence it here
	(void)min_length;
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	22fe      	movs	r2, #254	; 0xfe
 800201e:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7f3a      	ldrb	r2, [r7, #28]
 8002024:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	78ba      	ldrb	r2, [r7, #2]
 8002030:	719a      	strb	r2, [r3, #6]
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8002032:	787b      	ldrb	r3, [r7, #1]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ffbb 	bl	8001fb0 <mavlink_get_channel_status>
 800203a:	4603      	mov	r3, r0
 800203c:	799a      	ldrb	r2, [r3, #6]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffb3 	bl	8001fb0 <mavlink_get_channel_status>
 800204a:	4603      	mov	r3, r0
 800204c:	799c      	ldrb	r4, [r3, #6]
 800204e:	787b      	ldrb	r3, [r7, #1]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ffad 	bl	8001fb0 <mavlink_get_channel_status>
 8002056:	4603      	mov	r3, r0
 8002058:	1c62      	adds	r2, r4, #1
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3303      	adds	r3, #3
 8002062:	2105      	movs	r1, #5
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff68 	bl	8001f3a <crc_calculate>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0108 	add.w	r1, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	78db      	ldrb	r3, [r3, #3]
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	f7ff ff7a 	bl	8001f7a <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	f897 3020 	ldrb.w	r3, [r7, #32]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff15 	bl	8001ebe <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b299      	uxth	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3308      	adds	r3, #8
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	78d2      	ldrb	r2, [r2, #3]
 80020a2:	4413      	add	r3, r2
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b299      	uxth	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f103 0208 	add.w	r2, r3, #8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	3301      	adds	r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	b2ca      	uxtb	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 80020c4:	7f3b      	ldrb	r3, [r7, #28]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3308      	adds	r3, #8
 80020ca:	b29b      	uxth	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}

080020d4 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af04      	add	r7, sp, #16
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	70fb      	strb	r3, [r7, #3]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70bb      	strb	r3, [r7, #2]
 80020ea:	4613      	mov	r3, r2
 80020ec:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80020ee:	78ba      	ldrb	r2, [r7, #2]
 80020f0:	78f9      	ldrb	r1, [r7, #3]
 80020f2:	7d3b      	ldrb	r3, [r7, #20]
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	7c3b      	ldrb	r3, [r7, #16]
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff7d 	bl	8002000 <mavlink_finalize_message_chan>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	1c99      	adds	r1, r3, #2
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	3306      	adds	r3, #6
 8002124:	461a      	mov	r2, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f009 f8b4 	bl	800b294 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	78db      	ldrb	r3, [r3, #3]
 8002130:	3306      	adds	r3, #6
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3301      	adds	r3, #1
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	b29b      	uxth	r3, r3
 800215e:	3308      	adds	r3, #8
 8002160:	b29b      	uxth	r3, r3
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	crc_init(&msg->checksum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fed3 	bl	8001f20 <crc_init>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
	crc_accumulate(c, &msg->checksum);
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fe92 	bl	8001ebe <crc_accumulate>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	int bufferIndex = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	78db      	ldrb	r3, [r3, #3]
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	f200 80ed 	bhi.w	80023a2 <mavlink_frame_char_buffer+0x1fe>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <mavlink_frame_char_buffer+0x2c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021fd 	.word	0x080021fd
 80021d4:	080021fd 	.word	0x080021fd
 80021d8:	0800221f 	.word	0x0800221f
 80021dc:	08002283 	.word	0x08002283
 80021e0:	0800226b 	.word	0x0800226b
 80021e4:	0800229b 	.word	0x0800229b
 80021e8:	080022b3 	.word	0x080022b3
 80021ec:	080022db 	.word	0x080022db
 80021f0:	08002311 	.word	0x08002311
 80021f4:	0800234f 	.word	0x0800234f
 80021f8:	0800234f 	.word	0x0800234f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002200:	f040 80cc 	bne.w	800239c <mavlink_frame_char_buffer+0x1f8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2202      	movs	r2, #2
 8002208:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	709a      	strb	r2, [r3, #2]
			mavlink_start_checksum(rxmsg);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ffa7 	bl	800216a <mavlink_start_checksum>
		}
		break;
 800221c:	e0be      	b.n	800239c <mavlink_frame_char_buffer+0x1f8>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <mavlink_frame_char_buffer+0xa8>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	705a      	strb	r2, [r3, #1]
			status->parse_error++;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	789b      	ldrb	r3, [r3, #2]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	709a      	strb	r2, [r3, #2]
			status->msg_received = 0;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2201      	movs	r2, #1
 8002248:	70da      	strb	r2, [r3, #3]
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
 800224a:	e0aa      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>
			rxmsg->len = c;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2200      	movs	r2, #0
 8002256:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	4619      	mov	r1, r3
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff ff90 	bl	8002182 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2204      	movs	r2, #4
 8002266:	70da      	strb	r2, [r3, #3]
		break;
 8002268:	e09b      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	79fa      	ldrb	r2, [r7, #7]
 800226e:	711a      	strb	r2, [r3, #4]
		mavlink_update_checksum(rxmsg, c);
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff84 	bl	8002182 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2203      	movs	r2, #3
 800227e:	70da      	strb	r2, [r3, #3]
		break;
 8002280:	e08f      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	79fa      	ldrb	r2, [r7, #7]
 8002286:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4619      	mov	r1, r3
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff78 	bl	8002182 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2205      	movs	r2, #5
 8002296:	70da      	strb	r2, [r3, #3]
		break;
 8002298:	e083      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	79fa      	ldrb	r2, [r7, #7]
 800229e:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4619      	mov	r1, r3
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff6c 	bl	8002182 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2206      	movs	r2, #6
 80022ae:	70da      	strb	r2, [r3, #3]
		break;
 80022b0:	e077      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>
			status->parse_error++;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
	    }
#endif
		rxmsg->msgid = c;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ff60 	bl	8002182 <mavlink_update_checksum>
		if (rxmsg->len == 0)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	78db      	ldrb	r3, [r3, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <mavlink_frame_char_buffer+0x12e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2208      	movs	r2, #8
 80022ce:	70da      	strb	r2, [r3, #3]
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
 80022d0:	e067      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2207      	movs	r2, #7
 80022d6:	70da      	strb	r2, [r3, #3]
		break;
 80022d8:	e063      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 0208 	add.w	r2, r3, #8
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	1c59      	adds	r1, r3, #1
 80022e6:	b2c8      	uxtb	r0, r1
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	7108      	strb	r0, [r1, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	4619      	mov	r1, r3
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff ff43 	bl	8002182 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	791a      	ldrb	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	429a      	cmp	r2, r3
 8002306:	d14b      	bne.n	80023a0 <mavlink_frame_char_buffer+0x1fc>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2208      	movs	r2, #8
 800230c:	70da      	strb	r2, [r3, #3]
		}
		break;
 800230e:	e047      	b.n	80023a0 <mavlink_frame_char_buffer+0x1fc>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	79db      	ldrb	r3, [r3, #7]
 8002314:	461a      	mov	r2, r3
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <mavlink_frame_char_buffer+0x2ac>)
 8002318:	5c9b      	ldrb	r3, [r3, r2]
 800231a:	4619      	mov	r1, r3
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff ff30 	bl	8002182 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	429a      	cmp	r2, r3
 800232e:	d003      	beq.n	8002338 <mavlink_frame_char_buffer+0x194>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	220a      	movs	r2, #10
 8002334:	70da      	strb	r2, [r3, #3]
 8002336:	e002      	b.n	800233e <mavlink_frame_char_buffer+0x19a>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2209      	movs	r2, #9
 800233c:	70da      	strb	r2, [r3, #3]
		}
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3308      	adds	r3, #8
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	7912      	ldrb	r2, [r2, #4]
 8002346:	4413      	add	r3, r2
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	701a      	strb	r2, [r3, #0]
		break;
 800234c:	e029      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d008      	beq.n	8002368 <mavlink_frame_char_buffer+0x1c4>
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29b      	uxth	r3, r3
 8002364:	429a      	cmp	r2, r3
 8002366:	d003      	beq.n	8002370 <mavlink_frame_char_buffer+0x1cc>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e002      	b.n	8002376 <mavlink_frame_char_buffer+0x1d2>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2201      	movs	r2, #1
 800237a:	70da      	strb	r2, [r3, #3]
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f103 0208 	add.w	r2, r3, #8
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	791b      	ldrb	r3, [r3, #4]
 8002386:	3301      	adds	r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	79fa      	ldrb	r2, [r7, #7]
 800238c:	701a      	strb	r2, [r3, #0]
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800238e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	f008 ff7d 	bl	800b294 <memcpy>
		break;
 800239a:	e002      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>
		break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <mavlink_frame_char_buffer+0x1fe>
		break;
 80023a0:	bf00      	nop
	}

	bufferIndex++;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d110      	bne.n	80023d2 <mavlink_frame_char_buffer+0x22e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	791a      	ldrb	r2, [r3, #4]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	891b      	ldrh	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <mavlink_frame_char_buffer+0x222>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	891b      	ldrh	r3, [r3, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	811a      	strh	r2, [r3, #8]
	}

	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	78da      	ldrb	r2, [r3, #3]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	70da      	strb	r2, [r3, #3]
	r_mavlink_status->parse_state = status->parse_state;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	78da      	ldrb	r2, [r3, #3]
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	70da      	strb	r2, [r3, #3]
	r_mavlink_status->packet_idx = status->packet_idx;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	791a      	ldrb	r2, [r3, #4]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	711a      	strb	r2, [r3, #4]
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	795b      	ldrb	r3, [r3, #5]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	715a      	strb	r2, [r3, #5]
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	891a      	ldrh	r2, [r3, #8]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	811a      	strh	r2, [r3, #8]
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	789b      	ldrb	r3, [r3, #2]
 8002402:	b29a      	uxth	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	815a      	strh	r2, [r3, #10]
	status->parse_error = 0;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d115      	bne.n	8002442 <mavlink_frame_char_buffer+0x29e>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3308      	adds	r3, #8
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	7912      	ldrb	r2, [r2, #4]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b21a      	sxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f103 0108 	add.w	r1, r3, #8
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	791b      	ldrb	r3, [r3, #4]
 800242e:	3301      	adds	r3, #1
 8002430:	440b      	add	r3, r1
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21b      	sxth	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b21b      	sxth	r3, r3
 800243c:	b29a      	uxth	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	801a      	strh	r2, [r3, #0]
	}

	return status->msg_received;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	0800b9cc 	.word	0x0800b9cc

08002454 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	460b      	mov	r3, r1
 8002464:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fdb5 	bl	8001fd8 <mavlink_get_channel_buffer>
 800246e:	4604      	mov	r4, r0
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fd9c 	bl	8001fb0 <mavlink_get_channel_status>
 8002478:	4601      	mov	r1, r0
 800247a:	7bba      	ldrb	r2, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff fe8e 	bl	80021a4 <mavlink_frame_char_buffer>
 8002488:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	460b      	mov	r3, r1
 80024a2:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 80024a4:	7bb9      	ldrb	r1, [r7, #14]
 80024a6:	7bf8      	ldrb	r0, [r7, #15]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f7ff ffd2 	bl	8002454 <mavlink_frame_char>
 80024b0:	4603      	mov	r3, r0
 80024b2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d123      	bne.n	8002502 <mavlink_parse_char+0x70>
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fd8b 	bl	8001fd8 <mavlink_get_channel_buffer>
 80024c2:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd72 	bl	8001fb0 <mavlink_get_channel_status>
 80024cc:	6178      	str	r0, [r7, #20]
	    status->parse_error++;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	789b      	ldrb	r3, [r3, #2]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	709a      	strb	r2, [r3, #2]
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2201      	movs	r2, #1
 80024e4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
 80024e8:	2bfe      	cmp	r3, #254	; 0xfe
 80024ea:	d108      	bne.n	80024fe <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2202      	movs	r2, #2
 80024f0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2200      	movs	r2, #0
 80024f6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80024f8:	69b8      	ldr	r0, [r7, #24]
 80024fa:	f7ff fe36 	bl	800216a <mavlink_start_checksum>
	    }
	    return 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002502:	7ffb      	ldrb	r3, [r7, #31]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <mavlink_msg_respond_pack>:
 * @param respond  Respond
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_respond_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t respond)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
 8002512:	603a      	str	r2, [r7, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	460b      	mov	r3, r1
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	4613      	mov	r3, r2
 8002520:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 0, respond);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RESPOND_LEN);
#else
    mavlink_respond_t packet;
    packet.respond = respond;
 8002522:	797b      	ldrb	r3, [r7, #5]
 8002524:	733b      	strb	r3, [r7, #12]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RESPOND_LEN);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3308      	adds	r3, #8
 800252a:	7b3a      	ldrb	r2, [r7, #12]
 800252c:	701a      	strb	r2, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_RESPOND;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RESPOND_MIN_LEN, MAVLINK_MSG_ID_RESPOND_LEN, MAVLINK_MSG_ID_RESPOND_CRC);
 8002534:	79ba      	ldrb	r2, [r7, #6]
 8002536:	79f9      	ldrb	r1, [r7, #7]
 8002538:	23a4      	movs	r3, #164	; 0xa4
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	2301      	movs	r3, #1
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	f7ff fdc6 	bl	80020d4 <mavlink_finalize_message>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <mavlink_callback>:
			.cb_period = SOE_PERIOD,
		}

};

void mavlink_callback(void* ctx){
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	uint16_t mavbuf_len;

	mavbuf_len = MAV_BUFF_SIZE;
 800255c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002560:	813b      	strh	r3, [r7, #8]
	uart_recv(&uart_drv[0], mavbuf, &mavbuf_len);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	461a      	mov	r2, r3
 8002568:	4927      	ldr	r1, [pc, #156]	; (8002608 <mavlink_callback+0xb4>)
 800256a:	4828      	ldr	r0, [pc, #160]	; (800260c <mavlink_callback+0xb8>)
 800256c:	f000 fa5e 	bl	8002a2c <uart_recv>
	for(uint16_t i = 0; i < mavbuf_len; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	81fb      	strh	r3, [r7, #14]
 8002574:	e017      	b.n	80025a6 <mavlink_callback+0x52>
		uint8_t msg_received = mavlink_parse_char(MAVLINK_COMM_0, mavbuf[i], &msg, &status);
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	4a23      	ldr	r2, [pc, #140]	; (8002608 <mavlink_callback+0xb4>)
 800257a:	5cd1      	ldrb	r1, [r2, r3]
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <mavlink_callback+0xbc>)
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <mavlink_callback+0xc0>)
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff ff86 	bl	8002492 <mavlink_parse_char>
 8002586:	4603      	mov	r3, r0
 8002588:	72bb      	strb	r3, [r7, #10]
		if(msg_received == 1 && gon_mav_recv!=0){
 800258a:	7abb      	ldrb	r3, [r7, #10]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <mavlink_callback+0x4c>
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <mavlink_callback+0xc4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <mavlink_callback+0x4c>
			gon_mav_recv(&msg);
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <mavlink_callback+0xc4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	481d      	ldr	r0, [pc, #116]	; (8002614 <mavlink_callback+0xc0>)
 800259e:	4798      	blx	r3
	for(uint16_t i = 0; i < mavbuf_len; i++){
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	3301      	adds	r3, #1
 80025a4:	81fb      	strh	r3, [r7, #14]
 80025a6:	893b      	ldrh	r3, [r7, #8]
 80025a8:	89fa      	ldrh	r2, [r7, #14]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3e3      	bcc.n	8002576 <mavlink_callback+0x22>
		}
	}

	mavbuf_len = MAV_BUFF_SIZE;
 80025ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b2:	813b      	strh	r3, [r7, #8]
	uart_recv(&uart_drv[1], mavbuf, &mavbuf_len);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	461a      	mov	r2, r3
 80025ba:	4913      	ldr	r1, [pc, #76]	; (8002608 <mavlink_callback+0xb4>)
 80025bc:	4817      	ldr	r0, [pc, #92]	; (800261c <mavlink_callback+0xc8>)
 80025be:	f000 fa35 	bl	8002a2c <uart_recv>
	for(uint16_t i = 0; i < mavbuf_len; i++){
 80025c2:	2300      	movs	r3, #0
 80025c4:	81bb      	strh	r3, [r7, #12]
 80025c6:	e017      	b.n	80025f8 <mavlink_callback+0xa4>
		uint8_t msg_received = mavlink_parse_char(MAVLINK_COMM_1, mavbuf[i], &msg, &status);
 80025c8:	89bb      	ldrh	r3, [r7, #12]
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <mavlink_callback+0xb4>)
 80025cc:	5cd1      	ldrb	r1, [r2, r3]
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <mavlink_callback+0xbc>)
 80025d0:	4a10      	ldr	r2, [pc, #64]	; (8002614 <mavlink_callback+0xc0>)
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff ff5d 	bl	8002492 <mavlink_parse_char>
 80025d8:	4603      	mov	r3, r0
 80025da:	72fb      	strb	r3, [r7, #11]
		if(msg_received == 1 && gon_mav_recv!=0){
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <mavlink_callback+0x9e>
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <mavlink_callback+0xc4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <mavlink_callback+0x9e>
			gon_mav_recv(&msg);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <mavlink_callback+0xc4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <mavlink_callback+0xc0>)
 80025f0:	4798      	blx	r3
	for(uint16_t i = 0; i < mavbuf_len; i++){
 80025f2:	89bb      	ldrh	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	81bb      	strh	r3, [r7, #12]
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	89ba      	ldrh	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3e3      	bcc.n	80025c8 <mavlink_callback+0x74>
		}
	}
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000126c 	.word	0x2000126c
 800260c:	20000004 	.word	0x20000004
 8002610:	2000157c 	.word	0x2000157c
 8002614:	2000146c 	.word	0x2000146c
 8002618:	20001588 	.word	0x20001588
 800261c:	20000838 	.word	0x20000838

08002620 <mav_init>:

void mav_init(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	uart_init(&uart_drv[0]);
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <mav_init+0x20>)
 8002626:	f000 f975 	bl	8002914 <uart_init>
	uart_init(&uart_drv[1]);
 800262a:	4806      	ldr	r0, [pc, #24]	; (8002644 <mav_init+0x24>)
 800262c:	f000 f972 	bl	8002914 <uart_init>
	timer_register_callback(mavlink_callback, MAVLINK_CB_PERIOD, 0, TIMER_MODE_REPEAT);
 8002630:	2300      	movs	r3, #0
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <mav_init+0x28>)
 8002638:	f003 fa78 	bl	8005b2c <timer_register_callback>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000004 	.word	0x20000004
 8002644:	20000838 	.word	0x20000838
 8002648:	08002555 	.word	0x08002555

0800264c <mav_set_on_mav_recv>:

void mav_set_on_mav_recv(on_mav_recv_t on_mav_recv){
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	gon_mav_recv = on_mav_recv;
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <mav_set_on_mav_recv+0x18>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20001588 	.word	0x20001588

08002668 <mav_send>:

void mav_send(char *data, uint16_t len){
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
	uart_send(&uart_drv[0], data, len);
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	461a      	mov	r2, r3
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <mav_send+0x2c>)
 800267c:	f000 f9b2 	bl	80029e4 <uart_send>
	uart_send(&uart_drv[1], data, len);
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	461a      	mov	r2, r3
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4804      	ldr	r0, [pc, #16]	; (8002698 <mav_send+0x30>)
 8002688:	f000 f9ac 	bl	80029e4 <uart_send>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000004 	.word	0x20000004
 8002698:	20000838 	.word	0x20000838

0800269c <respond_ok>:

void respond_ok(void){
 800269c:	b580      	push	{r7, lr}
 800269e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80026a2:	af00      	add	r7, sp, #0
	mavlink_message_t msg;
	char gmav_send_buf[255];
	mavlink_msg_respond_pack(0,0,&msg,RESPOND_OK);
 80026a4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80026a8:	2301      	movs	r3, #1
 80026aa:	2100      	movs	r1, #0
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ff2d 	bl	800250c <mavlink_msg_respond_pack>
	uint16_t len = mavlink_msg_to_send_buffer((uint8_t*)gmav_send_buf, &msg);
 80026b2:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fd28 	bl	8002110 <mavlink_msg_to_send_buffer>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	mav_send(gmav_send_buf, len);
 80026c6:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ffca 	bl	8002668 <mav_send>
}
 80026d4:	bf00      	nop
 80026d6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <respond_error>:

void respond_error(void){
 80026de:	b580      	push	{r7, lr}
 80026e0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80026e4:	af00      	add	r7, sp, #0
	mavlink_message_t msg;
	char gmav_send_buf[255];
	mavlink_msg_respond_pack(0,0,&msg,RESPOND_ERROR);
 80026e6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80026ea:	2302      	movs	r3, #2
 80026ec:	2100      	movs	r1, #0
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff ff0c 	bl	800250c <mavlink_msg_respond_pack>
	uint16_t len = mavlink_msg_to_send_buffer((uint8_t*)gmav_send_buf, &msg);
 80026f4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd07 	bl	8002110 <mavlink_msg_to_send_buffer>
 8002702:	4603      	mov	r3, r0
 8002704:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	mav_send(gmav_send_buf, len);
 8002708:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ffa9 	bl	8002668 <mav_send>
}
 8002716:	bf00      	nop
 8002718:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <add_uart_drv_instant>:
#include <application/timer/timer.h>
#include "uart.h"

static uart_drv_t* uart_drvs[MAX_UART_INSTANT];

static int add_uart_drv_instant(uart_drv_t *uart_drv){
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e00f      	b.n	800274e <add_uart_drv_instant+0x2e>
		if(uart_drvs[i] == 0){
 800272e:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <add_uart_drv_instant+0x44>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <add_uart_drv_instant+0x28>
			uart_drvs[i] = uart_drv;
 800273a:	490a      	ldr	r1, [pc, #40]	; (8002764 <add_uart_drv_instant+0x44>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			return i;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	e007      	b.n	8002758 <add_uart_drv_instant+0x38>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b02      	cmp	r3, #2
 8002752:	ddec      	ble.n	800272e <add_uart_drv_instant+0xe>
		}
	}
	return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200019fc 	.word	0x200019fc

08002768 <find_uart_dev_instant>:

static int find_uart_dev_instant(UART_HandleTypeDef *huart){
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_UART_INSTANT; i++){
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e00e      	b.n	8002794 <find_uart_dev_instant+0x2c>
		if(uart_drvs[i]->huart->Instance == huart->Instance){
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <find_uart_dev_instant+0x40>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d101      	bne.n	800278e <find_uart_dev_instant+0x26>
			return i;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	e007      	b.n	800279e <find_uart_dev_instant+0x36>
	for(int i=0; i<MAX_UART_INSTANT; i++){
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b02      	cmp	r3, #2
 8002798:	dded      	ble.n	8002776 <find_uart_dev_instant+0xe>
		}
	}
	return -1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	200019fc 	.word	0x200019fc

080027ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	int idx = find_uart_dev_instant(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffd7 	bl	8002768 <find_uart_dev_instant>
 80027ba:	60f8      	str	r0, [r7, #12]
	uart_drvs[idx]->tx_completed = true;
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_UART_TxCpltCallback+0x28>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200019fc 	.word	0x200019fc

080027d8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	HAL_UART_RxCpltCallback(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f805 	bl	80027f0 <HAL_UART_RxCpltCallback>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

	int idx = find_uart_dev_instant(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffb5 	bl	8002768 <find_uart_dev_instant>
 80027fe:	6138      	str	r0, [r7, #16]
	uart_drv_t *uart_drv = uart_drvs[idx];
 8002800:	4a20      	ldr	r2, [pc, #128]	; (8002884 <HAL_UART_RxCpltCallback+0x94>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60fb      	str	r3, [r7, #12]

	uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	817b      	strh	r3, [r7, #10]
	uint16_t length =  sizeof(uart_drv->rx_dma_buffer) - currCNDTR;
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800281a:	813b      	strh	r3, [r7, #8]

	/* Copy and process new data */
	for(uint16_t i=0; i<length; i++)
 800281c:	2300      	movs	r3, #0
 800281e:	82fb      	strh	r3, [r7, #22]
 8002820:	e00d      	b.n	800283e <HAL_UART_RxCpltCallback+0x4e>
	{
		cbuf_put(&uart_drv->rx_cbuf_handle, uart_drv->rx_dma_buffer[i]);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002832:	4619      	mov	r1, r3
 8002834:	f000 f942 	bl	8002abc <cbuf_put>
	for(uint16_t i=0; i<length; i++)
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	3301      	adds	r3, #1
 800283c:	82fb      	strh	r3, [r7, #22]
 800283e:	8afa      	ldrh	r2, [r7, #22]
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3ed      	bcc.n	8002822 <HAL_UART_RxCpltCallback+0x32>
	}

	__HAL_DMA_DISABLE(huart->hdmarx);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
	huart->hdmarx->Instance->CNDTR = sizeof(uart_drv->rx_dma_buffer);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200019fc 	.word	0x200019fc

08002888 <uart_cb>:

void uart_cb(void *cxt)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	uart_drv_t *uart_drv = (uart_drv_t *)cxt;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60fb      	str	r3, [r7, #12]

	if(uart_drv->tx_completed){
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3831 	ldrb.w	r3, [r3, #2097]	; 0x831
 800289a:	2b00      	cmp	r3, #0
 800289c:	d031      	beq.n	8002902 <uart_cb+0x7a>
		size_t size = cbuf_size(&uart_drv->tx_cbuf_handle);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f992 	bl	8002bce <cbuf_size>
 80028aa:	6178      	str	r0, [r7, #20]
		if(size > sizeof(uart_drv->tx_dma_buffer)) size = sizeof(uart_drv->tx_dma_buffer);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d902      	bls.n	80028ba <uart_cb+0x32>
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	617b      	str	r3, [r7, #20]
		if(size != 0){
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <uart_cb+0x7a>
			for(size_t i = 0; i < size; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	e00c      	b.n	80028e0 <uart_cb+0x58>
				cbuf_get(&uart_drv->tx_cbuf_handle, (char*)&uart_drv->tx_dma_buffer[i]);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3308      	adds	r3, #8
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f000 f926 	bl	8002b26 <cbuf_get>
			for(size_t i = 0; i < size; i++){
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3301      	adds	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3ee      	bcc.n	80028c6 <uart_cb+0x3e>
			}
			uart_drv->tx_completed = false;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
			HAL_UART_Transmit_DMA(uart_drv->huart, uart_drv->tx_dma_buffer, size);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3308      	adds	r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	b292      	uxth	r2, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f008 f823 	bl	800a948 <HAL_UART_Transmit_DMA>
		}
	}

	// Check RX Timeout
	HAL_UART_RxCpltCallback(uart_drv->huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff72 	bl	80027f0 <HAL_UART_RxCpltCallback>
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <uart_init>:

int uart_init(uart_drv_t* uart_drv){
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

	add_uart_drv_instant(uart_drv);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff feff 	bl	8002720 <add_uart_drv_instant>

	// Init uart interface using hal
	HAL_UART_MspInit(uart_drv->huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f004 f888 	bl	8006a3c <HAL_UART_MspInit>

	// Init circular buffer for uart driver
	cbuf_init(&uart_drv->tx_cbuf_handle, uart_drv->tx_buf, sizeof(uart_drv->tx_buf));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293c:	4619      	mov	r1, r3
 800293e:	f000 f898 	bl	8002a72 <cbuf_init>
	cbuf_init(&uart_drv->rx_cbuf_handle, uart_drv->rx_buf, sizeof(uart_drv->rx_buf));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	4619      	mov	r1, r3
 8002954:	f000 f88d 	bl	8002a72 <cbuf_init>

	HAL_UART_Receive_DMA(uart_drv->huart, (uint8_t*)uart_drv->rx_dma_buffer, sizeof(uart_drv->rx_dma_buffer));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	4619      	mov	r1, r3
 8002968:	f008 f85a 	bl	800aa20 <HAL_UART_Receive_DMA>

	uart_drv->tx_completed = true;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
	uart_drv->cbid = timer_register_callback(uart_cb, uart_drv->cb_period, uart_drv, TIMER_MODE_REPEAT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	b299      	uxth	r1, r3
 800297a:	2300      	movs	r3, #0
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4806      	ldr	r0, [pc, #24]	; (8002998 <uart_init+0x84>)
 8002980:	f003 f8d4 	bl	8005b2c <timer_register_callback>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f883 2830 	strb.w	r2, [r3, #2096]	; 0x830

	return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	08002889 	.word	0x08002889

0800299c <uart_send_chr>:

int uart_send_chr(uart_drv_t *uart_drv, char chr){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
	return cbuf_put(&uart_drv->tx_cbuf_handle, chr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f882 	bl	8002abc <cbuf_put>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <uart_recv_chr>:

int uart_recv_chr(uart_drv_t *uart_drv, char *chr){
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
	return cbuf_get(&uart_drv->rx_cbuf_handle, chr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f8a6 	bl	8002b26 <cbuf_get>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <uart_send>:

int uart_send(uart_drv_t *uart_drv, char *data, uint16_t len){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++){
 80029f2:	2300      	movs	r3, #0
 80029f4:	82fb      	strh	r3, [r7, #22]
 80029f6:	e010      	b.n	8002a1a <uart_send+0x36>
		int drv_stt = uart_send_chr(uart_drv, data[i]);
 80029f8:	8afb      	ldrh	r3, [r7, #22]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ffca 	bl	800299c <uart_send_chr>
 8002a08:	6138      	str	r0, [r7, #16]
		if(drv_stt != 0) return drv_stt;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <uart_send+0x30>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	e007      	b.n	8002a24 <uart_send+0x40>
	for(uint16_t i=0; i<len; i++){
 8002a14:	8afb      	ldrh	r3, [r7, #22]
 8002a16:	3301      	adds	r3, #1
 8002a18:	82fb      	strh	r3, [r7, #22]
 8002a1a:	8afa      	ldrh	r2, [r7, #22]
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3ea      	bcc.n	80029f8 <uart_send+0x14>
	}
	return 0;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <uart_recv>:

int uart_recv(uart_drv_t *uart_drv, char *data, uint16_t *len){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
	for(uint16_t i=0; i<*len; i++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	82fb      	strh	r3, [r7, #22]
 8002a3c:	e00f      	b.n	8002a5e <uart_recv+0x32>
		if(uart_recv_chr(uart_drv, data + i) != 0){
 8002a3e:	8afb      	ldrh	r3, [r7, #22]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	4413      	add	r3, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff ffbb 	bl	80029c2 <uart_recv_chr>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <uart_recv+0x2c>
			*len = i;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8afa      	ldrh	r2, [r7, #22]
 8002a56:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i<*len; i++){
 8002a58:	8afb      	ldrh	r3, [r7, #22]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	82fb      	strh	r3, [r7, #22]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	8afa      	ldrh	r2, [r7, #22]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3ea      	bcc.n	8002a3e <uart_recv+0x12>
		}
	}
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <cbuf_init>:
#include <stdbool.h>

#include "circular_buffer.h"

void cbuf_init(circular_buf_t *cbuf, uint8_t *buf, size_t size)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
	cbuf->buffer = buf;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	601a      	str	r2, [r3, #0]
	cbuf->size = size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]
	cbuf_reset(cbuf);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f804 	bl	8002a98 <cbuf_reset>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <cbuf_reset>:

void cbuf_reset(circular_buf_t  *cbuf)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    cbuf->head = 0;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
    cbuf->tail = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
    cbuf->full = false;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	741a      	strb	r2, [r3, #16]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <cbuf_put>:

int cbuf_put(circular_buf_t* cbuf, char data)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
    if(!cbuf_full(cbuf))
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f875 	bl	8002bb8 <cbuf_full>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01f      	beq.n	8002b1a <cbuf_put+0x5e>
    {
        cbuf->buffer[cbuf->head] = data;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	701a      	strb	r2, [r3, #0]
        cbuf->head = (cbuf->head + 1) % cbuf->size;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6852      	ldr	r2, [r2, #4]
 8002af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002af6:	fb02 f201 	mul.w	r2, r2, r1
 8002afa:	1a9a      	subs	r2, r3, r2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]
        cbuf->full = (cbuf->head == cbuf->tail);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	741a      	strb	r2, [r3, #16]
        return 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e001      	b.n	8002b1e <cbuf_put+0x62>
    }
    return -1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <cbuf_get>:

int cbuf_get(circular_buf_t *cbuf, char *data)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
    if(!cbuf_empty(cbuf))
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f825 	bl	8002b80 <cbuf_empty>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <cbuf_get+0x4e>
    {
        *data = cbuf->buffer[cbuf->tail];
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
    	cbuf->tail = (cbuf->tail + 1) % cbuf->size;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b60:	fb02 f201 	mul.w	r2, r2, r1
 8002b64:	1a9a      	subs	r2, r3, r2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]
    	cbuf->full = false;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	741a      	strb	r2, [r3, #16]
        return 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e001      	b.n	8002b78 <cbuf_get+0x52>
    }
    return -1;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <cbuf_empty>:

bool cbuf_empty(circular_buf_t* cbuf)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    return (!cbuf->full && (cbuf->head == cbuf->tail));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7c1b      	ldrb	r3, [r3, #16]
 8002b8c:	f083 0301 	eor.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <cbuf_empty+0x26>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d101      	bne.n	8002ba6 <cbuf_empty+0x26>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <cbuf_empty+0x28>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <cbuf_full>:

bool cbuf_full(circular_buf_t *cbuf)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    return cbuf->full;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7c1b      	ldrb	r3, [r3, #16]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <cbuf_size>:

size_t cbuf_size(circular_buf_t* cbuf)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	size_t size = cbuf->size;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]

	if(!cbuf->full)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7c1b      	ldrb	r3, [r3, #16]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <cbuf_size+0x48>
	{
		if(cbuf->head >= cbuf->tail)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d306      	bcc.n	8002c04 <cbuf_size+0x36>
		{
			size = (cbuf->head - cbuf->tail);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e008      	b.n	8002c16 <cbuf_size+0x48>
		}
		else
		{
			size = (cbuf->size + cbuf->head - cbuf->tail);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
		}

	}

	return size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <crc_accumulate>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	6039      	str	r1, [r7, #0]
 8002c2c:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4053      	eors	r3, r2
 8002c38:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	b25a      	sxtb	r2, r3
 8002c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c44:	4053      	eors	r3, r2
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	4053      	eors	r3, r2
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4053      	eors	r3, r2
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4053      	eors	r3, r2
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	801a      	strh	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <crc_init>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c92:	801a      	strh	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <crc_calculate>:
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8002caa:	f107 030e 	add.w	r3, r7, #14
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ffe8 	bl	8002c84 <crc_init>
	while (length--) {
 8002cb4:	e009      	b.n	8002cca <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	f107 020e 	add.w	r2, r7, #14
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffac 	bl	8002c22 <crc_accumulate>
	while (length--) {
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	807a      	strh	r2, [r7, #2]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <crc_calculate+0x18>
        return crcTmp;
 8002cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <crc_accumulate_buffer>:
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002cf0:	e007      	b.n	8002d02 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	617a      	str	r2, [r7, #20]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff90 	bl	8002c22 <crc_accumulate>
	while (length--) {
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	80fa      	strh	r2, [r7, #6]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f2      	bne.n	8002cf2 <crc_accumulate_buffer+0x14>
}
 8002d0c:	bf00      	nop
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <mavlink_get_channel_status>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4a03      	ldr	r2, [pc, #12]	; (8002d38 <mavlink_get_channel_status+0x24>)
 8002d2a:	4413      	add	r3, r2
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20001a08 	.word	0x20001a08

08002d3c <mavlink_finalize_message_chan>:
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	70fb      	strb	r3, [r7, #3]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70bb      	strb	r3, [r7, #2]
 8002d52:	4613      	mov	r3, r2
 8002d54:	707b      	strb	r3, [r7, #1]
	msg->magic = MAVLINK_STX;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	22fe      	movs	r2, #254	; 0xfe
 8002d5a:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7f3a      	ldrb	r2, [r7, #28]
 8002d60:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	78ba      	ldrb	r2, [r7, #2]
 8002d6c:	719a      	strb	r2, [r3, #6]
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8002d6e:	787b      	ldrb	r3, [r7, #1]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ffcf 	bl	8002d14 <mavlink_get_channel_status>
 8002d76:	4603      	mov	r3, r0
 8002d78:	799a      	ldrb	r2, [r3, #6]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8002d7e:	787b      	ldrb	r3, [r7, #1]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ffc7 	bl	8002d14 <mavlink_get_channel_status>
 8002d86:	4603      	mov	r3, r0
 8002d88:	799c      	ldrb	r4, [r3, #6]
 8002d8a:	787b      	ldrb	r3, [r7, #1]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ffc1 	bl	8002d14 <mavlink_get_channel_status>
 8002d92:	4603      	mov	r3, r0
 8002d94:	1c62      	adds	r2, r4, #1
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	2105      	movs	r1, #5
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff7c 	bl	8002c9e <crc_calculate>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0108 	add.w	r1, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	78db      	ldrb	r3, [r3, #3]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f7ff ff8e 	bl	8002cde <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &msg->checksum);
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff29 	bl	8002c22 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	78d2      	ldrb	r2, [r2, #3]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b299      	uxth	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f103 0208 	add.w	r2, r3, #8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	78db      	ldrb	r3, [r3, #3]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b2ca      	uxtb	r2, r1
 8002dfe:	701a      	strb	r2, [r3, #0]
	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8002e00:	7f3b      	ldrb	r3, [r7, #28]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3308      	adds	r3, #8
 8002e06:	b29b      	uxth	r3, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}

08002e10 <mavlink_finalize_message>:
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af04      	add	r7, sp, #16
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	70fb      	strb	r3, [r7, #3]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70bb      	strb	r3, [r7, #2]
 8002e26:	4613      	mov	r3, r2
 8002e28:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	78f9      	ldrb	r1, [r7, #3]
 8002e2e:	7d3b      	ldrb	r3, [r7, #20]
 8002e30:	9302      	str	r3, [sp, #8]
 8002e32:	7c3b      	ldrb	r3, [r7, #16]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff7d 	bl	8002d3c <mavlink_finalize_message_chan>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <mavlink_msg_to_send_buffer>:
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	1c99      	adds	r1, r3, #2
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	3306      	adds	r3, #6
 8002e60:	461a      	mov	r2, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f008 fa16 	bl	800b294 <memcpy>
	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	3306      	adds	r3, #6
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	b29b      	uxth	r3, r3
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <mavlink_msg_cmd_params_decode>:
 *
 * @param msg The message to decode
 * @param cmd_params C-struct to decode the message contents into
 */
static inline void mavlink_msg_cmd_params_decode(const mavlink_message_t* msg, mavlink_cmd_params_t* cmd_params)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    cmd_params->cmd_params = mavlink_msg_cmd_params_get_cmd_params(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_CMD_PARAMS_LEN;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	73fb      	strb	r3, [r7, #15]
        memset(cmd_params, 0, MAVLINK_MSG_ID_CMD_PARAMS_LEN);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f008 f9f0 	bl	800b2aa <memset>
    memcpy(cmd_params, _MAV_PAYLOAD(msg), len);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6838      	ldr	r0, [r7, #0]
 8002ed4:	f008 f9de 	bl	800b294 <memcpy>
#endif
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <mavlink_msg_motor_speed_pack>:
 * @param motor_speed_1  Motor 1 Speed
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_motor_speed_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int16_t motor_speed_0, int16_t motor_speed_1)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	603a      	str	r2, [r7, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	71bb      	strb	r3, [r7, #6]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80bb      	strh	r3, [r7, #4]
    _mav_put_int16_t(buf, 2, motor_speed_1);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_MOTOR_SPEED_LEN);
#else
    mavlink_motor_speed_t packet;
    packet.motor_speed_0 = motor_speed_0;
 8002ef6:	88bb      	ldrh	r3, [r7, #4]
 8002ef8:	81bb      	strh	r3, [r7, #12]
    packet.motor_speed_1 = motor_speed_1;
 8002efa:	8b3b      	ldrh	r3, [r7, #24]
 8002efc:	81fb      	strh	r3, [r7, #14]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_MOTOR_SPEED_LEN);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_MOTOR_SPEED;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2207      	movs	r2, #7
 8002f0a:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_MOTOR_SPEED_MIN_LEN, MAVLINK_MSG_ID_MOTOR_SPEED_LEN, MAVLINK_MSG_ID_MOTOR_SPEED_CRC);
 8002f0c:	79ba      	ldrb	r2, [r7, #6]
 8002f0e:	79f9      	ldrb	r1, [r7, #7]
 8002f10:	23b7      	movs	r3, #183	; 0xb7
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	2304      	movs	r3, #4
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2304      	movs	r3, #4
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	f7ff ff78 	bl	8002e10 <mavlink_finalize_message>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <mavlink_msg_motor_speed_decode>:
 *
 * @param msg The message to decode
 * @param motor_speed C-struct to decode the message contents into
 */
static inline void mavlink_msg_motor_speed_decode(const mavlink_message_t* msg, mavlink_motor_speed_t* motor_speed)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    motor_speed->motor_speed_0 = mavlink_msg_motor_speed_get_motor_speed_0(msg);
    motor_speed->motor_speed_1 = mavlink_msg_motor_speed_get_motor_speed_1(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_MOTOR_SPEED_LEN? msg->len : MAVLINK_MSG_ID_MOTOR_SPEED_LEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	bf28      	it	cs
 8002f3c:	2304      	movcs	r3, #4
 8002f3e:	73fb      	strb	r3, [r7, #15]
        memset(motor_speed, 0, MAVLINK_MSG_ID_MOTOR_SPEED_LEN);
 8002f40:	2204      	movs	r2, #4
 8002f42:	2100      	movs	r1, #0
 8002f44:	6838      	ldr	r0, [r7, #0]
 8002f46:	f008 f9b0 	bl	800b2aa <memset>
    memcpy(motor_speed, _MAV_PAYLOAD(msg), len);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6838      	ldr	r0, [r7, #0]
 8002f54:	f008 f99e 	bl	800b294 <memcpy>
#endif
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <mavlink_msg_hw_params_pack>:
 * @param motor1_neg_deadband  Motor 1 negative deadband
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_hw_params_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int8_t motor0_invert, int8_t motor1_invert, int8_t encoder0_invert, int8_t encoder1_invert, int8_t encoder_exchange, int16_t motor0_pos_deadband, int16_t motor0_neg_deadband, int16_t motor1_pos_deadband, int16_t motor1_neg_deadband)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	603a      	str	r2, [r7, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	71bb      	strb	r3, [r7, #6]
 8002f72:	4613      	mov	r3, r2
 8002f74:	717b      	strb	r3, [r7, #5]
    _mav_put_int8_t(buf, 12, encoder_exchange);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HW_PARAMS_LEN);
#else
    mavlink_hw_params_t packet;
    packet.motor0_pos_deadband = motor0_pos_deadband;
 8002f76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f78:	813b      	strh	r3, [r7, #8]
    packet.motor0_neg_deadband = motor0_neg_deadband;
 8002f7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f7c:	817b      	strh	r3, [r7, #10]
    packet.motor1_pos_deadband = motor1_pos_deadband;
 8002f7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f80:	81bb      	strh	r3, [r7, #12]
    packet.motor1_neg_deadband = motor1_neg_deadband;
 8002f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f84:	81fb      	strh	r3, [r7, #14]
    packet.motor0_invert = motor0_invert;
 8002f86:	797b      	ldrb	r3, [r7, #5]
 8002f88:	743b      	strb	r3, [r7, #16]
    packet.motor1_invert = motor1_invert;
 8002f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f8e:	747b      	strb	r3, [r7, #17]
    packet.encoder0_invert = encoder0_invert;
 8002f90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f94:	74bb      	strb	r3, [r7, #18]
    packet.encoder1_invert = encoder1_invert;
 8002f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f9a:	74fb      	strb	r3, [r7, #19]
    packet.encoder_exchange = encoder_exchange;
 8002f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fa0:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HW_PARAMS_LEN);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	f107 0108 	add.w	r1, r7, #8
 8002faa:	220d      	movs	r2, #13
 8002fac:	4618      	mov	r0, r3
 8002fae:	f008 f971 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HW_PARAMS;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HW_PARAMS_MIN_LEN, MAVLINK_MSG_ID_HW_PARAMS_LEN, MAVLINK_MSG_ID_HW_PARAMS_CRC);
 8002fb8:	79ba      	ldrb	r2, [r7, #6]
 8002fba:	79f9      	ldrb	r1, [r7, #7]
 8002fbc:	2337      	movs	r3, #55	; 0x37
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	230d      	movs	r3, #13
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	230d      	movs	r3, #13
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f7ff ff22 	bl	8002e10 <mavlink_finalize_message>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <mavlink_msg_hw_params_decode>:
 *
 * @param msg The message to decode
 * @param hw_params C-struct to decode the message contents into
 */
static inline void mavlink_msg_hw_params_decode(const mavlink_message_t* msg, mavlink_hw_params_t* hw_params)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
    hw_params->motor1_invert = mavlink_msg_hw_params_get_motor1_invert(msg);
    hw_params->encoder0_invert = mavlink_msg_hw_params_get_encoder0_invert(msg);
    hw_params->encoder1_invert = mavlink_msg_hw_params_get_encoder1_invert(msg);
    hw_params->encoder_exchange = mavlink_msg_hw_params_get_encoder_exchange(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HW_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_HW_PARAMS_LEN;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	78db      	ldrb	r3, [r3, #3]
 8002fe4:	2b0d      	cmp	r3, #13
 8002fe6:	bf28      	it	cs
 8002fe8:	230d      	movcs	r3, #13
 8002fea:	73fb      	strb	r3, [r7, #15]
        memset(hw_params, 0, MAVLINK_MSG_ID_HW_PARAMS_LEN);
 8002fec:	220d      	movs	r2, #13
 8002fee:	2100      	movs	r1, #0
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f008 f95a 	bl	800b2aa <memset>
    memcpy(hw_params, _MAV_PAYLOAD(msg), len);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	f008 f948 	bl	800b294 <memcpy>
#endif
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <speed_report_callback>:

#include "mode_hw.h"

timer_id_t gtimerid_speed_report;

static void speed_report_callback(void* ctx){
 800300c:	b580      	push	{r7, lr}
 800300e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8003012:	af02      	add	r7, sp, #8
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	6018      	str	r0, [r3, #0]
	mavlink_message_t speed_msg;
	uint8_t gmav_send_buf[256];

	int32_t motor0_enc= enc_read(MOTOR_0);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fe fa01 	bl	8001420 <enc_read>
 800301e:	4603      	mov	r3, r0
 8003020:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	int32_t motor1_enc = enc_read(MOTOR_1);
 8003024:	2001      	movs	r0, #1
 8003026:	f7fe f9fb 	bl	8001420 <enc_read>
 800302a:	4603      	mov	r3, r0
 800302c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

	mavlink_msg_motor_speed_pack(0,0,&speed_msg,motor0_enc,motor1_enc);
 8003030:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003034:	b219      	sxth	r1, r3
 8003036:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800303a:	b21b      	sxth	r3, r3
 800303c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	2100      	movs	r1, #0
 8003046:	2000      	movs	r0, #0
 8003048:	f7ff ff4a 	bl	8002ee0 <mavlink_msg_motor_speed_pack>
	uint16_t len = mavlink_msg_to_send_buffer(gmav_send_buf, &speed_msg);
 800304c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fef8 	bl	8002e4c <mavlink_msg_to_send_buffer>
 800305c:	4603      	mov	r3, r0
 800305e:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
	mav_send((char*)gmav_send_buf, len);
 8003062:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fafb 	bl	8002668 <mav_send>
}
 8003072:	bf00      	nop
 8003074:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <motor_speed>:

static int motor_speed(mavlink_message_t *msg){
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	mavlink_motor_speed_t motor_speed_msg;
	mavlink_msg_motor_speed_decode(msg, &motor_speed_msg);
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff4d 	bl	8002f2a <mavlink_msg_motor_speed_decode>
	motors_setspeed(MOTOR_0, motor_speed_msg.motor_speed_0);
 8003090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003094:	4619      	mov	r1, r3
 8003096:	2000      	movs	r0, #0
 8003098:	f002 f9b8 	bl	800540c <motors_setspeed>
	motors_setspeed(MOTOR_1, motor_speed_msg.motor_speed_1);
 800309c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a0:	4619      	mov	r1, r3
 80030a2:	2001      	movs	r0, #1
 80030a4:	f002 f9b2 	bl	800540c <motors_setspeed>
	return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <hw_params>:

static int hw_params(mavlink_message_t *msg){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	mavlink_hw_params_t hw_params_msg;
	mavlink_msg_hw_params_decode(msg,&hw_params_msg);
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff87 	bl	8002fd6 <mavlink_msg_hw_params_decode>

	if(hw_params_msg.motor0_invert == MAV_TRUE){
 80030c8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d104      	bne.n	80030da <hw_params+0x26>
		params.motor0_invert = true;
 80030d0:	4b2e      	ldr	r3, [pc, #184]	; (800318c <hw_params+0xd8>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80030d8:	e003      	b.n	80030e2 <hw_params+0x2e>
	}else params.motor0_invert = false;
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <hw_params+0xd8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	if(hw_params_msg.motor1_invert == MAV_TRUE){
 80030e2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d104      	bne.n	80030f4 <hw_params+0x40>
		params.motor1_invert = true;
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <hw_params+0xd8>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 80030f2:	e003      	b.n	80030fc <hw_params+0x48>
	}else params.motor1_invert = false;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <hw_params+0xd8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

	motors_deinit();
 80030fc:	f002 f8b4 	bl	8005268 <motors_deinit>
	motors_init();
 8003100:	f002 f864 	bl	80051cc <motors_init>

	if(hw_params_msg.encoder0_invert == MAV_TRUE){
 8003104:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d104      	bne.n	8003116 <hw_params+0x62>
		params.encoder0_invert = true;
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <hw_params+0xd8>)
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8003114:	e003      	b.n	800311e <hw_params+0x6a>
	}else params.encoder0_invert = false;
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <hw_params+0xd8>)
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
	if(hw_params_msg.encoder1_invert == MAV_TRUE){
 800311e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d104      	bne.n	8003130 <hw_params+0x7c>
		params.encoder1_invert = true;
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <hw_params+0xd8>)
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 800312e:	e003      	b.n	8003138 <hw_params+0x84>
	}else params.encoder1_invert = false;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <hw_params+0xd8>)
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	if(hw_params_msg.encoder_exchange == MAV_TRUE){
 8003138:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d104      	bne.n	800314a <hw_params+0x96>
		params.encoder_exchange = true;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <hw_params+0xd8>)
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8003148:	e003      	b.n	8003152 <hw_params+0x9e>
	}else params.encoder_exchange = false;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <hw_params+0xd8>)
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

	params.motor0_pos_deadband = hw_params_msg.motor0_pos_deadband;
 8003152:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <hw_params+0xd8>)
 8003158:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	params.motor0_neg_deadband = hw_params_msg.motor0_neg_deadband;
 800315c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <hw_params+0xd8>)
 8003162:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	params.motor1_pos_deadband = hw_params_msg.motor1_pos_deadband;
 8003166:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <hw_params+0xd8>)
 800316c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
	params.motor1_neg_deadband = hw_params_msg.motor1_neg_deadband;
 8003170:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <hw_params+0xd8>)
 8003176:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

	enc_deinit();
 800317a:	f7fe f93f 	bl	80013fc <enc_deinit>
	enc_init();
 800317e:	f7fe f8f7 	bl	8001370 <enc_init>

	return 0;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20001078 	.word	0x20001078

08003190 <load_params>:

static int load_params(){
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8003196:	af08      	add	r7, sp, #32
	params_load();
 8003198:	f002 fb10 	bl	80057bc <params_load>

	mavlink_message_t hw_msg;
	uint8_t gmav_send_buf[256];

	bool_t motor0_invert = params.motor0_invert == true ? MAV_TRUE : MAV_FALSE;
 800319c:	4b39      	ldr	r3, [pc, #228]	; (8003284 <load_params+0xf4>)
 800319e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <load_params+0x1a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e000      	b.n	80031ac <load_params+0x1c>
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	bool_t motor1_invert = params.motor1_invert == true ? MAV_TRUE : MAV_FALSE;
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <load_params+0xf4>)
 80031b2:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <load_params+0x2e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e000      	b.n	80031c0 <load_params+0x30>
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	bool_t encoder0_invert = params.encoder0_invert == true ? MAV_TRUE : MAV_FALSE;
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <load_params+0xf4>)
 80031c6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <load_params+0x42>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e000      	b.n	80031d4 <load_params+0x44>
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
	bool_t encoder1_invert = params.encoder1_invert == true ? MAV_TRUE : MAV_FALSE;
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <load_params+0xf4>)
 80031da:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <load_params+0x56>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e000      	b.n	80031e8 <load_params+0x58>
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
	bool_t encoder_ex = params.encoder_exchange == true ? MAV_TRUE : MAV_FALSE;
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <load_params+0xf4>)
 80031ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <load_params+0x6a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e000      	b.n	80031fc <load_params+0x6c>
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b

	mavlink_msg_hw_params_pack(0,0,&hw_msg,motor0_invert,motor1_invert,encoder0_invert,encoder1_invert,encoder_ex,
 8003200:	f997 e21f 	ldrsb.w	lr, [r7, #543]	; 0x21f
 8003204:	f997 321e 	ldrsb.w	r3, [r7, #542]	; 0x21e
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	f997 221d 	ldrsb.w	r2, [r7, #541]	; 0x21d
 800320e:	f997 121c 	ldrsb.w	r1, [r7, #540]	; 0x21c
 8003212:	f997 021b 	ldrsb.w	r0, [r7, #539]	; 0x21b
 8003216:	4c1b      	ldr	r4, [pc, #108]	; (8003284 <load_params+0xf4>)
 8003218:	f9b4 411a 	ldrsh.w	r4, [r4, #282]	; 0x11a
 800321c:	4d19      	ldr	r5, [pc, #100]	; (8003284 <load_params+0xf4>)
 800321e:	f9b5 511c 	ldrsh.w	r5, [r5, #284]	; 0x11c
 8003222:	4e18      	ldr	r6, [pc, #96]	; (8003284 <load_params+0xf4>)
 8003224:	f9b6 611e 	ldrsh.w	r6, [r6, #286]	; 0x11e
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <load_params+0xf4>)
 800322a:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 800322e:	f507 7c84 	add.w	ip, r7, #264	; 0x108
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	9606      	str	r6, [sp, #24]
 8003236:	9505      	str	r5, [sp, #20]
 8003238:	9404      	str	r4, [sp, #16]
 800323a:	9003      	str	r0, [sp, #12]
 800323c:	9102      	str	r1, [sp, #8]
 800323e:	9201      	str	r2, [sp, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4673      	mov	r3, lr
 8003246:	4662      	mov	r2, ip
 8003248:	2100      	movs	r1, #0
 800324a:	2000      	movs	r0, #0
 800324c:	f7ff fe88 	bl	8002f60 <mavlink_msg_hw_params_pack>
			params.motor0_pos_deadband, params.motor0_neg_deadband, params.motor1_pos_deadband, params.motor1_neg_deadband);
	uint16_t len = mavlink_msg_to_send_buffer(gmav_send_buf, &hw_msg);
 8003250:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fdf6 	bl	8002e4c <mavlink_msg_to_send_buffer>
 8003260:	4603      	mov	r3, r0
 8003262:	f8a7 3218 	strh.w	r3, [r7, #536]	; 0x218
	mav_send((char*)gmav_send_buf, len);
 8003266:	f8b7 2218 	ldrh.w	r2, [r7, #536]	; 0x218
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f9f9 	bl	8002668 <mav_send>

	return 0;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800327e:	46bd      	mov	sp, r7
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	20001078 	.word	0x20001078

08003288 <save_params>:

static int save_params(){
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	params_save();
 800328c:	f002 f9d8 	bl	8005640 <params_save>
	return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <mode_hw_init>:

void mode_hw_init(){
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
	// Hardware initialization
	motors_init();
 800329c:	f001 ff96 	bl	80051cc <motors_init>
	enc_init();
 80032a0:	f7fe f866 	bl	8001370 <enc_init>

	// Periodic task initialization
	gtimerid_speed_report = timer_register_callback(speed_report_callback, ENC_RP_PERIOD, 0, TIMER_MODE_REPEAT);
 80032a4:	2300      	movs	r3, #0
 80032a6:	2200      	movs	r2, #0
 80032a8:	21c8      	movs	r1, #200	; 0xc8
 80032aa:	4804      	ldr	r0, [pc, #16]	; (80032bc <mode_hw_init+0x24>)
 80032ac:	f002 fc3e 	bl	8005b2c <timer_register_callback>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <mode_hw_init+0x28>)
 80032b6:	701a      	strb	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	0800300d 	.word	0x0800300d
 80032c0:	20001d68 	.word	0x20001d68

080032c4 <mode_hw_deinit>:

void mode_hw_deinit(){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	// Hardware de-initialization
	motors_deinit();
 80032c8:	f001 ffce 	bl	8005268 <motors_deinit>
	enc_deinit();
 80032cc:	f7fe f896 	bl	80013fc <enc_deinit>

	// Background task de-initialization
	timer_unregister_callback(gtimerid_speed_report);
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <mode_hw_deinit+0x1c>)
 80032d2:	f993 3000 	ldrsb.w	r3, [r3]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fc78 	bl	8005bcc <timer_unregister_callback>
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20001d68 	.word	0x20001d68

080032e4 <on_mode_hw_mavlink_recv>:

void on_mode_hw_mavlink_recv(mavlink_message_t *msg){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	switch(msg->msgid){
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	79db      	ldrb	r3, [r3, #7]
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	d004      	beq.n	80032fe <on_mode_hw_mavlink_recv+0x1a>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d032      	beq.n	800335e <on_mode_hw_mavlink_recv+0x7a>
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d00c      	beq.n	8003316 <on_mode_hw_mavlink_recv+0x32>
	case MAVLINK_MSG_ID_HW_PARAMS:
		if(hw_params(msg) != 0) respond_error();
		else respond_ok();
		break;
	default:
		break;
 80032fc:	e03c      	b.n	8003378 <on_mode_hw_mavlink_recv+0x94>
		if(motor_speed(msg) != 0) respond_error();
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff febc 	bl	800307c <motor_speed>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <on_mode_hw_mavlink_recv+0x2c>
 800330a:	f7ff f9e8 	bl	80026de <respond_error>
		break;
 800330e:	e033      	b.n	8003378 <on_mode_hw_mavlink_recv+0x94>
		else respond_ok();
 8003310:	f7ff f9c4 	bl	800269c <respond_ok>
		break;
 8003314:	e030      	b.n	8003378 <on_mode_hw_mavlink_recv+0x94>
			mavlink_msg_cmd_params_decode(msg,&cmd_params_msg);
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fdc2 	bl	8002ea6 <mavlink_msg_cmd_params_decode>
			if(cmd_params_msg.cmd_params == CMD_LOAD){
 8003322:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d10a      	bne.n	8003340 <on_mode_hw_mavlink_recv+0x5c>
				if(load_params() != 0) respond_error();
 800332a:	f7ff ff31 	bl	8003190 <load_params>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <on_mode_hw_mavlink_recv+0x56>
 8003334:	f7ff f9d3 	bl	80026de <respond_error>
	break;
 8003338:	e01d      	b.n	8003376 <on_mode_hw_mavlink_recv+0x92>
				else respond_ok();
 800333a:	f7ff f9af 	bl	800269c <respond_ok>
	break;
 800333e:	e01a      	b.n	8003376 <on_mode_hw_mavlink_recv+0x92>
			else if(cmd_params_msg.cmd_params == CMD_SAVE){
 8003340:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d116      	bne.n	8003376 <on_mode_hw_mavlink_recv+0x92>
				if(save_params() != 0) respond_error();
 8003348:	f7ff ff9e 	bl	8003288 <save_params>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <on_mode_hw_mavlink_recv+0x74>
 8003352:	f7ff f9c4 	bl	80026de <respond_error>
	break;
 8003356:	e00e      	b.n	8003376 <on_mode_hw_mavlink_recv+0x92>
				else respond_ok();
 8003358:	f7ff f9a0 	bl	800269c <respond_ok>
	break;
 800335c:	e00b      	b.n	8003376 <on_mode_hw_mavlink_recv+0x92>
		if(hw_params(msg) != 0) respond_error();
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fea8 	bl	80030b4 <hw_params>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <on_mode_hw_mavlink_recv+0x8c>
 800336a:	f7ff f9b8 	bl	80026de <respond_error>
		break;
 800336e:	e003      	b.n	8003378 <on_mode_hw_mavlink_recv+0x94>
		else respond_ok();
 8003370:	f7ff f994 	bl	800269c <respond_ok>
		break;
 8003374:	e000      	b.n	8003378 <on_mode_hw_mavlink_recv+0x94>
	break;
 8003376:	bf00      	nop
	}
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <crc_accumulate>:
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4053      	eors	r3, r2
 8003396:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	b25a      	sxtb	r2, r3
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4053      	eors	r3, r2
 80033a4:	b25b      	sxtb	r3, r3
 80033a6:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	4053      	eors	r3, r2
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	4053      	eors	r3, r2
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	4053      	eors	r3, r2
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	801a      	strh	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <crc_init>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	801a      	strh	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <crc_calculate>:
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8003408:	f107 030e 	add.w	r3, r7, #14
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ffe8 	bl	80033e2 <crc_init>
	while (length--) {
 8003412:	e009      	b.n	8003428 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f107 020e 	add.w	r2, r7, #14
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ffac 	bl	8003380 <crc_accumulate>
	while (length--) {
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	807a      	strh	r2, [r7, #2]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <crc_calculate+0x18>
        return crcTmp;
 8003432:	89fb      	ldrh	r3, [r7, #14]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <crc_accumulate_buffer>:
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	617b      	str	r3, [r7, #20]
	while (length--) {
 800344e:	e007      	b.n	8003460 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	617a      	str	r2, [r7, #20]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff90 	bl	8003380 <crc_accumulate>
	while (length--) {
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	80fa      	strh	r2, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f2      	bne.n	8003450 <crc_accumulate_buffer+0x14>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <mavlink_get_channel_status>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 800347e:	79fa      	ldrb	r2, [r7, #7]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <mavlink_get_channel_status+0x24>)
 800348a:	4413      	add	r3, r2
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20001a38 	.word	0x20001a38

0800349c <mavlink_finalize_message_chan>:
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	70fb      	strb	r3, [r7, #3]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70bb      	strb	r3, [r7, #2]
 80034b2:	4613      	mov	r3, r2
 80034b4:	707b      	strb	r3, [r7, #1]
	msg->magic = MAVLINK_STX;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	22fe      	movs	r2, #254	; 0xfe
 80034ba:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7f3a      	ldrb	r2, [r7, #28]
 80034c0:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	78ba      	ldrb	r2, [r7, #2]
 80034cc:	719a      	strb	r2, [r3, #6]
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80034ce:	787b      	ldrb	r3, [r7, #1]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ffcf 	bl	8003474 <mavlink_get_channel_status>
 80034d6:	4603      	mov	r3, r0
 80034d8:	799a      	ldrb	r2, [r3, #6]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 80034de:	787b      	ldrb	r3, [r7, #1]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ffc7 	bl	8003474 <mavlink_get_channel_status>
 80034e6:	4603      	mov	r3, r0
 80034e8:	799c      	ldrb	r4, [r3, #6]
 80034ea:	787b      	ldrb	r3, [r7, #1]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ffc1 	bl	8003474 <mavlink_get_channel_status>
 80034f2:	4603      	mov	r3, r0
 80034f4:	1c62      	adds	r2, r4, #1
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3303      	adds	r3, #3
 80034fe:	2105      	movs	r1, #5
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff7b 	bl	80033fc <crc_calculate>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f103 0108 	add.w	r1, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	f7ff ff8d 	bl	800343c <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &msg->checksum);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff28 	bl	8003380 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b299      	uxth	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3308      	adds	r3, #8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	78d2      	ldrb	r2, [r2, #3]
 800353e:	4413      	add	r3, r2
 8003540:	b2ca      	uxtb	r2, r1
 8003542:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b299      	uxth	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 0208 	add.w	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	3301      	adds	r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	b2ca      	uxtb	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8003560:	7f3b      	ldrb	r3, [r7, #28]
 8003562:	b29b      	uxth	r3, r3
 8003564:	3308      	adds	r3, #8
 8003566:	b29b      	uxth	r3, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <mavlink_finalize_message>:
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af04      	add	r7, sp, #16
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	70fb      	strb	r3, [r7, #3]
 8003582:	460b      	mov	r3, r1
 8003584:	70bb      	strb	r3, [r7, #2]
 8003586:	4613      	mov	r3, r2
 8003588:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 800358a:	78ba      	ldrb	r2, [r7, #2]
 800358c:	78f9      	ldrb	r1, [r7, #3]
 800358e:	7d3b      	ldrb	r3, [r7, #20]
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	7c3b      	ldrb	r3, [r7, #16]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	787b      	ldrb	r3, [r7, #1]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff7d 	bl	800349c <mavlink_finalize_message_chan>
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <mavlink_msg_to_send_buffer>:
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	1c99      	adds	r1, r3, #2
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	3306      	adds	r3, #6
 80035c0:	461a      	mov	r2, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f007 fe66 	bl	800b294 <memcpy>
	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	78db      	ldrb	r3, [r3, #3]
 80035cc:	3306      	adds	r3, #6
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	78db      	ldrb	r3, [r3, #3]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3308      	adds	r3, #8
 80035fc:	b29b      	uxth	r3, r3
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <mavlink_msg_cmd_params_decode>:
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_CMD_PARAMS_LEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	73fb      	strb	r3, [r7, #15]
        memset(cmd_params, 0, MAVLINK_MSG_ID_CMD_PARAMS_LEN);
 8003620:	2201      	movs	r2, #1
 8003622:	2100      	movs	r1, #0
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f007 fe40 	bl	800b2aa <memset>
    memcpy(cmd_params, _MAV_PAYLOAD(msg), len);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	4619      	mov	r1, r3
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f007 fe2e 	bl	800b294 <memcpy>
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <mavlink_msg_evt_tilt_pack>:
 * @param tilt  Tilt
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_tilt_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float tilt)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60ba      	str	r2, [r7, #8]
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	460b      	mov	r3, r1
 8003650:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 0, tilt);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_TILT_LEN);
#else
    mavlink_evt_tilt_t packet;
    packet.tilt = tilt;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	617b      	str	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_TILT_LEN);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3308      	adds	r3, #8
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	601a      	str	r2, [r3, #0]
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_TILT;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2204      	movs	r2, #4
 8003662:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_TILT_MIN_LEN, MAVLINK_MSG_ID_EVT_TILT_LEN, MAVLINK_MSG_ID_EVT_TILT_CRC);
 8003664:	7bba      	ldrb	r2, [r7, #14]
 8003666:	7bf9      	ldrb	r1, [r7, #15]
 8003668:	2353      	movs	r3, #83	; 0x53
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2304      	movs	r3, #4
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2304      	movs	r3, #4
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	f7ff ff7c 	bl	8003570 <mavlink_finalize_message>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <mavlink_msg_evt_rpy_pack>:
 * @param yaw  Yaw
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_rpy_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float roll, float pitch, float yaw)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08a      	sub	sp, #40	; 0x28
 8003686:	af02      	add	r7, sp, #8
 8003688:	60ba      	str	r2, [r7, #8]
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	460b      	mov	r3, r1
 8003692:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, yaw);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_RPY_LEN);
#else
    mavlink_evt_rpy_t packet;
    packet.roll = roll;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	617b      	str	r3, [r7, #20]
    packet.pitch = pitch;
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	61bb      	str	r3, [r7, #24]
    packet.yaw = yaw;
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_RPY_LEN);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3308      	adds	r3, #8
 80036a4:	f107 0114 	add.w	r1, r7, #20
 80036a8:	220c      	movs	r2, #12
 80036aa:	4618      	mov	r0, r3
 80036ac:	f007 fdf2 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_RPY;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2205      	movs	r2, #5
 80036b4:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_RPY_MIN_LEN, MAVLINK_MSG_ID_EVT_RPY_LEN, MAVLINK_MSG_ID_EVT_RPY_CRC);
 80036b6:	7bba      	ldrb	r2, [r7, #14]
 80036b8:	7bf9      	ldrb	r1, [r7, #15]
 80036ba:	235d      	movs	r3, #93	; 0x5d
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	230c      	movs	r3, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	230c      	movs	r3, #12
 80036c4:	68b8      	ldr	r0, [r7, #8]
 80036c6:	f7ff ff53 	bl	8003570 <mavlink_finalize_message>
 80036ca:	4603      	mov	r3, r0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <mavlink_msg_gyro_params_pack>:
 * @param gyro_offset_z  Gyro Offset Z
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_gyro_params_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float gyro_offset_x, float gyro_offset_y, float gyro_offset_z)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60ba      	str	r2, [r7, #8]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	460b      	mov	r3, r1
 80036e4:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, gyro_offset_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_GYRO_PARAMS_LEN);
#else
    mavlink_gyro_params_t packet;
    packet.gyro_offset_x = gyro_offset_x;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	617b      	str	r3, [r7, #20]
    packet.gyro_offset_y = gyro_offset_y;
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	61bb      	str	r3, [r7, #24]
    packet.gyro_offset_z = gyro_offset_z;
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_GYRO_PARAMS_LEN);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3308      	adds	r3, #8
 80036f6:	f107 0114 	add.w	r1, r7, #20
 80036fa:	220c      	movs	r2, #12
 80036fc:	4618      	mov	r0, r3
 80036fe:	f007 fdc9 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_GYRO_PARAMS;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2209      	movs	r2, #9
 8003706:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_GYRO_PARAMS_MIN_LEN, MAVLINK_MSG_ID_GYRO_PARAMS_LEN, MAVLINK_MSG_ID_GYRO_PARAMS_CRC);
 8003708:	7bba      	ldrb	r2, [r7, #14]
 800370a:	7bf9      	ldrb	r1, [r7, #15]
 800370c:	23f9      	movs	r3, #249	; 0xf9
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	230c      	movs	r3, #12
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	230c      	movs	r3, #12
 8003716:	68b8      	ldr	r0, [r7, #8]
 8003718:	f7ff ff2a 	bl	8003570 <mavlink_finalize_message>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <mavlink_msg_gyro_params_decode>:
 *
 * @param msg The message to decode
 * @param gyro_params C-struct to decode the message contents into
 */
static inline void mavlink_msg_gyro_params_decode(const mavlink_message_t* msg, mavlink_gyro_params_t* gyro_params)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    gyro_params->gyro_offset_x = mavlink_msg_gyro_params_get_gyro_offset_x(msg);
    gyro_params->gyro_offset_y = mavlink_msg_gyro_params_get_gyro_offset_y(msg);
    gyro_params->gyro_offset_z = mavlink_msg_gyro_params_get_gyro_offset_z(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GYRO_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_GYRO_PARAMS_LEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	bf28      	it	cs
 8003738:	230c      	movcs	r3, #12
 800373a:	73fb      	strb	r3, [r7, #15]
        memset(gyro_params, 0, MAVLINK_MSG_ID_GYRO_PARAMS_LEN);
 800373c:	220c      	movs	r2, #12
 800373e:	2100      	movs	r1, #0
 8003740:	6838      	ldr	r0, [r7, #0]
 8003742:	f007 fdb2 	bl	800b2aa <memset>
    memcpy(gyro_params, _MAV_PAYLOAD(msg), len);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3308      	adds	r3, #8
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	4619      	mov	r1, r3
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	f007 fda0 	bl	800b294 <memcpy>
#endif
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <mavlink_msg_comp_filter_params_pack>:
 * @param g_believe  Belive in gyroscope
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_comp_filter_params_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t tilt_type, float tilt_offset, float g_believe)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	603a      	str	r2, [r7, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
 800376a:	460b      	mov	r3, r1
 800376c:	71bb      	strb	r3, [r7, #6]
 800376e:	4613      	mov	r3, r2
 8003770:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, tilt_type);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN);
#else
    mavlink_comp_filter_params_t packet;
    packet.tilt_offset = tilt_offset;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	60fb      	str	r3, [r7, #12]
    packet.g_believe = g_believe;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	613b      	str	r3, [r7, #16]
    packet.tilt_type = tilt_type;
 800377a:	797b      	ldrb	r3, [r7, #5]
 800377c:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	f107 010c 	add.w	r1, r7, #12
 8003786:	2209      	movs	r2, #9
 8003788:	4618      	mov	r0, r3
 800378a:	f007 fd83 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMP_FILTER_PARAMS;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	220a      	movs	r2, #10
 8003792:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_MIN_LEN, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_CRC);
 8003794:	79ba      	ldrb	r2, [r7, #6]
 8003796:	79f9      	ldrb	r1, [r7, #7]
 8003798:	239d      	movs	r3, #157	; 0x9d
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2309      	movs	r3, #9
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2309      	movs	r3, #9
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f7ff fee4 	bl	8003570 <mavlink_finalize_message>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <mavlink_msg_comp_filter_params_decode>:
 *
 * @param msg The message to decode
 * @param comp_filter_params C-struct to decode the message contents into
 */
static inline void mavlink_msg_comp_filter_params_decode(const mavlink_message_t* msg, mavlink_comp_filter_params_t* comp_filter_params)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    comp_filter_params->tilt_offset = mavlink_msg_comp_filter_params_get_tilt_offset(msg);
    comp_filter_params->g_believe = mavlink_msg_comp_filter_params_get_g_believe(msg);
    comp_filter_params->tilt_type = mavlink_msg_comp_filter_params_get_tilt_type(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	bf28      	it	cs
 80037c4:	2309      	movcs	r3, #9
 80037c6:	73fb      	strb	r3, [r7, #15]
        memset(comp_filter_params, 0, MAVLINK_MSG_ID_COMP_FILTER_PARAMS_LEN);
 80037c8:	2209      	movs	r2, #9
 80037ca:	2100      	movs	r1, #0
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f007 fd6c 	bl	800b2aa <memset>
    memcpy(comp_filter_params, _MAV_PAYLOAD(msg), len);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3308      	adds	r3, #8
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	4619      	mov	r1, r3
 80037da:	6838      	ldr	r0, [r7, #0]
 80037dc:	f007 fd5a 	bl	800b294 <memcpy>
#endif
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <mavlink_msg_evt_accel_raw_pack>:
 * @param acc_z  Accel Z
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_accel_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float acc_x, float acc_y, float acc_z)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60ba      	str	r2, [r7, #8]
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	460b      	mov	r3, r1
 80037f8:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, acc_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_ACCEL_RAW_LEN);
#else
    mavlink_evt_accel_raw_t packet;
    packet.acc_x = acc_x;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	617b      	str	r3, [r7, #20]
    packet.acc_y = acc_y;
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	61bb      	str	r3, [r7, #24]
    packet.acc_z = acc_z;
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_ACCEL_RAW_LEN);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3308      	adds	r3, #8
 800380a:	f107 0114 	add.w	r1, r7, #20
 800380e:	220c      	movs	r2, #12
 8003810:	4618      	mov	r0, r3
 8003812:	f007 fd3f 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_ACCEL_RAW;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	220b      	movs	r2, #11
 800381a:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_ACCEL_RAW_MIN_LEN, MAVLINK_MSG_ID_EVT_ACCEL_RAW_LEN, MAVLINK_MSG_ID_EVT_ACCEL_RAW_CRC);
 800381c:	7bba      	ldrb	r2, [r7, #14]
 800381e:	7bf9      	ldrb	r1, [r7, #15]
 8003820:	2375      	movs	r3, #117	; 0x75
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	230c      	movs	r3, #12
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	230c      	movs	r3, #12
 800382a:	68b8      	ldr	r0, [r7, #8]
 800382c:	f7ff fea0 	bl	8003570 <mavlink_finalize_message>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <mavlink_msg_evt_gyro_raw_pack>:
 * @param gyro_z  Gyro Z
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_gyro_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float gyro_x, float gyro_y, float gyro_z)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	; 0x28
 800383e:	af02      	add	r7, sp, #8
 8003840:	60ba      	str	r2, [r7, #8]
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	460b      	mov	r3, r1
 800384a:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, gyro_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_GYRO_RAW_LEN);
#else
    mavlink_evt_gyro_raw_t packet;
    packet.gyro_x = gyro_x;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	617b      	str	r3, [r7, #20]
    packet.gyro_y = gyro_y;
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	61bb      	str	r3, [r7, #24]
    packet.gyro_z = gyro_z;
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_GYRO_RAW_LEN);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3308      	adds	r3, #8
 800385c:	f107 0114 	add.w	r1, r7, #20
 8003860:	220c      	movs	r2, #12
 8003862:	4618      	mov	r0, r3
 8003864:	f007 fd16 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_GYRO_RAW;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	220c      	movs	r2, #12
 800386c:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_GYRO_RAW_MIN_LEN, MAVLINK_MSG_ID_EVT_GYRO_RAW_LEN, MAVLINK_MSG_ID_EVT_GYRO_RAW_CRC);
 800386e:	7bba      	ldrb	r2, [r7, #14]
 8003870:	7bf9      	ldrb	r1, [r7, #15]
 8003872:	238e      	movs	r3, #142	; 0x8e
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	230c      	movs	r3, #12
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	230c      	movs	r3, #12
 800387c:	68b8      	ldr	r0, [r7, #8]
 800387e:	f7ff fe77 	bl	8003570 <mavlink_finalize_message>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <mavlink_msg_evt_calibrated_gyro_raw_pack>:
 * @param gyro_z  Gyro Z
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_calibrated_gyro_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float gyro_x, float gyro_y, float gyro_z)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60ba      	str	r2, [r7, #8]
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	460b      	mov	r3, r1
 800389c:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, gyro_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW_LEN);
#else
    mavlink_evt_calibrated_gyro_raw_t packet;
    packet.gyro_x = gyro_x;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	617b      	str	r3, [r7, #20]
    packet.gyro_y = gyro_y;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	61bb      	str	r3, [r7, #24]
    packet.gyro_z = gyro_z;
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW_LEN);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3308      	adds	r3, #8
 80038ae:	f107 0114 	add.w	r1, r7, #20
 80038b2:	220c      	movs	r2, #12
 80038b4:	4618      	mov	r0, r3
 80038b6:	f007 fced 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	220d      	movs	r2, #13
 80038be:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW_MIN_LEN, MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW_LEN, MAVLINK_MSG_ID_EVT_CALIBRATED_GYRO_RAW_CRC);
 80038c0:	7bba      	ldrb	r2, [r7, #14]
 80038c2:	7bf9      	ldrb	r1, [r7, #15]
 80038c4:	2339      	movs	r3, #57	; 0x39
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	230c      	movs	r3, #12
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	230c      	movs	r3, #12
 80038ce:	68b8      	ldr	r0, [r7, #8]
 80038d0:	f7ff fe4e 	bl	8003570 <mavlink_finalize_message>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <mavlink_msg_evt_mag_raw_pack>:
 * @param mag_z  Mag Z
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_evt_mag_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float mag_x, float mag_y, float mag_z)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b08a      	sub	sp, #40	; 0x28
 80038e2:	af02      	add	r7, sp, #8
 80038e4:	60ba      	str	r2, [r7, #8]
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	460b      	mov	r3, r1
 80038ee:	73bb      	strb	r3, [r7, #14]
    _mav_put_float(buf, 8, mag_z);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_EVT_MAG_RAW_LEN);
#else
    mavlink_evt_mag_raw_t packet;
    packet.mag_x = mag_x;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	617b      	str	r3, [r7, #20]
    packet.mag_y = mag_y;
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	61bb      	str	r3, [r7, #24]
    packet.mag_z = mag_z;
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	61fb      	str	r3, [r7, #28]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_MAG_RAW_LEN);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3308      	adds	r3, #8
 8003900:	f107 0114 	add.w	r1, r7, #20
 8003904:	220c      	movs	r2, #12
 8003906:	4618      	mov	r0, r3
 8003908:	f007 fcc4 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_EVT_MAG_RAW;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	220e      	movs	r2, #14
 8003910:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_MAG_RAW_MIN_LEN, MAVLINK_MSG_ID_EVT_MAG_RAW_LEN, MAVLINK_MSG_ID_EVT_MAG_RAW_CRC);
 8003912:	7bba      	ldrb	r2, [r7, #14]
 8003914:	7bf9      	ldrb	r1, [r7, #15]
 8003916:	234c      	movs	r3, #76	; 0x4c
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	230c      	movs	r3, #12
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	230c      	movs	r3, #12
 8003920:	68b8      	ldr	r0, [r7, #8]
 8003922:	f7ff fe25 	bl	8003570 <mavlink_finalize_message>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <imu_raw_callback>:
#include "mode_imu.h"

TID(gtid_imu_raw);
TID(gtid_imu_result);

static void imu_raw_callback(void* ctx){
 8003930:	b580      	push	{r7, lr}
 8003932:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8003936:	af02      	add	r7, sp, #8
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint8_t gmav_send_buf[256];
	uint16_t len;
	float raw[3];

	imu_get_accel_raw(raw);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fa6f 	bl	8001e24 <imu_get_accel_raw>
	mavlink_msg_evt_accel_raw_pack(0,0,&msg,raw[0],raw[1],raw[2]);
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f107 020c 	add.w	r2, r7, #12
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800395c:	9201      	str	r2, [sp, #4]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	4603      	mov	r3, r0
 8003962:	460a      	mov	r2, r1
 8003964:	2100      	movs	r1, #0
 8003966:	2000      	movs	r0, #0
 8003968:	f7ff ff3e 	bl	80037e8 <mavlink_msg_evt_accel_raw_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 800396c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fe18 	bl	80035ac <mavlink_msg_to_send_buffer>
 800397c:	4603      	mov	r3, r0
 800397e:	f8a7 3236 	strh.w	r3, [r7, #566]	; 0x236
	mav_send((char*)gmav_send_buf, len);
 8003982:	f8b7 2236 	ldrh.w	r2, [r7, #566]	; 0x236
 8003986:	f107 0318 	add.w	r3, r7, #24
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fe6b 	bl	8002668 <mav_send>

	imu_get_gyro_raw(raw);
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fa5e 	bl	8001e58 <imu_get_gyro_raw>
	mavlink_msg_evt_gyro_raw_pack(0,0,&msg,raw[0],raw[1],raw[2]);
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f107 020c 	add.w	r2, r7, #12
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80039b2:	9201      	str	r2, [sp, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4603      	mov	r3, r0
 80039b8:	460a      	mov	r2, r1
 80039ba:	2100      	movs	r1, #0
 80039bc:	2000      	movs	r0, #0
 80039be:	f7ff ff3c 	bl	800383a <mavlink_msg_evt_gyro_raw_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 80039c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039c6:	f107 0318 	add.w	r3, r7, #24
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fded 	bl	80035ac <mavlink_msg_to_send_buffer>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f8a7 3236 	strh.w	r3, [r7, #566]	; 0x236
	mav_send((char*)gmav_send_buf, len);
 80039d8:	f8b7 2236 	ldrh.w	r2, [r7, #566]	; 0x236
 80039dc:	f107 0318 	add.w	r3, r7, #24
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fe40 	bl	8002668 <mav_send>

	imu_get_mag_raw(raw);
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fa4d 	bl	8001e8c <imu_get_mag_raw>
	mavlink_msg_evt_mag_raw_pack(0,0,&msg,raw[0],raw[1],raw[2]);
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f107 020c 	add.w	r2, r7, #12
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003a08:	9201      	str	r2, [sp, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	460a      	mov	r2, r1
 8003a10:	2100      	movs	r1, #0
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7ff ff63 	bl	80038de <mavlink_msg_evt_mag_raw_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003a18:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a1c:	f107 0318 	add.w	r3, r7, #24
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fdc2 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f8a7 3236 	strh.w	r3, [r7, #566]	; 0x236
	mav_send((char*)gmav_send_buf, len);
 8003a2e:	f8b7 2236 	ldrh.w	r2, [r7, #566]	; 0x236
 8003a32:	f107 0318 	add.w	r3, r7, #24
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fe15 	bl	8002668 <mav_send>

	float r = imu_get_roll();
 8003a3e:	f7fe f9d5 	bl	8001dec <imu_get_roll>
 8003a42:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
	float p = imu_get_pitch();
 8003a46:	f7fe f9db 	bl	8001e00 <imu_get_pitch>
 8003a4a:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	float y = imu_get_yaw();
 8003a4e:	f7fe f9e1 	bl	8001e14 <imu_get_yaw>
 8003a52:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	mavlink_msg_evt_rpy_pack(0,0,&msg,r,p,y);
 8003a56:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a5a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff fe08 	bl	8003682 <mavlink_msg_evt_rpy_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003a72:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a76:	f107 0318 	add.w	r3, r7, #24
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fd95 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f8a7 3236 	strh.w	r3, [r7, #566]	; 0x236
	mav_send((char*)gmav_send_buf, len);
 8003a88:	f8b7 2236 	ldrh.w	r2, [r7, #566]	; 0x236
 8003a8c:	f107 0318 	add.w	r3, r7, #24
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fde8 	bl	8002668 <mav_send>
}
 8003a98:	bf00      	nop
 8003a9a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <imu_result_callback>:

static void imu_result_callback(void* ctx){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8003aaa:	af02      	add	r7, sp, #8
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint8_t gmav_send_buf[256];
	uint16_t len;
	float raw[3];

	imu_get_gyro_raw(raw);
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe f9cf 	bl	8001e58 <imu_get_gyro_raw>
	raw[0] -= params.gx_offset;
 8003aba:	f107 030c 	add.w	r3, r7, #12
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b48      	ldr	r3, [pc, #288]	; (8003be4 <imu_result_callback+0x140>)
 8003ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fd f801 	bl	8000ad0 <__aeabi_fsub>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	601a      	str	r2, [r3, #0]
	raw[1] -= params.gy_offset;
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <imu_result_callback+0x140>)
 8003ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f7fc fff2 	bl	8000ad0 <__aeabi_fsub>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	605a      	str	r2, [r3, #4]
	raw[2] -= params.gz_offset;
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <imu_result_callback+0x140>)
 8003afe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fc ffe3 	bl	8000ad0 <__aeabi_fsub>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	609a      	str	r2, [r3, #8]
	mavlink_msg_evt_calibrated_gyro_raw_pack(0,0,&msg,raw[0],raw[1],raw[2]);
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f107 020c 	add.w	r2, r7, #12
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003b2a:	9201      	str	r2, [sp, #4]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460a      	mov	r2, r1
 8003b32:	2100      	movs	r1, #0
 8003b34:	2000      	movs	r0, #0
 8003b36:	f7ff fea9 	bl	800388c <mavlink_msg_evt_calibrated_gyro_raw_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003b3a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003b3e:	f107 0318 	add.w	r3, r7, #24
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fd31 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
	mav_send((char*)gmav_send_buf, len);
 8003b50:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8003b54:	f107 0318 	add.w	r3, r7, #24
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fd84 	bl	8002668 <mav_send>

	float tilt;
	switch(params.tilt_type){
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <imu_result_callback+0x140>)
 8003b62:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d002      	beq.n	8003b70 <imu_result_callback+0xcc>
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d005      	beq.n	8003b7a <imu_result_callback+0xd6>
 8003b6e:	e009      	b.n	8003b84 <imu_result_callback+0xe0>
	case ROLL:
		tilt = imu_get_roll();
 8003b70:	f7fe f93c 	bl	8001dec <imu_get_roll>
 8003b74:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
		break;
 8003b78:	e008      	b.n	8003b8c <imu_result_callback+0xe8>
	case PITCH:
		tilt = imu_get_pitch();
 8003b7a:	f7fe f941 	bl	8001e00 <imu_get_pitch>
 8003b7e:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
		break;
 8003b82:	e003      	b.n	8003b8c <imu_result_callback+0xe8>
	default:
		tilt = 0;
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	}
	tilt -= params.tilt_offset;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <imu_result_callback+0x140>)
 8003b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b92:	4619      	mov	r1, r3
 8003b94:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8003b98:	f7fc ff9a 	bl	8000ad0 <__aeabi_fsub>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	mavlink_msg_evt_tilt_pack(0,0,&msg,tilt);
 8003ba2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ba6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003baa:	2100      	movs	r1, #0
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff fd47 	bl	8003640 <mavlink_msg_evt_tilt_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003bb2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003bb6:	f107 0318 	add.w	r3, r7, #24
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fcf5 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
	mav_send((char*)gmav_send_buf, len);
 8003bc8:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8003bcc:	f107 0318 	add.w	r3, r7, #24
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fd48 	bl	8002668 <mav_send>
}
 8003bd8:	bf00      	nop
 8003bda:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20001078 	.word	0x20001078

08003be8 <load_imu_params>:

static int load_imu_params(){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8003bee:	af02      	add	r7, sp, #8
	// Load parameters from non-volatile memory
	params_load();
 8003bf0:	f001 fde4 	bl	80057bc <params_load>
	// Send parameters to GCS
	mavlink_message_t msg;
	uint8_t gmav_send_buf[256];
	uint16_t len;

	mavlink_msg_gyro_params_pack(0,0,&msg, params.gx_offset, params.gy_offset, params.gz_offset);
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <load_imu_params+0xa8>)
 8003bf6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <load_imu_params+0xa8>)
 8003bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <load_imu_params+0xa8>)
 8003c02:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8003c06:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8003c0a:	9201      	str	r2, [sp, #4]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460a      	mov	r2, r1
 8003c12:	2100      	movs	r1, #0
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff fd5d 	bl	80036d4 <mavlink_msg_gyro_params_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003c1a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fcc2 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	mav_send((char*)gmav_send_buf, len);
 8003c2e:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fd16 	bl	8002668 <mav_send>

	mavlink_msg_comp_filter_params_pack(0,0,&msg, params.tilt_type, params.tilt_offset, params.g_believe);
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <load_imu_params+0xa8>)
 8003c3e:	f893 00e4 	ldrb.w	r0, [r3, #228]	; 0xe4
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <load_imu_params+0xa8>)
 8003c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c48:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <load_imu_params+0xa8>)
 8003c4a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003c4e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8003c52:	9201      	str	r2, [sp, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	4603      	mov	r3, r0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f7ff fd7d 	bl	800375c <mavlink_msg_comp_filter_params_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8003c62:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fc9e 	bl	80035ac <mavlink_msg_to_send_buffer>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	mav_send((char*)gmav_send_buf, len);
 8003c76:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fcf2 	bl	8002668 <mav_send>

	return 0;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20001078 	.word	0x20001078

08003c94 <save_imu_params>:

static int save_imu_params(){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	// Save parameters to non-volatile memory
	params_save();
 8003c98:	f001 fcd2 	bl	8005640 <params_save>

	return 0;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <mode_imu_init>:

void mode_imu_init(){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	// Hardware initialization
	imu_init();
 8003ca8:	f7fe f874 	bl	8001d94 <imu_init>

	// Periodic task initialization
	gtid_imu_raw = timer_register_callback(imu_raw_callback, IMU_RAW_RP_PERIOD, 0, TIMER_MODE_REPEAT);
 8003cac:	2300      	movs	r3, #0
 8003cae:	2200      	movs	r2, #0
 8003cb0:	212d      	movs	r1, #45	; 0x2d
 8003cb2:	4809      	ldr	r0, [pc, #36]	; (8003cd8 <mode_imu_init+0x34>)
 8003cb4:	f001 ff3a 	bl	8005b2c <timer_register_callback>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <mode_imu_init+0x38>)
 8003cbe:	701a      	strb	r2, [r3, #0]
	gtid_imu_result = timer_register_callback(imu_result_callback, IMU_RES_RP_PERIOD, 0, TIMER_MODE_REPEAT);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2137      	movs	r1, #55	; 0x37
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <mode_imu_init+0x3c>)
 8003cc8:	f001 ff30 	bl	8005b2c <timer_register_callback>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <mode_imu_init+0x40>)
 8003cd2:	701a      	strb	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08003931 	.word	0x08003931
 8003cdc:	2000106c 	.word	0x2000106c
 8003ce0:	08003aa5 	.word	0x08003aa5
 8003ce4:	2000106d 	.word	0x2000106d

08003ce8 <mode_imu_deinit>:

void mode_imu_deinit(){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	// Hardware de-initialization
	imu_deinit();
 8003cec:	f7fe f870 	bl	8001dd0 <imu_deinit>

	// Periodic task initialization
	timer_unregister_callback(gtid_imu_raw);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <mode_imu_deinit+0x24>)
 8003cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 ff68 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_imu_result);
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <mode_imu_deinit+0x28>)
 8003cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 ff62 	bl	8005bcc <timer_unregister_callback>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000106c 	.word	0x2000106c
 8003d10:	2000106d 	.word	0x2000106d

08003d14 <on_mode_imu_mavlink_recv>:

void on_mode_imu_mavlink_recv(mavlink_message_t *msg){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	switch(msg->msgid){
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	79db      	ldrb	r3, [r3, #7]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d028      	beq.n	8003d76 <on_mode_imu_mavlink_recv+0x62>
 8003d24:	2b0a      	cmp	r3, #10
 8003d26:	d03b      	beq.n	8003da0 <on_mode_imu_mavlink_recv+0x8c>
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d000      	beq.n	8003d2e <on_mode_imu_mavlink_recv+0x1a>
		params.tilt_offset = comp_filter_params_msg.tilt_offset;
		respond_ok();
	}
	break;
	default:
		break;
 8003d2c:	e04e      	b.n	8003dcc <on_mode_imu_mavlink_recv+0xb8>
			mavlink_msg_cmd_params_decode(msg, &cmd_msg);
 8003d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fc66 	bl	8003606 <mavlink_msg_cmd_params_decode>
			if(cmd_msg.cmd_params == CMD_LOAD) {
 8003d3a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d10a      	bne.n	8003d58 <on_mode_imu_mavlink_recv+0x44>
				if(load_imu_params() < 0) respond_error();
 8003d42:	f7ff ff51 	bl	8003be8 <load_imu_params>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da02      	bge.n	8003d52 <on_mode_imu_mavlink_recv+0x3e>
 8003d4c:	f7fe fcc7 	bl	80026de <respond_error>
	break;
 8003d50:	e03b      	b.n	8003dca <on_mode_imu_mavlink_recv+0xb6>
				else respond_ok();
 8003d52:	f7fe fca3 	bl	800269c <respond_ok>
	break;
 8003d56:	e038      	b.n	8003dca <on_mode_imu_mavlink_recv+0xb6>
			else if(cmd_msg.cmd_params == CMD_SAVE) {
 8003d58:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d134      	bne.n	8003dca <on_mode_imu_mavlink_recv+0xb6>
				if(save_imu_params() < 0) respond_error();
 8003d60:	f7ff ff98 	bl	8003c94 <save_imu_params>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da02      	bge.n	8003d70 <on_mode_imu_mavlink_recv+0x5c>
 8003d6a:	f7fe fcb8 	bl	80026de <respond_error>
	break;
 8003d6e:	e02c      	b.n	8003dca <on_mode_imu_mavlink_recv+0xb6>
				else respond_ok();
 8003d70:	f7fe fc94 	bl	800269c <respond_ok>
	break;
 8003d74:	e029      	b.n	8003dca <on_mode_imu_mavlink_recv+0xb6>
		mavlink_msg_gyro_params_decode(msg,&gyro_params_msg);
 8003d76:	f107 0318 	add.w	r3, r7, #24
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fcd2 	bl	8003726 <mavlink_msg_gyro_params_decode>
		params.gx_offset = gyro_params_msg.gyro_offset_x;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
		params.gy_offset = gyro_params_msg.gyro_offset_y;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
		params.gz_offset = gyro_params_msg.gyro_offset_z;
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003d96:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
		respond_ok();
 8003d9a:	f7fe fc7f 	bl	800269c <respond_ok>
	break;
 8003d9e:	e015      	b.n	8003dcc <on_mode_imu_mavlink_recv+0xb8>
		mavlink_msg_comp_filter_params_decode(msg,&comp_filter_params_msg);
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fd03 	bl	80037b2 <mavlink_msg_comp_filter_params_decode>
		params.tilt_type = comp_filter_params_msg.tilt_type;
 8003dac:	7d3a      	ldrb	r2, [r7, #20]
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003db0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
		params.g_believe = comp_filter_params_msg.g_believe;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003db8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
		params.tilt_offset = comp_filter_params_msg.tilt_offset;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <on_mode_imu_mavlink_recv+0xc0>)
 8003dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		respond_ok();
 8003dc4:	f7fe fc6a 	bl	800269c <respond_ok>
	break;
 8003dc8:	e000      	b.n	8003dcc <on_mode_imu_mavlink_recv+0xb8>
	break;
 8003dca:	bf00      	nop
	}
}
 8003dcc:	bf00      	nop
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20001078 	.word	0x20001078

08003dd8 <crc_accumulate>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4053      	eors	r3, r2
 8003dee:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	b25a      	sxtb	r2, r3
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4053      	eors	r3, r2
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	4053      	eors	r3, r2
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	4053      	eors	r3, r2
 8003e1c:	b21a      	sxth	r2, r3
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	4053      	eors	r3, r2
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	801a      	strh	r2, [r3, #0]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <crc_init>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e48:	801a      	strh	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <crc_calculate>:
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8003e60:	f107 030e 	add.w	r3, r7, #14
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ffe8 	bl	8003e3a <crc_init>
	while (length--) {
 8003e6a:	e009      	b.n	8003e80 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f107 020e 	add.w	r2, r7, #14
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffac 	bl	8003dd8 <crc_accumulate>
	while (length--) {
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	1e5a      	subs	r2, r3, #1
 8003e84:	807a      	strh	r2, [r7, #2]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <crc_calculate+0x18>
        return crcTmp;
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <crc_accumulate_buffer>:
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	617b      	str	r3, [r7, #20]
	while (length--) {
 8003ea6:	e007      	b.n	8003eb8 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	617a      	str	r2, [r7, #20]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	68f9      	ldr	r1, [r7, #12]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff90 	bl	8003dd8 <crc_accumulate>
	while (length--) {
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	80fa      	strh	r2, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f2      	bne.n	8003ea8 <crc_accumulate_buffer+0x14>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <mavlink_get_channel_status>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8003ed6:	79fa      	ldrb	r2, [r7, #7]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a03      	ldr	r2, [pc, #12]	; (8003ef0 <mavlink_get_channel_status+0x24>)
 8003ee2:	4413      	add	r3, r2
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20001b8c 	.word	0x20001b8c

08003ef4 <mavlink_finalize_message_chan>:
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	70fb      	strb	r3, [r7, #3]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70bb      	strb	r3, [r7, #2]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	707b      	strb	r3, [r7, #1]
	msg->magic = MAVLINK_STX;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	22fe      	movs	r2, #254	; 0xfe
 8003f12:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7f3a      	ldrb	r2, [r7, #28]
 8003f18:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	78ba      	ldrb	r2, [r7, #2]
 8003f24:	719a      	strb	r2, [r3, #6]
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8003f26:	787b      	ldrb	r3, [r7, #1]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ffcf 	bl	8003ecc <mavlink_get_channel_status>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	799a      	ldrb	r2, [r3, #6]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8003f36:	787b      	ldrb	r3, [r7, #1]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ffc7 	bl	8003ecc <mavlink_get_channel_status>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	799c      	ldrb	r4, [r3, #6]
 8003f42:	787b      	ldrb	r3, [r7, #1]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ffc1 	bl	8003ecc <mavlink_get_channel_status>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	1c62      	adds	r2, r4, #1
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3303      	adds	r3, #3
 8003f56:	2105      	movs	r1, #5
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff7b 	bl	8003e54 <crc_calculate>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f103 0108 	add.w	r1, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	f7ff ff8d 	bl	8003e94 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &msg->checksum);
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff28 	bl	8003dd8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b299      	uxth	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3308      	adds	r3, #8
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	78d2      	ldrb	r2, [r2, #3]
 8003f96:	4413      	add	r3, r2
 8003f98:	b2ca      	uxtb	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	b299      	uxth	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f103 0208 	add.w	r2, r3, #8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	78db      	ldrb	r3, [r3, #3]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	b2ca      	uxtb	r2, r1
 8003fb6:	701a      	strb	r2, [r3, #0]
	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8003fb8:	7f3b      	ldrb	r3, [r7, #28]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	b29b      	uxth	r3, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <mavlink_finalize_message>:
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af04      	add	r7, sp, #16
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	70fb      	strb	r3, [r7, #3]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70bb      	strb	r3, [r7, #2]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8003fe2:	78ba      	ldrb	r2, [r7, #2]
 8003fe4:	78f9      	ldrb	r1, [r7, #3]
 8003fe6:	7d3b      	ldrb	r3, [r7, #20]
 8003fe8:	9302      	str	r3, [sp, #8]
 8003fea:	7c3b      	ldrb	r3, [r7, #16]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	787b      	ldrb	r3, [r7, #1]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff7d 	bl	8003ef4 <mavlink_finalize_message_chan>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <mavlink_msg_to_send_buffer>:
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	1c99      	adds	r1, r3, #2
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	3306      	adds	r3, #6
 8004018:	461a      	mov	r2, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f007 f93a 	bl	800b294 <memcpy>
	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	78db      	ldrb	r3, [r3, #3]
 8004024:	3306      	adds	r3, #6
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	b29b      	uxth	r3, r3
 8004052:	3308      	adds	r3, #8
 8004054:	b29b      	uxth	r3, r3
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <mavlink_msg_cmd_params_decode>:
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_CMD_PARAMS_LEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	78db      	ldrb	r3, [r3, #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	73fb      	strb	r3, [r7, #15]
        memset(cmd_params, 0, MAVLINK_MSG_ID_CMD_PARAMS_LEN);
 8004078:	2201      	movs	r2, #1
 800407a:	2100      	movs	r1, #0
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f007 f914 	bl	800b2aa <memset>
    memcpy(cmd_params, _MAV_PAYLOAD(msg), len);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3308      	adds	r3, #8
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	4619      	mov	r1, r3
 800408a:	6838      	ldr	r0, [r7, #0]
 800408c:	f007 f902 	bl	800b294 <memcpy>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <mavlink_msg_cmd_velocity_decode>:
 *
 * @param msg The message to decode
 * @param cmd_velocity C-struct to decode the message contents into
 */
static inline void mavlink_msg_cmd_velocity_decode(const mavlink_message_t* msg, mavlink_cmd_velocity_t* cmd_velocity)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    cmd_velocity->v = mavlink_msg_cmd_velocity_get_v(msg);
    cmd_velocity->omega = mavlink_msg_cmd_velocity_get_omega(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_VELOCITY_LEN? msg->len : MAVLINK_MSG_ID_CMD_VELOCITY_LEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	78db      	ldrb	r3, [r3, #3]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	bf28      	it	cs
 80040aa:	2308      	movcs	r3, #8
 80040ac:	73fb      	strb	r3, [r7, #15]
        memset(cmd_velocity, 0, MAVLINK_MSG_ID_CMD_VELOCITY_LEN);
 80040ae:	2208      	movs	r2, #8
 80040b0:	2100      	movs	r1, #0
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	f007 f8f9 	bl	800b2aa <memset>
    memcpy(cmd_velocity, _MAV_PAYLOAD(msg), len);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3308      	adds	r3, #8
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	4619      	mov	r1, r3
 80040c0:	6838      	ldr	r0, [r7, #0]
 80040c2:	f007 f8e7 	bl	800b294 <memcpy>
#endif
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <mavlink_msg_evt_tilt_pack>:
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af02      	add	r7, sp, #8
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	460b      	mov	r3, r1
 80040de:	73bb      	strb	r3, [r7, #14]
    packet.tilt = tilt;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	617b      	str	r3, [r7, #20]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_TILT_LEN);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3308      	adds	r3, #8
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]
    msg->msgid = MAVLINK_MSG_ID_EVT_TILT;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2204      	movs	r2, #4
 80040f0:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_TILT_MIN_LEN, MAVLINK_MSG_ID_EVT_TILT_LEN, MAVLINK_MSG_ID_EVT_TILT_CRC);
 80040f2:	7bba      	ldrb	r2, [r7, #14]
 80040f4:	7bf9      	ldrb	r1, [r7, #15]
 80040f6:	2353      	movs	r3, #83	; 0x53
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	2304      	movs	r3, #4
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2304      	movs	r3, #4
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f7ff ff61 	bl	8003fc8 <mavlink_finalize_message>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <mavlink_msg_pid_params_pack>:
 * @param KD  KD
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_pid_params_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t pid_control, float KP, float KI, float KD)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	603a      	str	r2, [r7, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
 800411e:	460b      	mov	r3, r1
 8004120:	71bb      	strb	r3, [r7, #6]
 8004122:	4613      	mov	r3, r2
 8004124:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 12, pid_control);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PID_PARAMS_LEN);
#else
    mavlink_pid_params_t packet;
    packet.KP = KP;
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	60bb      	str	r3, [r7, #8]
    packet.KI = KI;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	60fb      	str	r3, [r7, #12]
    packet.KD = KD;
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	613b      	str	r3, [r7, #16]
    packet.pid_control = pid_control;
 8004132:	797b      	ldrb	r3, [r7, #5]
 8004134:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PID_PARAMS_LEN);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	f107 0108 	add.w	r1, r7, #8
 800413e:	220d      	movs	r2, #13
 8004140:	4618      	mov	r0, r3
 8004142:	f007 f8a7 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_PID_PARAMS;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	220f      	movs	r2, #15
 800414a:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_PID_PARAMS_MIN_LEN, MAVLINK_MSG_ID_PID_PARAMS_LEN, MAVLINK_MSG_ID_PID_PARAMS_CRC);
 800414c:	79ba      	ldrb	r2, [r7, #6]
 800414e:	79f9      	ldrb	r1, [r7, #7]
 8004150:	2302      	movs	r3, #2
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	230d      	movs	r3, #13
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	230d      	movs	r3, #13
 800415a:	6838      	ldr	r0, [r7, #0]
 800415c:	f7ff ff34 	bl	8003fc8 <mavlink_finalize_message>
 8004160:	4603      	mov	r3, r0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <mavlink_msg_pid_params_decode>:
 *
 * @param msg The message to decode
 * @param pid_params C-struct to decode the message contents into
 */
static inline void mavlink_msg_pid_params_decode(const mavlink_message_t* msg, mavlink_pid_params_t* pid_params)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
    pid_params->KP = mavlink_msg_pid_params_get_KP(msg);
    pid_params->KI = mavlink_msg_pid_params_get_KI(msg);
    pid_params->KD = mavlink_msg_pid_params_get_KD(msg);
    pid_params->pid_control = mavlink_msg_pid_params_get_pid_control(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PID_PARAMS_LEN? msg->len : MAVLINK_MSG_ID_PID_PARAMS_LEN;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	78db      	ldrb	r3, [r3, #3]
 8004178:	2b0d      	cmp	r3, #13
 800417a:	bf28      	it	cs
 800417c:	230d      	movcs	r3, #13
 800417e:	73fb      	strb	r3, [r7, #15]
        memset(pid_params, 0, MAVLINK_MSG_ID_PID_PARAMS_LEN);
 8004180:	220d      	movs	r2, #13
 8004182:	2100      	movs	r1, #0
 8004184:	6838      	ldr	r0, [r7, #0]
 8004186:	f007 f890 	bl	800b2aa <memset>
    memcpy(pid_params, _MAV_PAYLOAD(msg), len);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3308      	adds	r3, #8
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	4619      	mov	r1, r3
 8004192:	6838      	ldr	r0, [r7, #0]
 8004194:	f007 f87e 	bl	800b294 <memcpy>
#endif
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <mavlink_msg_pid_report_pack>:
 * @param U  Output
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_pid_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t pid_control, float sp, float fb, float P_Part, float I_Part, float D_Part, float U)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	; 0x30
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	603a      	str	r2, [r7, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
 80041ae:	460b      	mov	r3, r1
 80041b0:	71bb      	strb	r3, [r7, #6]
 80041b2:	4613      	mov	r3, r2
 80041b4:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 24, pid_control);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PID_REPORT_LEN);
#else
    mavlink_pid_report_t packet;
    packet.sp = sp;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	60fb      	str	r3, [r7, #12]
    packet.fb = fb;
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	613b      	str	r3, [r7, #16]
    packet.P_Part = P_Part;
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	617b      	str	r3, [r7, #20]
    packet.I_Part = I_Part;
 80041c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c4:	61bb      	str	r3, [r7, #24]
    packet.D_Part = D_Part;
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	61fb      	str	r3, [r7, #28]
    packet.U = U;
 80041ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041cc:	623b      	str	r3, [r7, #32]
    packet.pid_control = pid_control;
 80041ce:	797b      	ldrb	r3, [r7, #5]
 80041d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PID_REPORT_LEN);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	f107 010c 	add.w	r1, r7, #12
 80041dc:	2219      	movs	r2, #25
 80041de:	4618      	mov	r0, r3
 80041e0:	f007 f858 	bl	800b294 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_PID_REPORT;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_PID_REPORT_MIN_LEN, MAVLINK_MSG_ID_PID_REPORT_LEN, MAVLINK_MSG_ID_PID_REPORT_CRC);
 80041ea:	79ba      	ldrb	r2, [r7, #6]
 80041ec:	79f9      	ldrb	r1, [r7, #7]
 80041ee:	23c6      	movs	r3, #198	; 0xc6
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2319      	movs	r3, #25
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2319      	movs	r3, #25
 80041f8:	6838      	ldr	r0, [r7, #0]
 80041fa:	f7ff fee5 	bl	8003fc8 <mavlink_finalize_message>
 80041fe:	4603      	mov	r3, r0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <tilt_controller_callback>:
TID(gtid_imu_tilt);
TID(gtid_pid_report);

bool tilt_dir = true;

static void tilt_controller_callback(void* ctx){
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	float tilt;
	switch(params.tilt_type){
 8004210:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <tilt_controller_callback+0xd8>)
 8004212:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004216:	2b01      	cmp	r3, #1
 8004218:	d002      	beq.n	8004220 <tilt_controller_callback+0x18>
 800421a:	2b02      	cmp	r3, #2
 800421c:	d004      	beq.n	8004228 <tilt_controller_callback+0x20>
 800421e:	e007      	b.n	8004230 <tilt_controller_callback+0x28>
	case ROLL:
		tilt = imu_get_roll();
 8004220:	f7fd fde4 	bl	8001dec <imu_get_roll>
 8004224:	60f8      	str	r0, [r7, #12]
		break;
 8004226:	e006      	b.n	8004236 <tilt_controller_callback+0x2e>
	case PITCH:
		tilt = imu_get_pitch();
 8004228:	f7fd fdea 	bl	8001e00 <imu_get_pitch>
 800422c:	60f8      	str	r0, [r7, #12]
		break;
 800422e:	e002      	b.n	8004236 <tilt_controller_callback+0x2e>
	default:
		tilt = 0;
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
	}
	tilt -= params.tilt_offset;
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <tilt_controller_callback+0xd8>)
 8004238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800423c:	4619      	mov	r1, r3
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7fc fc46 	bl	8000ad0 <__aeabi_fsub>
 8004244:	4603      	mov	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

	float speed = pid_compute(&params.pid[0], tilt_setpoint, tilt, 0.001f*TILT_CONTROLLER_PERIOD);
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <tilt_controller_callback+0xdc>)
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <tilt_controller_callback+0xe0>)
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4823      	ldr	r0, [pc, #140]	; (80042e0 <tilt_controller_callback+0xd8>)
 8004252:	f001 fb61 	bl	8005918 <pid_compute>
 8004256:	60b8      	str	r0, [r7, #8]

	if(tilt > 70 || tilt < -70) {
 8004258:	4924      	ldr	r1, [pc, #144]	; (80042ec <tilt_controller_callback+0xe4>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7fc fefe 	bl	800105c <__aeabi_fcmpgt>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <tilt_controller_callback+0x6c>
 8004266:	4922      	ldr	r1, [pc, #136]	; (80042f0 <tilt_controller_callback+0xe8>)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7fc fed9 	bl	8001020 <__aeabi_fcmplt>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <tilt_controller_callback+0x7e>
		speed = 0;
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
		pid_reset(&params.pid[0]);
 800427a:	4819      	ldr	r0, [pc, #100]	; (80042e0 <tilt_controller_callback+0xd8>)
 800427c:	f001 fc26 	bl	8005acc <pid_reset>
		pid_reset(&params.pid[1]);
 8004280:	481c      	ldr	r0, [pc, #112]	; (80042f4 <tilt_controller_callback+0xec>)
 8004282:	f001 fc23 	bl	8005acc <pid_reset>
	}

	motors_setspeed(MOTOR_0, speed + (float)gcmd_velocity.omega*OMEGA_COEFF);
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <tilt_controller_callback+0xf0>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	491c      	ldr	r1, [pc, #112]	; (80042fc <tilt_controller_callback+0xf4>)
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc fd29 	bl	8000ce4 <__aeabi_fmul>
 8004292:	4603      	mov	r3, r0
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc fc1c 	bl	8000ad4 <__addsf3>
 800429c:	4603      	mov	r3, r0
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc fefc 	bl	800109c <__aeabi_f2iz>
 80042a4:	4603      	mov	r3, r0
 80042a6:	4619      	mov	r1, r3
 80042a8:	2000      	movs	r0, #0
 80042aa:	f001 f8af 	bl	800540c <motors_setspeed>
	motors_setspeed(MOTOR_1, speed - (float)gcmd_velocity.omega*OMEGA_COEFF);
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <tilt_controller_callback+0xf0>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4912      	ldr	r1, [pc, #72]	; (80042fc <tilt_controller_callback+0xf4>)
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc fd15 	bl	8000ce4 <__aeabi_fmul>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4619      	mov	r1, r3
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f7fc fc06 	bl	8000ad0 <__aeabi_fsub>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc fee8 	bl	800109c <__aeabi_f2iz>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4619      	mov	r1, r3
 80042d0:	2001      	movs	r0, #1
 80042d2:	f001 f89b 	bl	800540c <motors_setspeed>
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20001078 	.word	0x20001078
 80042e4:	20001b88 	.word	0x20001b88
 80042e8:	3ba3d70b 	.word	0x3ba3d70b
 80042ec:	428c0000 	.word	0x428c0000
 80042f0:	c28c0000 	.word	0xc28c0000
 80042f4:	200010c4 	.word	0x200010c4
 80042f8:	20001a68 	.word	0x20001a68
 80042fc:	43480000 	.word	0x43480000

08004300 <vel_controller_callback>:

static void vel_controller_callback(void* ctx){
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	if(gcmd_velocity.cnt == 0){
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <vel_controller_callback+0x88>)
 800430a:	7b1b      	ldrb	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <vel_controller_callback+0x22>
		gcmd_velocity.vx = 0;
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <vel_controller_callback+0x88>)
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
		gcmd_velocity.omega = 0;
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <vel_controller_callback+0x88>)
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	e005      	b.n	800432e <vel_controller_callback+0x2e>
	}
	else{
		gcmd_velocity.cnt--;
 8004322:	4b19      	ldr	r3, [pc, #100]	; (8004388 <vel_controller_callback+0x88>)
 8004324:	7b1b      	ldrb	r3, [r3, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b17      	ldr	r3, [pc, #92]	; (8004388 <vel_controller_callback+0x88>)
 800432c:	731a      	strb	r2, [r3, #12]
	}

	int16_t motor0_speed = enc_read(MOTOR_0);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fd f876 	bl	8001420 <enc_read>
 8004334:	4603      	mov	r3, r0
 8004336:	81fb      	strh	r3, [r7, #14]
	int16_t motor1_speed = enc_read(MOTOR_1);
 8004338:	2001      	movs	r0, #1
 800433a:	f7fd f871 	bl	8001420 <enc_read>
 800433e:	4603      	mov	r3, r0
 8004340:	81bb      	strh	r3, [r7, #12]
	float direction = -(motor0_speed + motor1_speed)/2;
 8004342:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004346:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	425b      	negs	r3, r3
 800434e:	0fda      	lsrs	r2, r3, #31
 8004350:	4413      	add	r3, r2
 8004352:	105b      	asrs	r3, r3, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc fc71 	bl	8000c3c <__aeabi_i2f>
 800435a:	4603      	mov	r3, r0
 800435c:	60bb      	str	r3, [r7, #8]

	tilt_setpoint = pid_compute(&params.pid[1], gcmd_velocity.vx*VELOC_COEFF, direction, 0.001f*VEL_CONTROLLER_PERIOD);
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <vel_controller_callback+0x88>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <vel_controller_callback+0x8c>)
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc fcbd 	bl	8000ce4 <__aeabi_fmul>
 800436a:	4603      	mov	r3, r0
 800436c:	4619      	mov	r1, r3
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <vel_controller_callback+0x90>)
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	4808      	ldr	r0, [pc, #32]	; (8004394 <vel_controller_callback+0x94>)
 8004374:	f001 fad0 	bl	8005918 <pid_compute>
 8004378:	4602      	mov	r2, r0
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <vel_controller_callback+0x98>)
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20001a68 	.word	0x20001a68
 800438c:	43160000 	.word	0x43160000
 8004390:	3dcccccd 	.word	0x3dcccccd
 8004394:	200010c4 	.word	0x200010c4
 8004398:	20001b88 	.word	0x20001b88

0800439c <load_params>:

static int load_params(){
 800439c:	b580      	push	{r7, lr}
 800439e:	b0c6      	sub	sp, #280	; 0x118
 80043a0:	af04      	add	r7, sp, #16
	// Load parameters from non-volatile memory
	params_load();
 80043a2:	f001 fa0b 	bl	80057bc <params_load>

	// Send parameters to GCS
	uint8_t gmav_send_buf[256];
	uint16_t len;

	mavlink_msg_pid_params_pack(0,0,&msg,PID_TILT,params.pid[0].KP,params.pid[0].KI,params.pid[0].KD);
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <load_params+0xe4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a35      	ldr	r2, [pc, #212]	; (8004480 <load_params+0xe4>)
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	4934      	ldr	r1, [pc, #208]	; (8004480 <load_params+0xe4>)
 80043b0:	6889      	ldr	r1, [r1, #8]
 80043b2:	9102      	str	r1, [sp, #8]
 80043b4:	9201      	str	r2, [sp, #4]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2301      	movs	r3, #1
 80043ba:	4a32      	ldr	r2, [pc, #200]	; (8004484 <load_params+0xe8>)
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7ff fea6 	bl	8004110 <mavlink_msg_pid_params_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	492f      	ldr	r1, [pc, #188]	; (8004484 <load_params+0xe8>)
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fe1b 	bl	8004004 <mavlink_msg_to_send_buffer>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	mav_send((char*)gmav_send_buf, len);
 80043d4:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe f943 	bl	8002668 <mav_send>

	mavlink_msg_pid_params_pack(0,0,&msg,PID_VEL,params.pid[1].KP,params.pid[1].KI,params.pid[1].KD);
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <load_params+0xe4>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <load_params+0xe4>)
 80043e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ea:	4925      	ldr	r1, [pc, #148]	; (8004480 <load_params+0xe4>)
 80043ec:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80043ee:	9102      	str	r1, [sp, #8]
 80043f0:	9201      	str	r2, [sp, #4]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2302      	movs	r3, #2
 80043f6:	4a23      	ldr	r2, [pc, #140]	; (8004484 <load_params+0xe8>)
 80043f8:	2100      	movs	r1, #0
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff fe88 	bl	8004110 <mavlink_msg_pid_params_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	4920      	ldr	r1, [pc, #128]	; (8004484 <load_params+0xe8>)
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fdfd 	bl	8004004 <mavlink_msg_to_send_buffer>
 800440a:	4603      	mov	r3, r0
 800440c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	mav_send((char*)gmav_send_buf, len);
 8004410:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f925 	bl	8002668 <mav_send>

	mavlink_msg_pid_params_pack(0,0,&msg,PID_POS,params.pid[2].KP,params.pid[2].KI,params.pid[2].KD);
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <load_params+0xe4>)
 8004420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <load_params+0xe4>)
 8004426:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800442a:	4915      	ldr	r1, [pc, #84]	; (8004480 <load_params+0xe4>)
 800442c:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 8004430:	9102      	str	r1, [sp, #8]
 8004432:	9201      	str	r2, [sp, #4]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2303      	movs	r3, #3
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <load_params+0xe8>)
 800443a:	2100      	movs	r1, #0
 800443c:	2000      	movs	r0, #0
 800443e:	f7ff fe67 	bl	8004110 <mavlink_msg_pid_params_pack>
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &msg);
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	490f      	ldr	r1, [pc, #60]	; (8004484 <load_params+0xe8>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fddc 	bl	8004004 <mavlink_msg_to_send_buffer>
 800444c:	4603      	mov	r3, r0
 800444e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	mav_send((char*)gmav_send_buf, len);
 8004452:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe f904 	bl	8002668 <mav_send>

	pid_reset(&params.pid[0]);
 8004460:	4807      	ldr	r0, [pc, #28]	; (8004480 <load_params+0xe4>)
 8004462:	f001 fb33 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[1]);
 8004466:	4808      	ldr	r0, [pc, #32]	; (8004488 <load_params+0xec>)
 8004468:	f001 fb30 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[2]);
 800446c:	4807      	ldr	r0, [pc, #28]	; (800448c <load_params+0xf0>)
 800446e:	f001 fb2d 	bl	8005acc <pid_reset>

	return 0;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20001078 	.word	0x20001078
 8004484:	20001a78 	.word	0x20001a78
 8004488:	200010c4 	.word	0x200010c4
 800448c:	20001110 	.word	0x20001110

08004490 <save_params>:

static int save_params(){
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	// Save parameters to non-volatile memory
	params_save();
 8004494:	f001 f8d4 	bl	8005640 <params_save>
	return 0;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <write_param>:

static int write_param(mavlink_message_t *msg){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	// Change current parameters according to GCS
	mavlink_pid_params_t pid_msg;
	mavlink_msg_pid_params_decode(msg,&pid_msg);
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fe5b 	bl	800416a <mavlink_msg_pid_params_decode>
	if(pid_msg.pid_control == PID_TILT){
 80044b4:	7d3b      	ldrb	r3, [r7, #20]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d109      	bne.n	80044ce <write_param+0x2e>
		params.pid[0].KP = pid_msg.KP;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <write_param+0x70>)
 80044be:	6013      	str	r3, [r2, #0]
		params.pid[0].KI = pid_msg.KI;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <write_param+0x70>)
 80044c4:	6053      	str	r3, [r2, #4]
		params.pid[0].KD = pid_msg.KD;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4a11      	ldr	r2, [pc, #68]	; (8004510 <write_param+0x70>)
 80044ca:	6093      	str	r3, [r2, #8]
 80044cc:	e01b      	b.n	8004506 <write_param+0x66>
	}
	else if(pid_msg.pid_control == PID_VEL){
 80044ce:	7d3b      	ldrb	r3, [r7, #20]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d109      	bne.n	80044e8 <write_param+0x48>
		params.pid[1].KP = pid_msg.KP;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <write_param+0x70>)
 80044d8:	64d3      	str	r3, [r2, #76]	; 0x4c
		params.pid[1].KI = pid_msg.KI;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <write_param+0x70>)
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
		params.pid[1].KD = pid_msg.KD;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <write_param+0x70>)
 80044e4:	6553      	str	r3, [r2, #84]	; 0x54
 80044e6:	e00e      	b.n	8004506 <write_param+0x66>
	}
	else if(pid_msg.pid_control == PID_POS){
 80044e8:	7d3b      	ldrb	r3, [r7, #20]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d10b      	bne.n	8004506 <write_param+0x66>
		params.pid[2].KP = pid_msg.KP;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a07      	ldr	r2, [pc, #28]	; (8004510 <write_param+0x70>)
 80044f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
		params.pid[2].KI = pid_msg.KI;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <write_param+0x70>)
 80044fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		params.pid[2].KD = pid_msg.KD;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a03      	ldr	r2, [pc, #12]	; (8004510 <write_param+0x70>)
 8004502:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	}
	return 0;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20001078 	.word	0x20001078

08004514 <tilt_report_callback>:

static void tilt_report_callback(void *ctx){
 8004514:	b580      	push	{r7, lr}
 8004516:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800451a:	af00      	add	r7, sp, #0
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint8_t mav_send_buf[256];
	float tilt;
	switch(params.tilt_type){
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <tilt_report_callback+0x90>)
 8004522:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004526:	2b01      	cmp	r3, #1
 8004528:	d002      	beq.n	8004530 <tilt_report_callback+0x1c>
 800452a:	2b02      	cmp	r3, #2
 800452c:	d005      	beq.n	800453a <tilt_report_callback+0x26>
 800452e:	e009      	b.n	8004544 <tilt_report_callback+0x30>
	case ROLL:
		tilt = imu_get_roll();
 8004530:	f7fd fc5c 	bl	8001dec <imu_get_roll>
 8004534:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		break;
 8004538:	e008      	b.n	800454c <tilt_report_callback+0x38>
	case PITCH:
		tilt = imu_get_pitch();
 800453a:	f7fd fc61 	bl	8001e00 <imu_get_pitch>
 800453e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		break;
 8004542:	e003      	b.n	800454c <tilt_report_callback+0x38>
	default:
		tilt = 0;
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	}
	tilt -= params.tilt_offset;
 800454c:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <tilt_report_callback+0x90>)
 800454e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004552:	4619      	mov	r1, r3
 8004554:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8004558:	f7fc faba 	bl	8000ad0 <__aeabi_fsub>
 800455c:	4603      	mov	r3, r0
 800455e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	mavlink_msg_evt_tilt_pack(0,0,&msg,tilt);
 8004562:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8004566:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800456a:	2100      	movs	r1, #0
 800456c:	2000      	movs	r0, #0
 800456e:	f7ff fdae 	bl	80040ce <mavlink_msg_evt_tilt_pack>
	uint16_t len = mavlink_msg_to_send_buffer(mav_send_buf, &msg);
 8004572:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8004576:	f107 0308 	add.w	r3, r7, #8
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fd41 	bl	8004004 <mavlink_msg_to_send_buffer>
 8004582:	4603      	mov	r3, r0
 8004584:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
	mav_send((char*)mav_send_buf, len);
 8004588:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f868 	bl	8002668 <mav_send>
}
 8004598:	bf00      	nop
 800459a:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20001078 	.word	0x20001078

080045a8 <pid_report_callback>:

static void pid_report_callback(void *ctx){
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80045ae:	af06      	add	r7, sp, #24
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	6018      	str	r0, [r3, #0]
	mavlink_message_t pid_report_msg;
	uint8_t gmav_send_buf[256];

	mavlink_msg_pid_report_pack(0,0,&pid_report_msg,PID_TILT,
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <pid_report_callback+0x138>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <pid_report_callback+0x138>)
 80045ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045bc:	4948      	ldr	r1, [pc, #288]	; (80046e0 <pid_report_callback+0x138>)
 80045be:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80045c0:	4847      	ldr	r0, [pc, #284]	; (80046e0 <pid_report_callback+0x138>)
 80045c2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80045c4:	4c46      	ldr	r4, [pc, #280]	; (80046e0 <pid_report_callback+0x138>)
 80045c6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80045c8:	4d45      	ldr	r5, [pc, #276]	; (80046e0 <pid_report_callback+0x138>)
 80045ca:	6cad      	ldr	r5, [r5, #72]	; 0x48
 80045cc:	f507 7686 	add.w	r6, r7, #268	; 0x10c
 80045d0:	9505      	str	r5, [sp, #20]
 80045d2:	9404      	str	r4, [sp, #16]
 80045d4:	9003      	str	r0, [sp, #12]
 80045d6:	9102      	str	r1, [sp, #8]
 80045d8:	9201      	str	r2, [sp, #4]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2301      	movs	r3, #1
 80045de:	4632      	mov	r2, r6
 80045e0:	2100      	movs	r1, #0
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7ff fddc 	bl	80041a0 <mavlink_msg_pid_report_pack>
			params.pid[0].fb,
			params.pid[0].P_Part,
			params.pid[0].I_Part,
			params.pid[0].D_Part,
			params.pid[0].U);
	uint16_t len = mavlink_msg_to_send_buffer(gmav_send_buf, &pid_report_msg);
 80045e8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd06 	bl	8004004 <mavlink_msg_to_send_buffer>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
	mav_send((char*)gmav_send_buf, len);
 80045fe:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f82d 	bl	8002668 <mav_send>

	mavlink_msg_pid_report_pack(0,0,&pid_report_msg,PID_VEL,
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <pid_report_callback+0x138>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <pid_report_callback+0x138>)
 8004614:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004616:	4932      	ldr	r1, [pc, #200]	; (80046e0 <pid_report_callback+0x138>)
 8004618:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 800461c:	4830      	ldr	r0, [pc, #192]	; (80046e0 <pid_report_callback+0x138>)
 800461e:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8004622:	4c2f      	ldr	r4, [pc, #188]	; (80046e0 <pid_report_callback+0x138>)
 8004624:	f8d4 4090 	ldr.w	r4, [r4, #144]	; 0x90
 8004628:	4d2d      	ldr	r5, [pc, #180]	; (80046e0 <pid_report_callback+0x138>)
 800462a:	f8d5 5094 	ldr.w	r5, [r5, #148]	; 0x94
 800462e:	f507 7686 	add.w	r6, r7, #268	; 0x10c
 8004632:	9505      	str	r5, [sp, #20]
 8004634:	9404      	str	r4, [sp, #16]
 8004636:	9003      	str	r0, [sp, #12]
 8004638:	9102      	str	r1, [sp, #8]
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2302      	movs	r3, #2
 8004640:	4632      	mov	r2, r6
 8004642:	2100      	movs	r1, #0
 8004644:	2000      	movs	r0, #0
 8004646:	f7ff fdab 	bl	80041a0 <mavlink_msg_pid_report_pack>
			params.pid[1].fb,
			params.pid[1].P_Part,
			params.pid[1].I_Part,
			params.pid[1].D_Part,
			params.pid[1].U);
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &pid_report_msg);
 800464a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800464e:	f107 030c 	add.w	r3, r7, #12
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fcd5 	bl	8004004 <mavlink_msg_to_send_buffer>
 800465a:	4603      	mov	r3, r0
 800465c:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
	mav_send((char*)gmav_send_buf, len);
 8004660:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd fffc 	bl	8002668 <mav_send>

	mavlink_msg_pid_report_pack(0,0,&pid_report_msg,PID_POS,
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <pid_report_callback+0x138>)
 8004672:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004676:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <pid_report_callback+0x138>)
 8004678:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <pid_report_callback+0x138>)
 800467e:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
 8004682:	4817      	ldr	r0, [pc, #92]	; (80046e0 <pid_report_callback+0x138>)
 8004684:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
 8004688:	4c15      	ldr	r4, [pc, #84]	; (80046e0 <pid_report_callback+0x138>)
 800468a:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
 800468e:	4d14      	ldr	r5, [pc, #80]	; (80046e0 <pid_report_callback+0x138>)
 8004690:	f8d5 50e0 	ldr.w	r5, [r5, #224]	; 0xe0
 8004694:	f507 7686 	add.w	r6, r7, #268	; 0x10c
 8004698:	9505      	str	r5, [sp, #20]
 800469a:	9404      	str	r4, [sp, #16]
 800469c:	9003      	str	r0, [sp, #12]
 800469e:	9102      	str	r1, [sp, #8]
 80046a0:	9201      	str	r2, [sp, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2303      	movs	r3, #3
 80046a6:	4632      	mov	r2, r6
 80046a8:	2100      	movs	r1, #0
 80046aa:	2000      	movs	r0, #0
 80046ac:	f7ff fd78 	bl	80041a0 <mavlink_msg_pid_report_pack>
			params.pid[2].fb,
			params.pid[2].P_Part,
			params.pid[2].I_Part,
			params.pid[2].D_Part,
			params.pid[2].U);
	len = mavlink_msg_to_send_buffer(gmav_send_buf, &pid_report_msg);
 80046b0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fca2 	bl	8004004 <mavlink_msg_to_send_buffer>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
	mav_send((char*)gmav_send_buf, len);
 80046c6:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd ffc9 	bl	8002668 <mav_send>
}
 80046d6:	bf00      	nop
 80046d8:	f507 7709 	add.w	r7, r7, #548	; 0x224
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e0:	20001078 	.word	0x20001078

080046e4 <mode_pidt_init>:


void mode_pidt_init(){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	motors_init();
 80046e8:	f000 fd70 	bl	80051cc <motors_init>
	enc_init();
 80046ec:	f7fc fe40 	bl	8001370 <enc_init>
	imu_init();
 80046f0:	f7fd fb50 	bl	8001d94 <imu_init>

	params.pid[1].maxIPart = 5;
 80046f4:	4b22      	ldr	r3, [pc, #136]	; (8004780 <mode_pidt_init+0x9c>)
 80046f6:	4a23      	ldr	r2, [pc, #140]	; (8004784 <mode_pidt_init+0xa0>)
 80046f8:	65da      	str	r2, [r3, #92]	; 0x5c
	params.pid[1].minIpart = -5;
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <mode_pidt_init+0x9c>)
 80046fc:	4a22      	ldr	r2, [pc, #136]	; (8004788 <mode_pidt_init+0xa4>)
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58

	params.pid[1].maxDPart = 5;
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <mode_pidt_init+0x9c>)
 8004702:	4a20      	ldr	r2, [pc, #128]	; (8004784 <mode_pidt_init+0xa0>)
 8004704:	665a      	str	r2, [r3, #100]	; 0x64
	params.pid[1].minDpart = -5;
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <mode_pidt_init+0x9c>)
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <mode_pidt_init+0xa4>)
 800470a:	661a      	str	r2, [r3, #96]	; 0x60

	params.pid[1].maxOut = 5;
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <mode_pidt_init+0x9c>)
 800470e:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <mode_pidt_init+0xa0>)
 8004710:	66da      	str	r2, [r3, #108]	; 0x6c
	params.pid[1].minOut = -5;
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <mode_pidt_init+0x9c>)
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <mode_pidt_init+0xa4>)
 8004716:	669a      	str	r2, [r3, #104]	; 0x68

	pid_reset(&params.pid[0]);
 8004718:	4819      	ldr	r0, [pc, #100]	; (8004780 <mode_pidt_init+0x9c>)
 800471a:	f001 f9d7 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[1]);
 800471e:	481b      	ldr	r0, [pc, #108]	; (800478c <mode_pidt_init+0xa8>)
 8004720:	f001 f9d4 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[2]);
 8004724:	481a      	ldr	r0, [pc, #104]	; (8004790 <mode_pidt_init+0xac>)
 8004726:	f001 f9d1 	bl	8005acc <pid_reset>

	// Periodic task initialization
	gtid_tilt_controller = timer_register_callback(tilt_controller_callback, TILT_CONTROLLER_PERIOD, 0, TIMER_MODE_REPEAT);
 800472a:	2300      	movs	r3, #0
 800472c:	2200      	movs	r2, #0
 800472e:	2105      	movs	r1, #5
 8004730:	4818      	ldr	r0, [pc, #96]	; (8004794 <mode_pidt_init+0xb0>)
 8004732:	f001 f9fb 	bl	8005b2c <timer_register_callback>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <mode_pidt_init+0xb4>)
 800473c:	701a      	strb	r2, [r3, #0]
	gtid_vel_controller = timer_register_callback(vel_controller_callback, VEL_CONTROLLER_PERIOD, 0, TIMER_MODE_REPEAT);
 800473e:	2300      	movs	r3, #0
 8004740:	2200      	movs	r2, #0
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	4815      	ldr	r0, [pc, #84]	; (800479c <mode_pidt_init+0xb8>)
 8004746:	f001 f9f1 	bl	8005b2c <timer_register_callback>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <mode_pidt_init+0xbc>)
 8004750:	701a      	strb	r2, [r3, #0]
	gtid_imu_tilt = timer_register_callback(tilt_report_callback, TILT_REPORT_PERIOD, 0, TIMER_MODE_REPEAT);
 8004752:	2300      	movs	r3, #0
 8004754:	2200      	movs	r2, #0
 8004756:	2164      	movs	r1, #100	; 0x64
 8004758:	4812      	ldr	r0, [pc, #72]	; (80047a4 <mode_pidt_init+0xc0>)
 800475a:	f001 f9e7 	bl	8005b2c <timer_register_callback>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <mode_pidt_init+0xc4>)
 8004764:	701a      	strb	r2, [r3, #0]
	gtid_pid_report = timer_register_callback(pid_report_callback, PID_REPORT_PERIOD, 0, TIMER_MODE_REPEAT);
 8004766:	2300      	movs	r3, #0
 8004768:	2200      	movs	r2, #0
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	480f      	ldr	r0, [pc, #60]	; (80047ac <mode_pidt_init+0xc8>)
 800476e:	f001 f9dd 	bl	8005b2c <timer_register_callback>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <mode_pidt_init+0xcc>)
 8004778:	701a      	strb	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20001078 	.word	0x20001078
 8004784:	40a00000 	.word	0x40a00000
 8004788:	c0a00000 	.word	0xc0a00000
 800478c:	200010c4 	.word	0x200010c4
 8004790:	20001110 	.word	0x20001110
 8004794:	08004209 	.word	0x08004209
 8004798:	2000106e 	.word	0x2000106e
 800479c:	08004301 	.word	0x08004301
 80047a0:	2000106f 	.word	0x2000106f
 80047a4:	08004515 	.word	0x08004515
 80047a8:	20001070 	.word	0x20001070
 80047ac:	080045a9 	.word	0x080045a9
 80047b0:	20001071 	.word	0x20001071

080047b4 <mode_pidt_deinit>:

void mode_pidt_deinit(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	// Hardware de-initialization
	motors_deinit();
 80047b8:	f000 fd56 	bl	8005268 <motors_deinit>
	enc_deinit();
 80047bc:	f7fc fe1e 	bl	80013fc <enc_deinit>
	imu_deinit();
 80047c0:	f7fd fb06 	bl	8001dd0 <imu_deinit>

	// Periodic task de-initialization
	timer_unregister_callback(gtid_tilt_controller);
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <mode_pidt_deinit+0x44>)
 80047c6:	f993 3000 	ldrsb.w	r3, [r3]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f9fe 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_vel_controller);
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <mode_pidt_deinit+0x48>)
 80047d2:	f993 3000 	ldrsb.w	r3, [r3]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 f9f8 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_imu_tilt);
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <mode_pidt_deinit+0x4c>)
 80047de:	f993 3000 	ldrsb.w	r3, [r3]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f9f2 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_pid_report);
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <mode_pidt_deinit+0x50>)
 80047ea:	f993 3000 	ldrsb.w	r3, [r3]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f9ec 	bl	8005bcc <timer_unregister_callback>
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	2000106e 	.word	0x2000106e
 80047fc:	2000106f 	.word	0x2000106f
 8004800:	20001070 	.word	0x20001070
 8004804:	20001071 	.word	0x20001071

08004808 <on_mode_pidt_mavlink_recv>:

void on_mode_pidt_mavlink_recv(mavlink_message_t *msg){
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	switch(msg->msgid){
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	79db      	ldrb	r3, [r3, #7]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d035      	beq.n	8004884 <on_mode_pidt_mavlink_recv+0x7c>
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d027      	beq.n	800486c <on_mode_pidt_mavlink_recv+0x64>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d000      	beq.n	8004822 <on_mode_pidt_mavlink_recv+0x1a>

			gcmd_velocity.cnt = (CONTROL_TIMEOUT_MS/VEL_CONTROLLER_PERIOD);
		}
		break;
	default:
		break;
 8004820:	e0e1      	b.n	80049e6 <on_mode_pidt_mavlink_recv+0x1de>
			mavlink_msg_cmd_params_decode(msg, &cmd_msg);
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fc18 	bl	800405e <mavlink_msg_cmd_params_decode>
			if(cmd_msg.cmd_params == CMD_LOAD){
 800482e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d10a      	bne.n	800484c <on_mode_pidt_mavlink_recv+0x44>
				if(load_params() != 0) respond_error();
 8004836:	f7ff fdb1 	bl	800439c <load_params>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <on_mode_pidt_mavlink_recv+0x3e>
 8004840:	f7fd ff4d 	bl	80026de <respond_error>
		break;
 8004844:	e0ce      	b.n	80049e4 <on_mode_pidt_mavlink_recv+0x1dc>
				else respond_ok();
 8004846:	f7fd ff29 	bl	800269c <respond_ok>
		break;
 800484a:	e0cb      	b.n	80049e4 <on_mode_pidt_mavlink_recv+0x1dc>
			else if(cmd_msg.cmd_params == CMD_SAVE){
 800484c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 80c7 	bne.w	80049e4 <on_mode_pidt_mavlink_recv+0x1dc>
				if(save_params() != 0) respond_error();
 8004856:	f7ff fe1b 	bl	8004490 <save_params>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <on_mode_pidt_mavlink_recv+0x5e>
 8004860:	f7fd ff3d 	bl	80026de <respond_error>
		break;
 8004864:	e0be      	b.n	80049e4 <on_mode_pidt_mavlink_recv+0x1dc>
				else respond_ok();
 8004866:	f7fd ff19 	bl	800269c <respond_ok>
		break;
 800486a:	e0bb      	b.n	80049e4 <on_mode_pidt_mavlink_recv+0x1dc>
		if(write_param(msg) != 0) respond_error();
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fe17 	bl	80044a0 <write_param>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <on_mode_pidt_mavlink_recv+0x76>
 8004878:	f7fd ff31 	bl	80026de <respond_error>
		break;
 800487c:	e0b3      	b.n	80049e6 <on_mode_pidt_mavlink_recv+0x1de>
		else respond_ok();
 800487e:	f7fd ff0d 	bl	800269c <respond_ok>
		break;
 8004882:	e0b0      	b.n	80049e6 <on_mode_pidt_mavlink_recv+0x1de>
			mavlink_msg_cmd_velocity_decode(msg, &cmd_velocity);
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fc04 	bl	8004098 <mavlink_msg_cmd_velocity_decode>
			if(cmd_velocity.v > -0.15 && cmd_velocity.v < 0.15) cmd_velocity.v = 0;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fdc0 	bl	8000418 <__aeabi_f2d>
 8004898:	a355      	add	r3, pc, #340	; (adr r3, 80049f0 <on_mode_pidt_mavlink_recv+0x1e8>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fc f8a3 	bl	80009e8 <__aeabi_dcmpgt>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00e      	beq.n	80048c6 <on_mode_pidt_mavlink_recv+0xbe>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fdb4 	bl	8000418 <__aeabi_f2d>
 80048b0:	a351      	add	r3, pc, #324	; (adr r3, 80049f8 <on_mode_pidt_mavlink_recv+0x1f0>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f7fc f879 	bl	80009ac <__aeabi_dcmplt>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <on_mode_pidt_mavlink_recv+0xbe>
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
			if(cmd_velocity.v*gcmd_velocity.vx <= 0) gcmd_velocity.is_dir_change = true;
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4b4d      	ldr	r3, [pc, #308]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7fc fa08 	bl	8000ce4 <__aeabi_fmul>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fbaa 	bl	8001034 <__aeabi_fcmple>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <on_mode_pidt_mavlink_recv+0xe4>
 80048e6:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	735a      	strb	r2, [r3, #13]
			gcmd_velocity.vx += 0.5*(cmd_velocity.v-gcmd_velocity.vx);
 80048ec:	4b44      	ldr	r3, [pc, #272]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fb fd91 	bl	8000418 <__aeabi_f2d>
 80048f6:	4604      	mov	r4, r0
 80048f8:	460d      	mov	r5, r1
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fc f8e4 	bl	8000ad0 <__aeabi_fsub>
 8004908:	4603      	mov	r3, r0
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fd84 	bl	8000418 <__aeabi_f2d>
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <on_mode_pidt_mavlink_recv+0x1fc>)
 8004916:	f7fb fdd7 	bl	80004c8 <__aeabi_dmul>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fc1b 	bl	800015c <__adddf3>
 8004926:	4603      	mov	r3, r0
 8004928:	460c      	mov	r4, r1
 800492a:	4618      	mov	r0, r3
 800492c:	4621      	mov	r1, r4
 800492e:	f7fc f87b 	bl	8000a28 <__aeabi_d2f>
 8004932:	4602      	mov	r2, r0
 8004934:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 8004936:	601a      	str	r2, [r3, #0]
			if(gcmd_velocity.vx > 1) gcmd_velocity.vx=1;
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004940:	4618      	mov	r0, r3
 8004942:	f7fc fb8b 	bl	800105c <__aeabi_fcmpgt>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <on_mode_pidt_mavlink_recv+0x14c>
 800494c:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 800494e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004952:	601a      	str	r2, [r3, #0]
			if(gcmd_velocity.vx < -1) gcmd_velocity.vx=-1;
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	492b      	ldr	r1, [pc, #172]	; (8004a08 <on_mode_pidt_mavlink_recv+0x200>)
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fb60 	bl	8001020 <__aeabi_fcmplt>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <on_mode_pidt_mavlink_recv+0x164>
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <on_mode_pidt_mavlink_recv+0x200>)
 800496a:	601a      	str	r2, [r3, #0]
			if(cmd_velocity.omega > -0.15 && cmd_velocity.omega < 0.15) cmd_velocity.omega=0;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fb fd52 	bl	8000418 <__aeabi_f2d>
 8004974:	a31e      	add	r3, pc, #120	; (adr r3, 80049f0 <on_mode_pidt_mavlink_recv+0x1e8>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fc f835 	bl	80009e8 <__aeabi_dcmpgt>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <on_mode_pidt_mavlink_recv+0x19a>
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fb fd46 	bl	8000418 <__aeabi_f2d>
 800498c:	a31a      	add	r3, pc, #104	; (adr r3, 80049f8 <on_mode_pidt_mavlink_recv+0x1f0>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fc f80b 	bl	80009ac <__aeabi_dcmplt>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <on_mode_pidt_mavlink_recv+0x19a>
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
			gcmd_velocity.omega = cmd_velocity.omega;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049a6:	6093      	str	r3, [r2, #8]
			if(gcmd_velocity.omega > 1) gcmd_velocity.omega=1;
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fc fb53 	bl	800105c <__aeabi_fcmpgt>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <on_mode_pidt_mavlink_recv+0x1bc>
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049c2:	609a      	str	r2, [r3, #8]
			if(gcmd_velocity.omega < -1) gcmd_velocity.omega=-1;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	490f      	ldr	r1, [pc, #60]	; (8004a08 <on_mode_pidt_mavlink_recv+0x200>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc fb28 	bl	8001020 <__aeabi_fcmplt>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <on_mode_pidt_mavlink_recv+0x1d4>
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049d8:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <on_mode_pidt_mavlink_recv+0x200>)
 80049da:	609a      	str	r2, [r3, #8]
			gcmd_velocity.cnt = (CONTROL_TIMEOUT_MS/VEL_CONTROLLER_PERIOD);
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <on_mode_pidt_mavlink_recv+0x1f8>)
 80049de:	220a      	movs	r2, #10
 80049e0:	731a      	strb	r2, [r3, #12]
		break;
 80049e2:	e000      	b.n	80049e6 <on_mode_pidt_mavlink_recv+0x1de>
		break;
 80049e4:	bf00      	nop
	}
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bdb0      	pop	{r4, r5, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	33333333 	.word	0x33333333
 80049f4:	bfc33333 	.word	0xbfc33333
 80049f8:	33333333 	.word	0x33333333
 80049fc:	3fc33333 	.word	0x3fc33333
 8004a00:	20001a68 	.word	0x20001a68
 8004a04:	3fe00000 	.word	0x3fe00000
 8004a08:	bf800000 	.word	0xbf800000

08004a0c <crc_accumulate>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	4053      	eors	r3, r2
 8004a22:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	b25a      	sxtb	r2, r3
 8004a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2e:	4053      	eors	r3, r2
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b21a      	sxth	r2, r3
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	b21b      	sxth	r3, r3
 8004a44:	4053      	eors	r3, r2
 8004a46:	b21a      	sxth	r2, r3
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	4053      	eors	r3, r2
 8004a50:	b21a      	sxth	r2, r3
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	4053      	eors	r3, r2
 8004a5c:	b21b      	sxth	r3, r3
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	801a      	strh	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <crc_init>:
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7c:	801a      	strh	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <crc_calculate>:
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
        crc_init(&crcTmp);
 8004a94:	f107 030e 	add.w	r3, r7, #14
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ffe8 	bl	8004a6e <crc_init>
	while (length--) {
 8004a9e:	e009      	b.n	8004ab4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	f107 020e 	add.w	r2, r7, #14
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ffac 	bl	8004a0c <crc_accumulate>
	while (length--) {
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	807a      	strh	r2, [r7, #2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <crc_calculate+0x18>
        return crcTmp;
 8004abe:	89fb      	ldrh	r3, [r7, #14]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <crc_accumulate_buffer>:
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	617b      	str	r3, [r7, #20]
	while (length--) {
 8004ada:	e007      	b.n	8004aec <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	617a      	str	r2, [r7, #20]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ff90 	bl	8004a0c <crc_accumulate>
	while (length--) {
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	1e5a      	subs	r2, r3, #1
 8004af0:	80fa      	strh	r2, [r7, #6]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f2      	bne.n	8004adc <crc_accumulate_buffer+0x14>
}
 8004af6:	bf00      	nop
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <mavlink_get_channel_status>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
	return &m_mavlink_status[chan];
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <mavlink_get_channel_status+0x24>)
 8004b16:	4413      	add	r3, r2
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20001bd0 	.word	0x20001bd0

08004b28 <mavlink_finalize_message_chan>:
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	70fb      	strb	r3, [r7, #3]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70bb      	strb	r3, [r7, #2]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	707b      	strb	r3, [r7, #1]
	msg->magic = MAVLINK_STX;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	22fe      	movs	r2, #254	; 0xfe
 8004b46:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7f3a      	ldrb	r2, [r7, #28]
 8004b4c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	78ba      	ldrb	r2, [r7, #2]
 8004b58:	719a      	strb	r2, [r3, #6]
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8004b5a:	787b      	ldrb	r3, [r7, #1]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ffcf 	bl	8004b00 <mavlink_get_channel_status>
 8004b62:	4603      	mov	r3, r0
 8004b64:	799a      	ldrb	r2, [r3, #6]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8004b6a:	787b      	ldrb	r3, [r7, #1]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ffc7 	bl	8004b00 <mavlink_get_channel_status>
 8004b72:	4603      	mov	r3, r0
 8004b74:	799c      	ldrb	r4, [r3, #6]
 8004b76:	787b      	ldrb	r3, [r7, #1]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ffc1 	bl	8004b00 <mavlink_get_channel_status>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	1c62      	adds	r2, r4, #1
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3303      	adds	r3, #3
 8004b8a:	2105      	movs	r1, #5
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff7b 	bl	8004a88 <crc_calculate>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f103 0108 	add.w	r1, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	78db      	ldrb	r3, [r3, #3]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f7ff ff8d 	bl	8004ac8 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &msg->checksum);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff28 	bl	8004a0c <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b299      	uxth	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	78d2      	ldrb	r2, [r2, #3]
 8004bca:	4413      	add	r3, r2
 8004bcc:	b2ca      	uxtb	r2, r1
 8004bce:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f103 0208 	add.w	r2, r3, #8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	78db      	ldrb	r3, [r3, #3]
 8004be4:	3301      	adds	r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	b2ca      	uxtb	r2, r1
 8004bea:	701a      	strb	r2, [r3, #0]
	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8004bec:	7f3b      	ldrb	r3, [r7, #28]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	b29b      	uxth	r3, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <mavlink_finalize_message>:
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	70fb      	strb	r3, [r7, #3]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70bb      	strb	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8004c16:	78ba      	ldrb	r2, [r7, #2]
 8004c18:	78f9      	ldrb	r1, [r7, #3]
 8004c1a:	7d3b      	ldrb	r3, [r7, #20]
 8004c1c:	9302      	str	r3, [sp, #8]
 8004c1e:	7c3b      	ldrb	r3, [r7, #16]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	787b      	ldrb	r3, [r7, #1]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff7d 	bl	8004b28 <mavlink_finalize_message_chan>
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <mavlink_msg_to_send_buffer>:
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	1c99      	adds	r1, r3, #2
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	3306      	adds	r3, #6
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f006 fb20 	bl	800b294 <memcpy>
	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	78db      	ldrb	r3, [r3, #3]
 8004c58:	3306      	adds	r3, #6
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	78db      	ldrb	r3, [r3, #3]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3308      	adds	r3, #8
 8004c88:	b29b      	uxth	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <mavlink_msg_cmd_velocity_decode>:
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
        uint8_t len = msg->len < MAVLINK_MSG_ID_CMD_VELOCITY_LEN? msg->len : MAVLINK_MSG_ID_CMD_VELOCITY_LEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	78db      	ldrb	r3, [r3, #3]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	bf28      	it	cs
 8004ca4:	2308      	movcs	r3, #8
 8004ca6:	73fb      	strb	r3, [r7, #15]
        memset(cmd_velocity, 0, MAVLINK_MSG_ID_CMD_VELOCITY_LEN);
 8004ca8:	2208      	movs	r2, #8
 8004caa:	2100      	movs	r1, #0
 8004cac:	6838      	ldr	r0, [r7, #0]
 8004cae:	f006 fafc 	bl	800b2aa <memset>
    memcpy(cmd_velocity, _MAV_PAYLOAD(msg), len);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6838      	ldr	r0, [r7, #0]
 8004cbc:	f006 faea 	bl	800b294 <memcpy>
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <mavlink_msg_evt_tilt_pack>:
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60ba      	str	r2, [r7, #8]
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	73bb      	strb	r3, [r7, #14]
    packet.tilt = tilt;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	617b      	str	r3, [r7, #20]
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_EVT_TILT_LEN);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	601a      	str	r2, [r3, #0]
    msg->msgid = MAVLINK_MSG_ID_EVT_TILT;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	71da      	strb	r2, [r3, #7]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_EVT_TILT_MIN_LEN, MAVLINK_MSG_ID_EVT_TILT_LEN, MAVLINK_MSG_ID_EVT_TILT_CRC);
 8004cec:	7bba      	ldrb	r2, [r7, #14]
 8004cee:	7bf9      	ldrb	r1, [r7, #15]
 8004cf0:	2353      	movs	r3, #83	; 0x53
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f7ff ff7e 	bl	8004bfc <mavlink_finalize_message>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <tilt_controller_callback>:
TID(gtid_vel_controller);
TID(gtid_imu_tilt);

static float tilt_setpoint;

static void tilt_controller_callback(void* ctx){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	float tilt;
	switch(params.tilt_type){
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <tilt_controller_callback+0xd8>)
 8004d16:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d002      	beq.n	8004d24 <tilt_controller_callback+0x18>
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d004      	beq.n	8004d2c <tilt_controller_callback+0x20>
 8004d22:	e007      	b.n	8004d34 <tilt_controller_callback+0x28>
	case ROLL:
		tilt = imu_get_roll();
 8004d24:	f7fd f862 	bl	8001dec <imu_get_roll>
 8004d28:	60f8      	str	r0, [r7, #12]
		break;
 8004d2a:	e006      	b.n	8004d3a <tilt_controller_callback+0x2e>
	case PITCH:
		tilt = imu_get_pitch();
 8004d2c:	f7fd f868 	bl	8001e00 <imu_get_pitch>
 8004d30:	60f8      	str	r0, [r7, #12]
		break;
 8004d32:	e002      	b.n	8004d3a <tilt_controller_callback+0x2e>
	default:
		tilt = 0;
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
	}
	tilt -= params.tilt_offset;
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <tilt_controller_callback+0xd8>)
 8004d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d40:	4619      	mov	r1, r3
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fb fec4 	bl	8000ad0 <__aeabi_fsub>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	60fb      	str	r3, [r7, #12]

	float speed = pid_compute(&params.pid[0], tilt_setpoint, tilt, 0.001f*TILT_CONTROLLER_PERIOD);
 8004d4c:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <tilt_controller_callback+0xdc>)
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	4b26      	ldr	r3, [pc, #152]	; (8004dec <tilt_controller_callback+0xe0>)
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4823      	ldr	r0, [pc, #140]	; (8004de4 <tilt_controller_callback+0xd8>)
 8004d56:	f000 fddf 	bl	8005918 <pid_compute>
 8004d5a:	60b8      	str	r0, [r7, #8]

	if(tilt > 70 || tilt < -70) {
 8004d5c:	4924      	ldr	r1, [pc, #144]	; (8004df0 <tilt_controller_callback+0xe4>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7fc f97c 	bl	800105c <__aeabi_fcmpgt>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <tilt_controller_callback+0x6c>
 8004d6a:	4922      	ldr	r1, [pc, #136]	; (8004df4 <tilt_controller_callback+0xe8>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7fc f957 	bl	8001020 <__aeabi_fcmplt>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <tilt_controller_callback+0x7e>
		speed = 0;
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
		pid_reset(&params.pid[0]);
 8004d7e:	4819      	ldr	r0, [pc, #100]	; (8004de4 <tilt_controller_callback+0xd8>)
 8004d80:	f000 fea4 	bl	8005acc <pid_reset>
		pid_reset(&params.pid[1]);
 8004d84:	481c      	ldr	r0, [pc, #112]	; (8004df8 <tilt_controller_callback+0xec>)
 8004d86:	f000 fea1 	bl	8005acc <pid_reset>
	}

	motors_setspeed(MOTOR_0, speed + (float)gcmd_velocity.omega*OMEGA_COEFF);
 8004d8a:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <tilt_controller_callback+0xf0>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	491c      	ldr	r1, [pc, #112]	; (8004e00 <tilt_controller_callback+0xf4>)
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb ffa7 	bl	8000ce4 <__aeabi_fmul>
 8004d96:	4603      	mov	r3, r0
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fe9a 	bl	8000ad4 <__addsf3>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc f97a 	bl	800109c <__aeabi_f2iz>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4619      	mov	r1, r3
 8004dac:	2000      	movs	r0, #0
 8004dae:	f000 fb2d 	bl	800540c <motors_setspeed>
	motors_setspeed(MOTOR_1, speed - (float)gcmd_velocity.omega*OMEGA_COEFF);
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <tilt_controller_callback+0xf0>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4912      	ldr	r1, [pc, #72]	; (8004e00 <tilt_controller_callback+0xf4>)
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb ff93 	bl	8000ce4 <__aeabi_fmul>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68b8      	ldr	r0, [r7, #8]
 8004dc4:	f7fb fe84 	bl	8000ad0 <__aeabi_fsub>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc f966 	bl	800109c <__aeabi_f2iz>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f000 fb19 	bl	800540c <motors_setspeed>
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20001078 	.word	0x20001078
 8004de8:	20001bcc 	.word	0x20001bcc
 8004dec:	3ba3d70b 	.word	0x3ba3d70b
 8004df0:	428c0000 	.word	0x428c0000
 8004df4:	c28c0000 	.word	0xc28c0000
 8004df8:	200010c4 	.word	0x200010c4
 8004dfc:	20001bbc 	.word	0x20001bbc
 8004e00:	43480000 	.word	0x43480000

08004e04 <vel_controller_callback>:

static void vel_controller_callback(void *ctx){
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	if(gcmd_velocity.cnt == 0){
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <vel_controller_callback+0x88>)
 8004e0e:	7b1b      	ldrb	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <vel_controller_callback+0x22>
		gcmd_velocity.vx = 0;
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <vel_controller_callback+0x88>)
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
		gcmd_velocity.omega = 0;
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <vel_controller_callback+0x88>)
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	e005      	b.n	8004e32 <vel_controller_callback+0x2e>
	}
	else{
		gcmd_velocity.cnt--;
 8004e26:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <vel_controller_callback+0x88>)
 8004e28:	7b1b      	ldrb	r3, [r3, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <vel_controller_callback+0x88>)
 8004e30:	731a      	strb	r2, [r3, #12]
	}

	int16_t motor0_speed = enc_read(MOTOR_0);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7fc faf4 	bl	8001420 <enc_read>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	81fb      	strh	r3, [r7, #14]
	int16_t motor1_speed = enc_read(MOTOR_1);
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f7fc faef 	bl	8001420 <enc_read>
 8004e42:	4603      	mov	r3, r0
 8004e44:	81bb      	strh	r3, [r7, #12]
	float direction = -(motor0_speed + motor1_speed)/2;
 8004e46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004e4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	425b      	negs	r3, r3
 8004e52:	0fda      	lsrs	r2, r3, #31
 8004e54:	4413      	add	r3, r2
 8004e56:	105b      	asrs	r3, r3, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb feef 	bl	8000c3c <__aeabi_i2f>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	60bb      	str	r3, [r7, #8]

	tilt_setpoint = pid_compute(&params.pid[1], gcmd_velocity.vx*VELOC_COEFF, direction, 0.001f*VEL_CONTROLLER_PERIOD);
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <vel_controller_callback+0x88>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	490a      	ldr	r1, [pc, #40]	; (8004e90 <vel_controller_callback+0x8c>)
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb ff3b 	bl	8000ce4 <__aeabi_fmul>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4619      	mov	r1, r3
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <vel_controller_callback+0x90>)
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	4808      	ldr	r0, [pc, #32]	; (8004e98 <vel_controller_callback+0x94>)
 8004e78:	f000 fd4e 	bl	8005918 <pid_compute>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <vel_controller_callback+0x98>)
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20001bbc 	.word	0x20001bbc
 8004e90:	43160000 	.word	0x43160000
 8004e94:	3dcccccd 	.word	0x3dcccccd
 8004e98:	200010c4 	.word	0x200010c4
 8004e9c:	20001bcc 	.word	0x20001bcc

08004ea0 <tilt_report_callback>:

static void tilt_report_callback(void *ctx){
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint8_t mav_send_buf[256];
	float tilt;
	switch(params.tilt_type){
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <tilt_report_callback+0x90>)
 8004eae:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d002      	beq.n	8004ebc <tilt_report_callback+0x1c>
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d005      	beq.n	8004ec6 <tilt_report_callback+0x26>
 8004eba:	e009      	b.n	8004ed0 <tilt_report_callback+0x30>
	case ROLL:
		tilt = imu_get_roll();
 8004ebc:	f7fc ff96 	bl	8001dec <imu_get_roll>
 8004ec0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		break;
 8004ec4:	e008      	b.n	8004ed8 <tilt_report_callback+0x38>
	case PITCH:
		tilt = imu_get_pitch();
 8004ec6:	f7fc ff9b 	bl	8001e00 <imu_get_pitch>
 8004eca:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		break;
 8004ece:	e003      	b.n	8004ed8 <tilt_report_callback+0x38>
	default:
		tilt = 0;
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	}
	tilt -= params.tilt_offset;
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <tilt_report_callback+0x90>)
 8004eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8004ee4:	f7fb fdf4 	bl	8000ad0 <__aeabi_fsub>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	mavlink_msg_evt_tilt_pack(0,0,&msg,tilt);
 8004eee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8004ef2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff fee5 	bl	8004cc8 <mavlink_msg_evt_tilt_pack>
	uint16_t len = mavlink_msg_to_send_buffer(mav_send_buf, &msg);
 8004efe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fe95 	bl	8004c38 <mavlink_msg_to_send_buffer>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
	mav_send((char*)mav_send_buf, len);
 8004f14:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 8004f18:	f107 0308 	add.w	r3, r7, #8
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd fba2 	bl	8002668 <mav_send>
}
 8004f24:	bf00      	nop
 8004f26:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20001078 	.word	0x20001078

08004f34 <mode_run_init>:

void mode_run_init(){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	motors_init();
 8004f38:	f000 f948 	bl	80051cc <motors_init>
	enc_init();
 8004f3c:	f7fc fa18 	bl	8001370 <enc_init>
	imu_init();
 8004f40:	f7fc ff28 	bl	8001d94 <imu_init>

	params.pid[1].maxIPart = 5;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <mode_run_init+0x88>)
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <mode_run_init+0x8c>)
 8004f48:	65da      	str	r2, [r3, #92]	; 0x5c
	params.pid[1].minIpart = -5;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <mode_run_init+0x88>)
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <mode_run_init+0x90>)
 8004f4e:	659a      	str	r2, [r3, #88]	; 0x58

	params.pid[1].maxDPart = 5;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <mode_run_init+0x88>)
 8004f52:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <mode_run_init+0x8c>)
 8004f54:	665a      	str	r2, [r3, #100]	; 0x64
	params.pid[1].minDpart = -5;
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <mode_run_init+0x88>)
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <mode_run_init+0x90>)
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60

	params.pid[1].maxOut = 5;
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <mode_run_init+0x88>)
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <mode_run_init+0x8c>)
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c
	params.pid[1].minOut = -5;
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <mode_run_init+0x88>)
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <mode_run_init+0x90>)
 8004f66:	669a      	str	r2, [r3, #104]	; 0x68

	pid_reset(&params.pid[0]);
 8004f68:	4814      	ldr	r0, [pc, #80]	; (8004fbc <mode_run_init+0x88>)
 8004f6a:	f000 fdaf 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[1]);
 8004f6e:	4816      	ldr	r0, [pc, #88]	; (8004fc8 <mode_run_init+0x94>)
 8004f70:	f000 fdac 	bl	8005acc <pid_reset>
	pid_reset(&params.pid[2]);
 8004f74:	4815      	ldr	r0, [pc, #84]	; (8004fcc <mode_run_init+0x98>)
 8004f76:	f000 fda9 	bl	8005acc <pid_reset>

	// Periodic task initialization
	gtid_tilt_controller = timer_register_callback(tilt_controller_callback, TILT_CONTROLLER_PERIOD, 0, TIMER_MODE_REPEAT);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2105      	movs	r1, #5
 8004f80:	4813      	ldr	r0, [pc, #76]	; (8004fd0 <mode_run_init+0x9c>)
 8004f82:	f000 fdd3 	bl	8005b2c <timer_register_callback>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <mode_run_init+0xa0>)
 8004f8c:	701a      	strb	r2, [r3, #0]
	gtid_vel_controller = timer_register_callback(vel_controller_callback, VEL_CONTROLLER_PERIOD, 0, TIMER_MODE_REPEAT);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2200      	movs	r2, #0
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	4810      	ldr	r0, [pc, #64]	; (8004fd8 <mode_run_init+0xa4>)
 8004f96:	f000 fdc9 	bl	8005b2c <timer_register_callback>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <mode_run_init+0xa8>)
 8004fa0:	701a      	strb	r2, [r3, #0]
	gtid_imu_tilt = timer_register_callback(tilt_report_callback, TILT_REPORT_PERIOD, 0, TIMER_MODE_REPEAT);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	480d      	ldr	r0, [pc, #52]	; (8004fe0 <mode_run_init+0xac>)
 8004faa:	f000 fdbf 	bl	8005b2c <timer_register_callback>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <mode_run_init+0xb0>)
 8004fb4:	701a      	strb	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20001078 	.word	0x20001078
 8004fc0:	40a00000 	.word	0x40a00000
 8004fc4:	c0a00000 	.word	0xc0a00000
 8004fc8:	200010c4 	.word	0x200010c4
 8004fcc:	20001110 	.word	0x20001110
 8004fd0:	08004d0d 	.word	0x08004d0d
 8004fd4:	20001072 	.word	0x20001072
 8004fd8:	08004e05 	.word	0x08004e05
 8004fdc:	20001073 	.word	0x20001073
 8004fe0:	08004ea1 	.word	0x08004ea1
 8004fe4:	20001074 	.word	0x20001074

08004fe8 <mode_run_deinit>:

void mode_run_deinit(){
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
	// Hardware de-initialization
	motors_deinit();
 8004fec:	f000 f93c 	bl	8005268 <motors_deinit>
	enc_deinit();
 8004ff0:	f7fc fa04 	bl	80013fc <enc_deinit>
	imu_deinit();
 8004ff4:	f7fc feec 	bl	8001dd0 <imu_deinit>

	// Periodic task de-initialization
	timer_unregister_callback(gtid_tilt_controller);
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <mode_run_deinit+0x38>)
 8004ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fde4 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_vel_controller);
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <mode_run_deinit+0x3c>)
 8005006:	f993 3000 	ldrsb.w	r3, [r3]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fdde 	bl	8005bcc <timer_unregister_callback>
	timer_unregister_callback(gtid_imu_tilt);
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <mode_run_deinit+0x40>)
 8005012:	f993 3000 	ldrsb.w	r3, [r3]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fdd8 	bl	8005bcc <timer_unregister_callback>
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001072 	.word	0x20001072
 8005024:	20001073 	.word	0x20001073
 8005028:	20001074 	.word	0x20001074
 800502c:	00000000 	.word	0x00000000

08005030 <on_mode_run_mavlink_recv>:

void on_mode_run_mavlink_recv(mavlink_message_t *msg){
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	switch(msg->msgid){
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	79db      	ldrb	r3, [r3, #7]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d000      	beq.n	8005042 <on_mode_run_mavlink_recv+0x12>

			gcmd_velocity.cnt = (CONTROL_TIMEOUT_MS/VEL_CONTROLLER_PERIOD);
		}
		break;
	default:
		break;
 8005040:	e0af      	b.n	80051a2 <on_mode_run_mavlink_recv+0x172>
			mavlink_msg_cmd_velocity_decode(msg, &cmd_velocity);
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fe22 	bl	8004c92 <mavlink_msg_cmd_velocity_decode>
			if(cmd_velocity.v > -0.15 && cmd_velocity.v < 0.15) cmd_velocity.v = 0;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb f9e1 	bl	8000418 <__aeabi_f2d>
 8005056:	a356      	add	r3, pc, #344	; (adr r3, 80051b0 <on_mode_run_mavlink_recv+0x180>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb fcc4 	bl	80009e8 <__aeabi_dcmpgt>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00e      	beq.n	8005084 <on_mode_run_mavlink_recv+0x54>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fb f9d5 	bl	8000418 <__aeabi_f2d>
 800506e:	a352      	add	r3, pc, #328	; (adr r3, 80051b8 <on_mode_run_mavlink_recv+0x188>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb fc9a 	bl	80009ac <__aeabi_dcmplt>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <on_mode_run_mavlink_recv+0x54>
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
			if(cmd_velocity.v*gcmd_velocity.vx <= 0) gcmd_velocity.is_dir_change = true;
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7fb fe29 	bl	8000ce4 <__aeabi_fmul>
 8005092:	4603      	mov	r3, r0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb ffcb 	bl	8001034 <__aeabi_fcmple>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <on_mode_run_mavlink_recv+0x7a>
 80050a4:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	735a      	strb	r2, [r3, #13]
			gcmd_velocity.vx += 0.5*(cmd_velocity.v-gcmd_velocity.vx);
 80050aa:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb f9b2 	bl	8000418 <__aeabi_f2d>
 80050b4:	4604      	mov	r4, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f7fb fd05 	bl	8000ad0 <__aeabi_fsub>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb f9a5 	bl	8000418 <__aeabi_f2d>
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b3c      	ldr	r3, [pc, #240]	; (80051c4 <on_mode_run_mavlink_recv+0x194>)
 80050d4:	f7fb f9f8 	bl	80004c8 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb f83c 	bl	800015c <__adddf3>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4618      	mov	r0, r3
 80050ea:	4621      	mov	r1, r4
 80050ec:	f7fb fc9c 	bl	8000a28 <__aeabi_d2f>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 80050f4:	601a      	str	r2, [r3, #0]
			if(gcmd_velocity.vx > 1) gcmd_velocity.vx=1;
 80050f6:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb ffac 	bl	800105c <__aeabi_fcmpgt>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <on_mode_run_mavlink_recv+0xe2>
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 800510c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005110:	601a      	str	r2, [r3, #0]
			if(gcmd_velocity.vx < -1) gcmd_velocity.vx=-1;
 8005112:	4b2b      	ldr	r3, [pc, #172]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	492c      	ldr	r1, [pc, #176]	; (80051c8 <on_mode_run_mavlink_recv+0x198>)
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb ff81 	bl	8001020 <__aeabi_fcmplt>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <on_mode_run_mavlink_recv+0xfa>
 8005124:	4b26      	ldr	r3, [pc, #152]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005126:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <on_mode_run_mavlink_recv+0x198>)
 8005128:	601a      	str	r2, [r3, #0]
			if(cmd_velocity.omega > -0.15 && cmd_velocity.omega < 0.15) cmd_velocity.omega=0;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb f973 	bl	8000418 <__aeabi_f2d>
 8005132:	a31f      	add	r3, pc, #124	; (adr r3, 80051b0 <on_mode_run_mavlink_recv+0x180>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb fc56 	bl	80009e8 <__aeabi_dcmpgt>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <on_mode_run_mavlink_recv+0x130>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb f967 	bl	8000418 <__aeabi_f2d>
 800514a:	a31b      	add	r3, pc, #108	; (adr r3, 80051b8 <on_mode_run_mavlink_recv+0x188>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb fc2c 	bl	80009ac <__aeabi_dcmplt>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <on_mode_run_mavlink_recv+0x130>
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
			gcmd_velocity.omega = cmd_velocity.omega;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005164:	6093      	str	r3, [r2, #8]
			if(gcmd_velocity.omega > 1) gcmd_velocity.omega=1;
 8005166:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb ff74 	bl	800105c <__aeabi_fcmpgt>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <on_mode_run_mavlink_recv+0x152>
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 800517c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005180:	609a      	str	r2, [r3, #8]
			if(gcmd_velocity.omega < -1) gcmd_velocity.omega=-1;
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4910      	ldr	r1, [pc, #64]	; (80051c8 <on_mode_run_mavlink_recv+0x198>)
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb ff49 	bl	8001020 <__aeabi_fcmplt>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <on_mode_run_mavlink_recv+0x16a>
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 8005196:	4a0c      	ldr	r2, [pc, #48]	; (80051c8 <on_mode_run_mavlink_recv+0x198>)
 8005198:	609a      	str	r2, [r3, #8]
			gcmd_velocity.cnt = (CONTROL_TIMEOUT_MS/VEL_CONTROLLER_PERIOD);
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <on_mode_run_mavlink_recv+0x190>)
 800519c:	220a      	movs	r2, #10
 800519e:	731a      	strb	r2, [r3, #12]
		break;
 80051a0:	bf00      	nop
	}
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bdb0      	pop	{r4, r5, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w
 80051b0:	33333333 	.word	0x33333333
 80051b4:	bfc33333 	.word	0xbfc33333
 80051b8:	33333333 	.word	0x33333333
 80051bc:	3fc33333 	.word	0x3fc33333
 80051c0:	20001bbc 	.word	0x20001bbc
 80051c4:	3fe00000 	.word	0x3fe00000
 80051c8:	bf800000 	.word	0xbf800000

080051cc <motors_init>:
static void motor0_setspeed(int32_t speed);
static void motor0_setspeed_invert(int32_t speed);
static void motor1_setspeed(int32_t speed);
static void motor1_setspeed_invert(int32_t speed);

void motors_init(){
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&MOTOR0_TIMER, MOTOR0_CHANNEL);
 80051d0:	2100      	movs	r1, #0
 80051d2:	481b      	ldr	r0, [pc, #108]	; (8005240 <motors_init+0x74>)
 80051d4:	f004 fade 	bl	8009794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR1_TIMER, MOTOR1_CHANNEL);
 80051d8:	2104      	movs	r1, #4
 80051da:	4819      	ldr	r0, [pc, #100]	; (8005240 <motors_init+0x74>)
 80051dc:	f004 fada 	bl	8009794 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_SET);
 80051e0:	2201      	movs	r2, #1
 80051e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051e6:	4817      	ldr	r0, [pc, #92]	; (8005244 <motors_init+0x78>)
 80051e8:	f002 fd1a 	bl	8007c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_SET);
 80051ec:	2201      	movs	r2, #1
 80051ee:	2101      	movs	r1, #1
 80051f0:	4815      	ldr	r0, [pc, #84]	; (8005248 <motors_init+0x7c>)
 80051f2:	f002 fd15 	bl	8007c20 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, 999);
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <motors_init+0x74>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, 999);
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <motors_init+0x74>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005208:	639a      	str	r2, [r3, #56]	; 0x38

	if(params.motor0_invert == true){
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <motors_init+0x80>)
 800520c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <motors_init+0x50>
		gset_speed_motor0 = motor0_setspeed_invert;
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <motors_init+0x84>)
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <motors_init+0x88>)
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e002      	b.n	8005222 <motors_init+0x56>
	}
	else gset_speed_motor0 = motor0_setspeed;
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <motors_init+0x84>)
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <motors_init+0x8c>)
 8005220:	601a      	str	r2, [r3, #0]

	if(params.motor1_invert == true){
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <motors_init+0x80>)
 8005224:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <motors_init+0x68>
		gset_speed_motor1 = motor1_setspeed_invert;
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <motors_init+0x90>)
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <motors_init+0x94>)
 8005230:	601a      	str	r2, [r3, #0]
	}
	else gset_speed_motor1 = motor1_setspeed;
}
 8005232:	e002      	b.n	800523a <motors_init+0x6e>
	else gset_speed_motor1 = motor1_setspeed;
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <motors_init+0x90>)
 8005236:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <motors_init+0x98>)
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20001f48 	.word	0x20001f48
 8005244:	40011000 	.word	0x40011000
 8005248:	40011400 	.word	0x40011400
 800524c:	20001078 	.word	0x20001078
 8005250:	20001c00 	.word	0x20001c00
 8005254:	08005301 	.word	0x08005301
 8005258:	080052a5 	.word	0x080052a5
 800525c:	20001c04 	.word	0x20001c04
 8005260:	080053b5 	.word	0x080053b5
 8005264:	0800535d 	.word	0x0800535d

08005268 <motors_deinit>:

void motors_deinit(){
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
	// Disable motors if we have enable pins
	HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_RESET);
 800526c:	2200      	movs	r2, #0
 800526e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005272:	4809      	ldr	r0, [pc, #36]	; (8005298 <motors_deinit+0x30>)
 8005274:	f002 fcd4 	bl	8007c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_RESET);
 8005278:	2200      	movs	r2, #0
 800527a:	2101      	movs	r1, #1
 800527c:	4807      	ldr	r0, [pc, #28]	; (800529c <motors_deinit+0x34>)
 800527e:	f002 fccf 	bl	8007c20 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, 0);
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <motors_deinit+0x38>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, 0);
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <motors_deinit+0x38>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40011000 	.word	0x40011000
 800529c:	40011400 	.word	0x40011400
 80052a0:	20001f48 	.word	0x20001f48

080052a4 <motor0_setspeed>:

static void motor0_setspeed(int32_t speed){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	if(speed > 0){
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd0e      	ble.n	80052d0 <motor0_setspeed+0x2c>
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, abs(speed));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80052b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <motor0_setspeed+0x54>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_RESET);
 80052c2:	2200      	movs	r2, #0
 80052c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052c8:	480c      	ldr	r0, [pc, #48]	; (80052fc <motor0_setspeed+0x58>)
 80052ca:	f002 fca9 	bl	8007c20 <HAL_GPIO_WritePin>
	}else{
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, 1000 - abs(speed));
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_SET);
	}
}
 80052ce:	e00e      	b.n	80052ee <motor0_setspeed+0x4a>
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, 1000 - abs(speed));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	425b      	neglt	r3, r3
 80052d8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <motor0_setspeed+0x54>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_SET);
 80052e2:	2201      	movs	r2, #1
 80052e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052e8:	4804      	ldr	r0, [pc, #16]	; (80052fc <motor0_setspeed+0x58>)
 80052ea:	f002 fc99 	bl	8007c20 <HAL_GPIO_WritePin>
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001f48 	.word	0x20001f48
 80052fc:	40011000 	.word	0x40011000

08005300 <motor0_setspeed_invert>:

static void motor0_setspeed_invert(int32_t speed){
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	if(speed > 0){
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd0f      	ble.n	800532e <motor0_setspeed_invert+0x2e>
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, 1000 - abs(speed));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfb8      	it	lt
 8005314:	425b      	neglt	r3, r3
 8005316:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <motor0_setspeed_invert+0x54>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_SET);
 8005320:	2201      	movs	r2, #1
 8005322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005326:	480c      	ldr	r0, [pc, #48]	; (8005358 <motor0_setspeed_invert+0x58>)
 8005328:	f002 fc7a 	bl	8007c20 <HAL_GPIO_WritePin>
	}else{
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, abs(speed));
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_RESET);
	}
}
 800532c:	e00d      	b.n	800534a <motor0_setspeed_invert+0x4a>
		__HAL_TIM_SET_COMPARE(&MOTOR0_TIMER, MOTOR0_CHANNEL, abs(speed));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005334:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <motor0_setspeed_invert+0x54>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MTR1_DIR_MCU_GPIO_Port, MTR1_DIR_MCU_Pin, GPIO_PIN_RESET);
 800533e:	2200      	movs	r2, #0
 8005340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005344:	4804      	ldr	r0, [pc, #16]	; (8005358 <motor0_setspeed_invert+0x58>)
 8005346:	f002 fc6b 	bl	8007c20 <HAL_GPIO_WritePin>
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20001f48 	.word	0x20001f48
 8005358:	40011000 	.word	0x40011000

0800535c <motor1_setspeed>:

static void motor1_setspeed(int32_t speed){
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	if(speed > 0){
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	dd0d      	ble.n	8005386 <motor1_setspeed+0x2a>
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, abs(speed));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005370:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <motor1_setspeed+0x50>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_RESET);
 800537a:	2200      	movs	r2, #0
 800537c:	2101      	movs	r1, #1
 800537e:	480c      	ldr	r0, [pc, #48]	; (80053b0 <motor1_setspeed+0x54>)
 8005380:	f002 fc4e 	bl	8007c20 <HAL_GPIO_WritePin>
	}else{
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, 1000 - abs(speed));
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_SET);
	}
}
 8005384:	e00d      	b.n	80053a2 <motor1_setspeed+0x46>
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, 1000 - abs(speed));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bfb8      	it	lt
 800538c:	425b      	neglt	r3, r3
 800538e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <motor1_setspeed+0x50>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_SET);
 8005398:	2201      	movs	r2, #1
 800539a:	2101      	movs	r1, #1
 800539c:	4804      	ldr	r0, [pc, #16]	; (80053b0 <motor1_setspeed+0x54>)
 800539e:	f002 fc3f 	bl	8007c20 <HAL_GPIO_WritePin>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20001f48 	.word	0x20001f48
 80053b0:	40011400 	.word	0x40011400

080053b4 <motor1_setspeed_invert>:

static void motor1_setspeed_invert(int32_t speed){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	if(speed > 0){
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	dd0e      	ble.n	80053e0 <motor1_setspeed_invert+0x2c>
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, 1000 - abs(speed));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfb8      	it	lt
 80053c8:	425b      	neglt	r3, r3
 80053ca:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <motor1_setspeed_invert+0x50>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_SET);
 80053d4:	2201      	movs	r2, #1
 80053d6:	2101      	movs	r1, #1
 80053d8:	480b      	ldr	r0, [pc, #44]	; (8005408 <motor1_setspeed_invert+0x54>)
 80053da:	f002 fc21 	bl	8007c20 <HAL_GPIO_WritePin>
	}else{
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, abs(speed));
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_RESET);
	}
}
 80053de:	e00c      	b.n	80053fa <motor1_setspeed_invert+0x46>
		__HAL_TIM_SET_COMPARE(&MOTOR1_TIMER, MOTOR1_CHANNEL, abs(speed));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80053e6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <motor1_setspeed_invert+0x50>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(MTR2_DIR_MCU_GPIO_Port, MTR2_DIR_MCU_Pin, GPIO_PIN_RESET);
 80053f0:	2200      	movs	r2, #0
 80053f2:	2101      	movs	r1, #1
 80053f4:	4804      	ldr	r0, [pc, #16]	; (8005408 <motor1_setspeed_invert+0x54>)
 80053f6:	f002 fc13 	bl	8007c20 <HAL_GPIO_WritePin>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20001f48 	.word	0x20001f48
 8005408:	40011400 	.word	0x40011400

0800540c <motors_setspeed>:

void motors_setspeed(motors_t motor, int32_t speed){
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	71fb      	strb	r3, [r7, #7]
	switch(motor){
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <motors_setspeed+0x18>
 800541e:	2b01      	cmp	r3, #1
 8005420:	d026      	beq.n	8005470 <motors_setspeed+0x64>
		if(speed > 999) speed = 999;
		if(speed < -999) speed = -999;
		gset_speed_motor1(speed);
		break;
	}
}
 8005422:	e04b      	b.n	80054bc <motors_setspeed+0xb0>
		if(speed!=0) speed = speed > 0 ? (speed+params.motor0_pos_deadband) : (speed+params.motor0_neg_deadband);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <motors_setspeed+0x40>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	dd06      	ble.n	800543e <motors_setspeed+0x32>
 8005430:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <motors_setspeed+0xb8>)
 8005432:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	; 0x11a
 8005436:	461a      	mov	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4413      	add	r3, r2
 800543c:	e005      	b.n	800544a <motors_setspeed+0x3e>
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <motors_setspeed+0xb8>)
 8005440:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4413      	add	r3, r2
 800544a:	603b      	str	r3, [r7, #0]
		if(speed > 999) speed = 999;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005452:	db02      	blt.n	800545a <motors_setspeed+0x4e>
 8005454:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005458:	603b      	str	r3, [r7, #0]
		if(speed < -999) speed = -999;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005460:	dc01      	bgt.n	8005466 <motors_setspeed+0x5a>
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <motors_setspeed+0xbc>)
 8005464:	603b      	str	r3, [r7, #0]
		gset_speed_motor0(speed);
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <motors_setspeed+0xc0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	4798      	blx	r3
		break;
 800546e:	e025      	b.n	80054bc <motors_setspeed+0xb0>
		if(speed!=0) speed = speed > 0 ? (speed+params.motor1_pos_deadband) : (speed+params.motor1_neg_deadband);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <motors_setspeed+0x8c>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dd06      	ble.n	800548a <motors_setspeed+0x7e>
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <motors_setspeed+0xb8>)
 800547e:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
 8005482:	461a      	mov	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4413      	add	r3, r2
 8005488:	e005      	b.n	8005496 <motors_setspeed+0x8a>
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <motors_setspeed+0xb8>)
 800548c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8005490:	461a      	mov	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4413      	add	r3, r2
 8005496:	603b      	str	r3, [r7, #0]
		if(speed > 999) speed = 999;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549e:	db02      	blt.n	80054a6 <motors_setspeed+0x9a>
 80054a0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80054a4:	603b      	str	r3, [r7, #0]
		if(speed < -999) speed = -999;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80054ac:	dc01      	bgt.n	80054b2 <motors_setspeed+0xa6>
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <motors_setspeed+0xbc>)
 80054b0:	603b      	str	r3, [r7, #0]
		gset_speed_motor1(speed);
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <motors_setspeed+0xc4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	4798      	blx	r3
		break;
 80054ba:	bf00      	nop
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20001078 	.word	0x20001078
 80054c8:	fffffc19 	.word	0xfffffc19
 80054cc:	20001c00 	.word	0x20001c00
 80054d0:	20001c04 	.word	0x20001c04

080054d4 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80054dc:	4b3c      	ldr	r3, [pc, #240]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b0f      	cmp	r3, #15
 80054e2:	d852      	bhi.n	800558a <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e046      	b.n	8005578 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80054ea:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80054f6:	5cd3      	ldrb	r3, [r2, r3]
 80054f8:	461a      	mov	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd01      	ble.n	800550c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8005508:	2126      	movs	r1, #38	; 0x26
 800550a:	e000      	b.n	800550e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800550c:	2113      	movs	r1, #19
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3318      	adds	r3, #24
 8005512:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005514:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8005516:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	3301      	adds	r3, #1
 8005522:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8005524:	5cd3      	ldrb	r3, [r2, r3]
 8005526:	461a      	mov	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	dd01      	ble.n	800553a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8005536:	2126      	movs	r1, #38	; 0x26
 8005538:	e000      	b.n	800553c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800553a:	2113      	movs	r1, #19
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3320      	adds	r3, #32
 8005540:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005542:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	3302      	adds	r3, #2
 8005550:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	461a      	mov	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd01      	ble.n	8005568 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8005564:	2126      	movs	r1, #38	; 0x26
 8005566:	e000      	b.n	800556a <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8005568:	2113      	movs	r1, #19
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005570:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3301      	adds	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b07      	cmp	r3, #7
 800557c:	d9b5      	bls.n	80054ea <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8005586:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&TIMER, TIMER_CHANNEL);
  }
}
 8005588:	e01d      	b.n	80055c6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b11      	cmp	r3, #17
 8005590:	d812      	bhi.n	80055b8 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8005592:	2318      	movs	r3, #24
 8005594:	72fb      	strb	r3, [r7, #11]
 8005596:	e006      	b.n	80055a6 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8005598:	7afb      	ldrb	r3, [r7, #11]
 800559a:	4a0f      	ldr	r2, [pc, #60]	; (80055d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800559c:	2100      	movs	r1, #0
 800559e:	54d1      	strb	r1, [r2, r3]
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	3301      	adds	r3, #1
 80055a4:	72fb      	strb	r3, [r7, #11]
 80055a6:	7afb      	ldrb	r3, [r7, #11]
 80055a8:	2b2f      	cmp	r3, #47	; 0x2f
 80055aa:	d9f5      	bls.n	8005598 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80055ac:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80055b4:	6013      	str	r3, [r2, #0]
}
 80055b6:	e006      	b.n	80055c6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&TIMER, TIMER_CHANNEL);
 80055be:	2100      	movs	r1, #0
 80055c0:	4806      	ldr	r0, [pc, #24]	; (80055dc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80055c2:	f004 f989 	bl	80098d8 <HAL_TIM_PWM_Stop_DMA>
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20001c68 	.word	0x20001c68
 80055d4:	20001c08 	.word	0x20001c08
 80055d8:	20001c38 	.word	0x20001c38
 80055dc:	20001f00 	.word	0x20001f00

080055e0 <write>:
		.gz_offset = 3,
};

static uint32_t address = PARAMS_PAGE_ADDRESS;

static void write(uint32_t* ptr){
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *ptr);
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <write+0x30>)
 80055ea:	6819      	ldr	r1, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	2002      	movs	r0, #2
 80055fa:	f001 ffb7 	bl	800756c <HAL_FLASH_Program>
	address+=4;
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <write+0x30>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3304      	adds	r3, #4
 8005604:	4a02      	ldr	r2, [pc, #8]	; (8005610 <write+0x30>)
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	2000119c 	.word	0x2000119c

08005614 <read>:

static void read(uint32_t* ptr){
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	*ptr = *((__IO uint32_t*)address);
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <read+0x28>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	address+=4;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <read+0x28>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3304      	adds	r3, #4
 800562c:	4a03      	ldr	r2, [pc, #12]	; (800563c <read+0x28>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000119c 	.word	0x2000119c

08005640 <params_save>:

void params_save(){
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8005646:	f002 f801 	bl	800764c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.PageAddress = PARAMS_PAGE_ADDRESS;
 800564e:	4b3b      	ldr	r3, [pc, #236]	; (800573c <params_save+0xfc>)
 8005650:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages     = 1;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]

	uint32_t PageError = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800565a:	1d3a      	adds	r2, r7, #4
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f002 f8da 	bl	800781c <HAL_FLASHEx_Erase>

	address = PARAMS_PAGE_ADDRESS;
 8005668:	4b35      	ldr	r3, [pc, #212]	; (8005740 <params_save+0x100>)
 800566a:	4a34      	ldr	r2, [pc, #208]	; (800573c <params_save+0xfc>)
 800566c:	601a      	str	r2, [r3, #0]

	uint32_t saved = HAVE_SAVED_DATA;
 800566e:	2301      	movs	r3, #1
 8005670:	603b      	str	r3, [r7, #0]
	write(&saved);
 8005672:	463b      	mov	r3, r7
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ffb3 	bl	80055e0 <write>

	// wheels pid
	write((uint32_t*)(&params.pid[0].KP));
 800567a:	4832      	ldr	r0, [pc, #200]	; (8005744 <params_save+0x104>)
 800567c:	f7ff ffb0 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[0].KI));
 8005680:	4831      	ldr	r0, [pc, #196]	; (8005748 <params_save+0x108>)
 8005682:	f7ff ffad 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[0].KD));
 8005686:	4831      	ldr	r0, [pc, #196]	; (800574c <params_save+0x10c>)
 8005688:	f7ff ffaa 	bl	80055e0 <write>

	write((uint32_t*)(&params.pid[1].KP));
 800568c:	4830      	ldr	r0, [pc, #192]	; (8005750 <params_save+0x110>)
 800568e:	f7ff ffa7 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[1].KI));
 8005692:	4830      	ldr	r0, [pc, #192]	; (8005754 <params_save+0x114>)
 8005694:	f7ff ffa4 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[1].KD));
 8005698:	482f      	ldr	r0, [pc, #188]	; (8005758 <params_save+0x118>)
 800569a:	f7ff ffa1 	bl	80055e0 <write>

	// stability or sync pid
	write((uint32_t*)(&params.pid[2].KP));
 800569e:	482f      	ldr	r0, [pc, #188]	; (800575c <params_save+0x11c>)
 80056a0:	f7ff ff9e 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[2].KI));
 80056a4:	482e      	ldr	r0, [pc, #184]	; (8005760 <params_save+0x120>)
 80056a6:	f7ff ff9b 	bl	80055e0 <write>
	write((uint32_t*)(&params.pid[2].KD));
 80056aa:	482e      	ldr	r0, [pc, #184]	; (8005764 <params_save+0x124>)
 80056ac:	f7ff ff98 	bl	80055e0 <write>

	// IMU
	write((uint32_t*)(&params.tilt_type));
 80056b0:	482d      	ldr	r0, [pc, #180]	; (8005768 <params_save+0x128>)
 80056b2:	f7ff ff95 	bl	80055e0 <write>
	write((uint32_t*)(&params.tilt_offset));
 80056b6:	482d      	ldr	r0, [pc, #180]	; (800576c <params_save+0x12c>)
 80056b8:	f7ff ff92 	bl	80055e0 <write>
	write((uint32_t*)(&params.g_believe));
 80056bc:	482c      	ldr	r0, [pc, #176]	; (8005770 <params_save+0x130>)
 80056be:	f7ff ff8f 	bl	80055e0 <write>

	write((uint32_t*)(&params.gx_offset));
 80056c2:	482c      	ldr	r0, [pc, #176]	; (8005774 <params_save+0x134>)
 80056c4:	f7ff ff8c 	bl	80055e0 <write>
	write((uint32_t*)(&params.gy_offset));
 80056c8:	482b      	ldr	r0, [pc, #172]	; (8005778 <params_save+0x138>)
 80056ca:	f7ff ff89 	bl	80055e0 <write>
	write((uint32_t*)(&params.gz_offset));
 80056ce:	482b      	ldr	r0, [pc, #172]	; (800577c <params_save+0x13c>)
 80056d0:	f7ff ff86 	bl	80055e0 <write>

	write((uint32_t*)(&params.mx_offset));
 80056d4:	482a      	ldr	r0, [pc, #168]	; (8005780 <params_save+0x140>)
 80056d6:	f7ff ff83 	bl	80055e0 <write>
	write((uint32_t*)(&params.my_offset));
 80056da:	482a      	ldr	r0, [pc, #168]	; (8005784 <params_save+0x144>)
 80056dc:	f7ff ff80 	bl	80055e0 <write>
	write((uint32_t*)(&params.mz_offset));
 80056e0:	4829      	ldr	r0, [pc, #164]	; (8005788 <params_save+0x148>)
 80056e2:	f7ff ff7d 	bl	80055e0 <write>

	write((uint32_t*)(&params.mx_scale));
 80056e6:	4829      	ldr	r0, [pc, #164]	; (800578c <params_save+0x14c>)
 80056e8:	f7ff ff7a 	bl	80055e0 <write>
	write((uint32_t*)(&params.my_scale));
 80056ec:	4828      	ldr	r0, [pc, #160]	; (8005790 <params_save+0x150>)
 80056ee:	f7ff ff77 	bl	80055e0 <write>
	write((uint32_t*)(&params.mz_scale));
 80056f2:	4828      	ldr	r0, [pc, #160]	; (8005794 <params_save+0x154>)
 80056f4:	f7ff ff74 	bl	80055e0 <write>

	//HW
	write((uint32_t*)(&params.motor0_invert));
 80056f8:	4827      	ldr	r0, [pc, #156]	; (8005798 <params_save+0x158>)
 80056fa:	f7ff ff71 	bl	80055e0 <write>
	write((uint32_t*)(&params.motor1_invert));
 80056fe:	4827      	ldr	r0, [pc, #156]	; (800579c <params_save+0x15c>)
 8005700:	f7ff ff6e 	bl	80055e0 <write>
	write((uint32_t*)(&params.encoder0_invert));
 8005704:	4826      	ldr	r0, [pc, #152]	; (80057a0 <params_save+0x160>)
 8005706:	f7ff ff6b 	bl	80055e0 <write>
	write((uint32_t*)(&params.encoder1_invert));
 800570a:	4826      	ldr	r0, [pc, #152]	; (80057a4 <params_save+0x164>)
 800570c:	f7ff ff68 	bl	80055e0 <write>
	write((uint32_t*)(&params.encoder_exchange));
 8005710:	4825      	ldr	r0, [pc, #148]	; (80057a8 <params_save+0x168>)
 8005712:	f7ff ff65 	bl	80055e0 <write>

	write((uint32_t*)(&params.motor0_pos_deadband));
 8005716:	4825      	ldr	r0, [pc, #148]	; (80057ac <params_save+0x16c>)
 8005718:	f7ff ff62 	bl	80055e0 <write>
	write((uint32_t*)(&params.motor0_neg_deadband));
 800571c:	4824      	ldr	r0, [pc, #144]	; (80057b0 <params_save+0x170>)
 800571e:	f7ff ff5f 	bl	80055e0 <write>
	write((uint32_t*)(&params.motor1_pos_deadband));
 8005722:	4824      	ldr	r0, [pc, #144]	; (80057b4 <params_save+0x174>)
 8005724:	f7ff ff5c 	bl	80055e0 <write>
	write((uint32_t*)(&params.motor1_neg_deadband));
 8005728:	4823      	ldr	r0, [pc, #140]	; (80057b8 <params_save+0x178>)
 800572a:	f7ff ff59 	bl	80055e0 <write>

	HAL_FLASH_Lock();
 800572e:	f001 ffb3 	bl	8007698 <HAL_FLASH_Lock>
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	0800fc00 	.word	0x0800fc00
 8005740:	2000119c 	.word	0x2000119c
 8005744:	20001078 	.word	0x20001078
 8005748:	2000107c 	.word	0x2000107c
 800574c:	20001080 	.word	0x20001080
 8005750:	200010c4 	.word	0x200010c4
 8005754:	200010c8 	.word	0x200010c8
 8005758:	200010cc 	.word	0x200010cc
 800575c:	20001110 	.word	0x20001110
 8005760:	20001114 	.word	0x20001114
 8005764:	20001118 	.word	0x20001118
 8005768:	2000115c 	.word	0x2000115c
 800576c:	20001160 	.word	0x20001160
 8005770:	20001164 	.word	0x20001164
 8005774:	20001168 	.word	0x20001168
 8005778:	2000116c 	.word	0x2000116c
 800577c:	20001170 	.word	0x20001170
 8005780:	20001174 	.word	0x20001174
 8005784:	20001178 	.word	0x20001178
 8005788:	2000117c 	.word	0x2000117c
 800578c:	20001180 	.word	0x20001180
 8005790:	20001184 	.word	0x20001184
 8005794:	20001188 	.word	0x20001188
 8005798:	2000118c 	.word	0x2000118c
 800579c:	2000118d 	.word	0x2000118d
 80057a0:	2000118e 	.word	0x2000118e
 80057a4:	2000118f 	.word	0x2000118f
 80057a8:	20001190 	.word	0x20001190
 80057ac:	20001192 	.word	0x20001192
 80057b0:	20001194 	.word	0x20001194
 80057b4:	20001196 	.word	0x20001196
 80057b8:	20001198 	.word	0x20001198

080057bc <params_load>:

bool params_load(){
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	address = PARAMS_PAGE_ADDRESS;
 80057c0:	4b35      	ldr	r3, [pc, #212]	; (8005898 <params_load+0xdc>)
 80057c2:	4a36      	ldr	r2, [pc, #216]	; (800589c <params_load+0xe0>)
 80057c4:	601a      	str	r2, [r3, #0]

	if((*(__IO uint32_t*) address) != HAVE_SAVED_DATA) return false;
 80057c6:	4b34      	ldr	r3, [pc, #208]	; (8005898 <params_load+0xdc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <params_load+0x18>
 80057d0:	2300      	movs	r3, #0
 80057d2:	e05f      	b.n	8005894 <params_load+0xd8>
	address+=4;
 80057d4:	4b30      	ldr	r3, [pc, #192]	; (8005898 <params_load+0xdc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3304      	adds	r3, #4
 80057da:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <params_load+0xdc>)
 80057dc:	6013      	str	r3, [r2, #0]

	// wheels pid
	read((uint32_t*)(&params.pid[0].KP));
 80057de:	4830      	ldr	r0, [pc, #192]	; (80058a0 <params_load+0xe4>)
 80057e0:	f7ff ff18 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[0].KI));
 80057e4:	482f      	ldr	r0, [pc, #188]	; (80058a4 <params_load+0xe8>)
 80057e6:	f7ff ff15 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[0].KD));
 80057ea:	482f      	ldr	r0, [pc, #188]	; (80058a8 <params_load+0xec>)
 80057ec:	f7ff ff12 	bl	8005614 <read>

	read((uint32_t*)(&params.pid[1].KP));
 80057f0:	482e      	ldr	r0, [pc, #184]	; (80058ac <params_load+0xf0>)
 80057f2:	f7ff ff0f 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[1].KI));
 80057f6:	482e      	ldr	r0, [pc, #184]	; (80058b0 <params_load+0xf4>)
 80057f8:	f7ff ff0c 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[1].KD));
 80057fc:	482d      	ldr	r0, [pc, #180]	; (80058b4 <params_load+0xf8>)
 80057fe:	f7ff ff09 	bl	8005614 <read>

	// stability or sync pid
	read((uint32_t*)(&params.pid[2].KP));
 8005802:	482d      	ldr	r0, [pc, #180]	; (80058b8 <params_load+0xfc>)
 8005804:	f7ff ff06 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[2].KI));
 8005808:	482c      	ldr	r0, [pc, #176]	; (80058bc <params_load+0x100>)
 800580a:	f7ff ff03 	bl	8005614 <read>
	read((uint32_t*)(&params.pid[2].KD));
 800580e:	482c      	ldr	r0, [pc, #176]	; (80058c0 <params_load+0x104>)
 8005810:	f7ff ff00 	bl	8005614 <read>

	// IMU
	read((uint32_t*)(&params.tilt_type));
 8005814:	482b      	ldr	r0, [pc, #172]	; (80058c4 <params_load+0x108>)
 8005816:	f7ff fefd 	bl	8005614 <read>
	read((uint32_t*)(&params.tilt_offset));
 800581a:	482b      	ldr	r0, [pc, #172]	; (80058c8 <params_load+0x10c>)
 800581c:	f7ff fefa 	bl	8005614 <read>
	read((uint32_t*)(&params.g_believe));
 8005820:	482a      	ldr	r0, [pc, #168]	; (80058cc <params_load+0x110>)
 8005822:	f7ff fef7 	bl	8005614 <read>

	read((uint32_t*)(&params.gx_offset));
 8005826:	482a      	ldr	r0, [pc, #168]	; (80058d0 <params_load+0x114>)
 8005828:	f7ff fef4 	bl	8005614 <read>
	read((uint32_t*)(&params.gy_offset));
 800582c:	4829      	ldr	r0, [pc, #164]	; (80058d4 <params_load+0x118>)
 800582e:	f7ff fef1 	bl	8005614 <read>
	read((uint32_t*)(&params.gz_offset));
 8005832:	4829      	ldr	r0, [pc, #164]	; (80058d8 <params_load+0x11c>)
 8005834:	f7ff feee 	bl	8005614 <read>

	read((uint32_t*)(&params.mx_offset));
 8005838:	4828      	ldr	r0, [pc, #160]	; (80058dc <params_load+0x120>)
 800583a:	f7ff feeb 	bl	8005614 <read>
	read((uint32_t*)(&params.my_offset));
 800583e:	4828      	ldr	r0, [pc, #160]	; (80058e0 <params_load+0x124>)
 8005840:	f7ff fee8 	bl	8005614 <read>
	read((uint32_t*)(&params.mz_offset));
 8005844:	4827      	ldr	r0, [pc, #156]	; (80058e4 <params_load+0x128>)
 8005846:	f7ff fee5 	bl	8005614 <read>

	read((uint32_t*)(&params.mx_scale));
 800584a:	4827      	ldr	r0, [pc, #156]	; (80058e8 <params_load+0x12c>)
 800584c:	f7ff fee2 	bl	8005614 <read>
	read((uint32_t*)(&params.my_scale));
 8005850:	4826      	ldr	r0, [pc, #152]	; (80058ec <params_load+0x130>)
 8005852:	f7ff fedf 	bl	8005614 <read>
	read((uint32_t*)(&params.mz_scale));
 8005856:	4826      	ldr	r0, [pc, #152]	; (80058f0 <params_load+0x134>)
 8005858:	f7ff fedc 	bl	8005614 <read>

	//HW
	read((uint32_t*)(&params.motor0_invert));
 800585c:	4825      	ldr	r0, [pc, #148]	; (80058f4 <params_load+0x138>)
 800585e:	f7ff fed9 	bl	8005614 <read>
	read((uint32_t*)(&params.motor1_invert));
 8005862:	4825      	ldr	r0, [pc, #148]	; (80058f8 <params_load+0x13c>)
 8005864:	f7ff fed6 	bl	8005614 <read>
	read((uint32_t*)(&params.encoder0_invert));
 8005868:	4824      	ldr	r0, [pc, #144]	; (80058fc <params_load+0x140>)
 800586a:	f7ff fed3 	bl	8005614 <read>
	read((uint32_t*)(&params.encoder1_invert));
 800586e:	4824      	ldr	r0, [pc, #144]	; (8005900 <params_load+0x144>)
 8005870:	f7ff fed0 	bl	8005614 <read>
	read((uint32_t*)(&params.encoder_exchange));
 8005874:	4823      	ldr	r0, [pc, #140]	; (8005904 <params_load+0x148>)
 8005876:	f7ff fecd 	bl	8005614 <read>

	read((uint32_t*)(&params.motor0_pos_deadband));
 800587a:	4823      	ldr	r0, [pc, #140]	; (8005908 <params_load+0x14c>)
 800587c:	f7ff feca 	bl	8005614 <read>
	read((uint32_t*)(&params.motor0_neg_deadband));
 8005880:	4822      	ldr	r0, [pc, #136]	; (800590c <params_load+0x150>)
 8005882:	f7ff fec7 	bl	8005614 <read>
	read((uint32_t*)(&params.motor1_pos_deadband));
 8005886:	4822      	ldr	r0, [pc, #136]	; (8005910 <params_load+0x154>)
 8005888:	f7ff fec4 	bl	8005614 <read>
	read((uint32_t*)(&params.motor1_neg_deadband));
 800588c:	4821      	ldr	r0, [pc, #132]	; (8005914 <params_load+0x158>)
 800588e:	f7ff fec1 	bl	8005614 <read>

	return true;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	2000119c 	.word	0x2000119c
 800589c:	0800fc00 	.word	0x0800fc00
 80058a0:	20001078 	.word	0x20001078
 80058a4:	2000107c 	.word	0x2000107c
 80058a8:	20001080 	.word	0x20001080
 80058ac:	200010c4 	.word	0x200010c4
 80058b0:	200010c8 	.word	0x200010c8
 80058b4:	200010cc 	.word	0x200010cc
 80058b8:	20001110 	.word	0x20001110
 80058bc:	20001114 	.word	0x20001114
 80058c0:	20001118 	.word	0x20001118
 80058c4:	2000115c 	.word	0x2000115c
 80058c8:	20001160 	.word	0x20001160
 80058cc:	20001164 	.word	0x20001164
 80058d0:	20001168 	.word	0x20001168
 80058d4:	2000116c 	.word	0x2000116c
 80058d8:	20001170 	.word	0x20001170
 80058dc:	20001174 	.word	0x20001174
 80058e0:	20001178 	.word	0x20001178
 80058e4:	2000117c 	.word	0x2000117c
 80058e8:	20001180 	.word	0x20001180
 80058ec:	20001184 	.word	0x20001184
 80058f0:	20001188 	.word	0x20001188
 80058f4:	2000118c 	.word	0x2000118c
 80058f8:	2000118d 	.word	0x2000118d
 80058fc:	2000118e 	.word	0x2000118e
 8005900:	2000118f 	.word	0x2000118f
 8005904:	20001190 	.word	0x20001190
 8005908:	20001192 	.word	0x20001192
 800590c:	20001194 	.word	0x20001194
 8005910:	20001196 	.word	0x20001196
 8005914:	20001198 	.word	0x20001198

08005918 <pid_compute>:

#include "math.h"

#include <application/pid/pid.h>

float pid_compute(pid_params_t *pid_params, float sp, float fb, float dt){
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]

	// Save set point, feed back and error
	pid_params->sp = sp;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
	pid_params->fb = fb;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c
	pid_params->err = sp-fb;
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	68b8      	ldr	r0, [r7, #8]
 8005936:	f7fb f8cb 	bl	8000ad0 <__aeabi_fsub>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	631a      	str	r2, [r3, #48]	; 0x30

	// Compute P part
	pid_params->P_Part = pid_params->KP*pid_params->err;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fb f9c9 	bl	8000ce4 <__aeabi_fmul>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c

	// Compute I part and saturate it
	pid_params->I_Part = pid_params->preIPart + pid_params->KI*pid_params->err*dt;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7fb f9bb 	bl	8000ce4 <__aeabi_fmul>
 800596e:	4603      	mov	r3, r0
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fb f9b6 	bl	8000ce4 <__aeabi_fmul>
 8005978:	4603      	mov	r3, r0
 800597a:	4619      	mov	r1, r3
 800597c:	4620      	mov	r0, r4
 800597e:	f7fb f8a9 	bl	8000ad4 <__addsf3>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
	if(pid_params->I_Part < pid_params->minIpart) pid_params->I_Part = pid_params->minIpart;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f7fb fb43 	bl	8001020 <__aeabi_fcmplt>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <pid_compute+0x90>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
	if(pid_params->I_Part > pid_params->maxIPart) pid_params->I_Part = pid_params->maxIPart;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fb fb52 	bl	800105c <__aeabi_fcmpgt>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <pid_compute+0xae>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
	pid_params->preIPart = pid_params->I_Part;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34

	// Compute D part and saturate it
	if(pid_params->isFistCompute){
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <pid_compute+0xd0>
		pid_params->preError = pid_params->err;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
		pid_params->isFistCompute = false;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	pid_params->D_Part = pid_params->KD*(pid_params->err-pid_params->preError)/dt;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689c      	ldr	r4, [r3, #8]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7fb f86a 	bl	8000ad0 <__aeabi_fsub>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4619      	mov	r1, r3
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7fb f96f 	bl	8000ce4 <__aeabi_fmul>
 8005a06:	4603      	mov	r3, r0
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb fa1e 	bl	8000e4c <__aeabi_fdiv>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	645a      	str	r2, [r3, #68]	; 0x44
	if(pid_params->D_Part < pid_params->minDpart) pid_params->D_Part = pid_params->minDpart;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fb fafc 	bl	8001020 <__aeabi_fcmplt>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <pid_compute+0x11e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
	if(pid_params->D_Part > pid_params->maxDPart) pid_params->D_Part = pid_params->maxDPart;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fb fb0b 	bl	800105c <__aeabi_fcmpgt>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <pid_compute+0x13c>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
	pid_params->preError = pid_params->err;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

	// Compute control signal and saturate it
	pid_params->U = pid_params->P_Part + pid_params->I_Part + pid_params->D_Part;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fb f834 	bl	8000ad4 <__addsf3>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fb f82c 	bl	8000ad4 <__addsf3>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	649a      	str	r2, [r3, #72]	; 0x48
	if(pid_params->U < pid_params->minOut) pid_params->U = pid_params->minOut;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fb fac6 	bl	8001020 <__aeabi_fcmplt>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <pid_compute+0x18a>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	649a      	str	r2, [r3, #72]	; 0x48
	if(pid_params->U > pid_params->maxOut) pid_params->U = pid_params->maxOut;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f7fb fad5 	bl	800105c <__aeabi_fcmpgt>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <pid_compute+0x1a8>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	649a      	str	r2, [r3, #72]	; 0x48

	return pid_params->U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd90      	pop	{r4, r7, pc}

08005acc <pid_reset>:

void pid_reset(pid_params_t *pid_params){
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	pid_params->isFistCompute=true;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pid_params->preIPart = 0;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	635a      	str	r2, [r3, #52]	; 0x34
	pid_params->preError = 0;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
	pid_params->P_Part=0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_params->I_Part=0;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
	pid_params->D_Part=0;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	645a      	str	r2, [r3, #68]	; 0x44
	pid_params->U=0;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
	...

08005b18 <timer_init>:
#include <application/user_define.h>
#include "tim.h"

static callback_t callbacks[MAX_CALLBACK_FUNC];

int timer_init(){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8005b1c:	4802      	ldr	r0, [pc, #8]	; (8005b28 <timer_init+0x10>)
 8005b1e:	f003 fd8f 	bl	8009640 <HAL_TIM_Base_Start_IT>
	return 0;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20001f00 	.word	0x20001f00

08005b2c <timer_register_callback>:

timer_id_t timer_register_callback(timer_callback_func_t timer_callback_func, uint16_t period_ms, void *cxt, timer_mode_t mode){
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	461a      	mov	r2, r3
 8005b38:	460b      	mov	r3, r1
 8005b3a:	817b      	strh	r3, [r7, #10]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	727b      	strb	r3, [r7, #9]
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++){
 8005b40:	2300      	movs	r3, #0
 8005b42:	75fb      	strb	r3, [r7, #23]
 8005b44:	e035      	b.n	8005bb2 <timer_register_callback+0x86>
		if(callbacks[i].timer_callback_func == 0){
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d12b      	bne.n	8005bac <timer_register_callback+0x80>
			callbacks[i].timer_callback_func = timer_callback_func;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	601a      	str	r2, [r3, #0]
			callbacks[i].period_ms = period_ms;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4413      	add	r3, r2
 8005b68:	3304      	adds	r3, #4
 8005b6a:	897a      	ldrh	r2, [r7, #10]
 8005b6c:	801a      	strh	r2, [r3, #0]
			callbacks[i].context = cxt;
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	4413      	add	r3, r2
 8005b76:	3308      	adds	r3, #8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
			callbacks[i].mode = mode;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4413      	add	r3, r2
 8005b84:	330d      	adds	r3, #13
 8005b86:	7a7a      	ldrb	r2, [r7, #9]
 8005b88:	701a      	strb	r2, [r3, #0]
			callbacks[i].cnt = period_ms;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	4a0e      	ldr	r2, [pc, #56]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	4413      	add	r3, r2
 8005b92:	3306      	adds	r3, #6
 8005b94:	897a      	ldrh	r2, [r7, #10]
 8005b96:	801a      	strh	r2, [r3, #0]
			callbacks[i].id = i;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <timer_register_callback+0x9c>)
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4413      	add	r3, r2
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7dfa      	ldrb	r2, [r7, #23]
 8005ba4:	701a      	strb	r2, [r3, #0]
			return i;
 8005ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005baa:	e007      	b.n	8005bbc <timer_register_callback+0x90>
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++){
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b0e      	cmp	r3, #14
 8005bb6:	d9c6      	bls.n	8005b46 <timer_register_callback+0x1a>
		}
	}
	return -1;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20001c6c 	.word	0x20001c6c

08005bcc <timer_unregister_callback>:

void timer_unregister_callback(timer_id_t id){
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
	if(id==TID_INVALID) return;
 8005bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d007      	beq.n	8005bf0 <timer_unregister_callback+0x24>
	callbacks[id].timer_callback_func = 0;
 8005be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be4:	4a05      	ldr	r2, [pc, #20]	; (8005bfc <timer_unregister_callback+0x30>)
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4413      	add	r3, r2
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e000      	b.n	8005bf2 <timer_unregister_callback+0x26>
	if(id==TID_INVALID) return;
 8005bf0:	bf00      	nop
}
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20001c6c 	.word	0x20001c6c

08005c00 <user_systick>:
uint64_t milis(){
	return HAL_GetTick();
}

void user_systick()
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++){
 8005c06:	2300      	movs	r3, #0
 8005c08:	71fb      	strb	r3, [r7, #7]
 8005c0a:	e047      	b.n	8005c9c <user_systick+0x9c>
		if(callbacks[i].timer_callback_func != 0){
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	4a27      	ldr	r2, [pc, #156]	; (8005cac <user_systick+0xac>)
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	4413      	add	r3, r2
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03d      	beq.n	8005c96 <user_systick+0x96>
			callbacks[i].cnt--;
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	4923      	ldr	r1, [pc, #140]	; (8005cac <user_systick+0xac>)
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	440a      	add	r2, r1
 8005c22:	3206      	adds	r2, #6
 8005c24:	8812      	ldrh	r2, [r2, #0]
 8005c26:	3a01      	subs	r2, #1
 8005c28:	b291      	uxth	r1, r2
 8005c2a:	4a20      	ldr	r2, [pc, #128]	; (8005cac <user_systick+0xac>)
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4413      	add	r3, r2
 8005c30:	3306      	adds	r3, #6
 8005c32:	460a      	mov	r2, r1
 8005c34:	801a      	strh	r2, [r3, #0]
			if(callbacks[i].cnt == 0){
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <user_systick+0xac>)
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3306      	adds	r3, #6
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d127      	bne.n	8005c96 <user_systick+0x96>
				callbacks[i].timer_callback_func(callbacks[i].context);
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <user_systick+0xac>)
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	79fa      	ldrb	r2, [r7, #7]
 8005c52:	4916      	ldr	r1, [pc, #88]	; (8005cac <user_systick+0xac>)
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	440a      	add	r2, r1
 8005c58:	3208      	adds	r2, #8
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
				callbacks[i].cnt = callbacks[i].period_ms;
 8005c60:	79fa      	ldrb	r2, [r7, #7]
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	4911      	ldr	r1, [pc, #68]	; (8005cac <user_systick+0xac>)
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	440a      	add	r2, r1
 8005c6a:	3204      	adds	r2, #4
 8005c6c:	8811      	ldrh	r1, [r2, #0]
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <user_systick+0xac>)
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	3306      	adds	r3, #6
 8005c76:	460a      	mov	r2, r1
 8005c78:	801a      	strh	r2, [r3, #0]
				if(callbacks[i].mode == TIMER_MODE_ONE_SHOT) callbacks[i].timer_callback_func = 0;
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <user_systick+0xac>)
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	4413      	add	r3, r2
 8005c82:	330d      	adds	r3, #13
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d105      	bne.n	8005c96 <user_systick+0x96>
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	4a07      	ldr	r2, [pc, #28]	; (8005cac <user_systick+0xac>)
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	4413      	add	r3, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < MAX_CALLBACK_FUNC; i++){
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	71fb      	strb	r3, [r7, #7]
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	2b0e      	cmp	r3, #14
 8005ca0:	d9b4      	bls.n	8005c0c <user_systick+0xc>
			}
		}
	}
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20001c6c 	.word	0x20001c6c

08005cb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance != htim1.Instance) return;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d102      	bne.n	8005cca <HAL_TIM_PeriodElapsedCallback+0x1a>
	user_systick();
 8005cc4:	f7ff ff9c 	bl	8005c00 <user_systick>
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_PeriodElapsedCallback+0x1c>
	if(htim->Instance != htim1.Instance) return;
 8005cca:	bf00      	nop
}
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20001f00 	.word	0x20001f00

08005cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005cde:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <MX_DMA_Init+0x68>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <MX_DMA_Init+0x68>)
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	6153      	str	r3, [r2, #20]
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <MX_DMA_Init+0x68>)
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	200c      	movs	r0, #12
 8005cfc:	f001 f99b 	bl	8007036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005d00:	200c      	movs	r0, #12
 8005d02:	f001 f9b4 	bl	800706e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	200d      	movs	r0, #13
 8005d0c:	f001 f993 	bl	8007036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005d10:	200d      	movs	r0, #13
 8005d12:	f001 f9ac 	bl	800706e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2010      	movs	r0, #16
 8005d1c:	f001 f98b 	bl	8007036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005d20:	2010      	movs	r0, #16
 8005d22:	f001 f9a4 	bl	800706e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2011      	movs	r0, #17
 8005d2c:	f001 f983 	bl	8007036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005d30:	2011      	movs	r0, #17
 8005d32:	f001 f99c 	bl	800706e <HAL_NVIC_EnableIRQ>

}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000

08005d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d58:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	4a4d      	ldr	r2, [pc, #308]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d5e:	f043 0310 	orr.w	r3, r3, #16
 8005d62:	6193      	str	r3, [r2, #24]
 8005d64:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4a47      	ldr	r2, [pc, #284]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d76:	f043 0320 	orr.w	r3, r3, #32
 8005d7a:	6193      	str	r3, [r2, #24]
 8005d7c:	4b45      	ldr	r3, [pc, #276]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d88:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	4a41      	ldr	r2, [pc, #260]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6193      	str	r3, [r2, #24]
 8005d94:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da0:	4b3c      	ldr	r3, [pc, #240]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	6193      	str	r3, [r2, #24]
 8005dac:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <MX_GPIO_Init+0x150>)
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|MTR1_DIR_MCU_Pin|MTR1_ENB_MCU_Pin, GPIO_PIN_RESET);
 8005db8:	2200      	movs	r2, #0
 8005dba:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005dbe:	4836      	ldr	r0, [pc, #216]	; (8005e98 <MX_GPIO_Init+0x154>)
 8005dc0:	f001 ff2e 	bl	8007c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MTR2_DIR_MCU_Pin|MTR2_ENB_MCU_Pin, GPIO_PIN_RESET);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	4834      	ldr	r0, [pc, #208]	; (8005e9c <MX_GPIO_Init+0x158>)
 8005dca:	f001 ff29 	bl	8007c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_RESET_Pin|RF_PWR_Pin|BLUE_KEY_Pin|NRF24_IRQ_Pin
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f649 0130 	movw	r1, #38960	; 0x9830
 8005dd4:	4832      	ldr	r0, [pc, #200]	; (8005ea0 <MX_GPIO_Init+0x15c>)
 8005dd6:	f001 ff23 	bl	8007c20 <HAL_GPIO_WritePin>
                          |NRF24_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SET_GPIO_Port, RF_SET_Pin, GPIO_PIN_RESET);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4831      	ldr	r0, [pc, #196]	; (8005ea4 <MX_GPIO_Init+0x160>)
 8005de0:	f001 ff1e 	bl	8007c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|MTR1_DIR_MCU_Pin|MTR1_ENB_MCU_Pin;
 8005de4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dea:	2301      	movs	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df2:	2302      	movs	r3, #2
 8005df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005df6:	f107 0314 	add.w	r3, r7, #20
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4826      	ldr	r0, [pc, #152]	; (8005e98 <MX_GPIO_Init+0x154>)
 8005dfe:	f001 fdb5 	bl	800796c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = MTR2_DIR_MCU_Pin|MTR2_ENB_MCU_Pin;
 8005e02:	2303      	movs	r3, #3
 8005e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e12:	f107 0314 	add.w	r3, r7, #20
 8005e16:	4619      	mov	r1, r3
 8005e18:	4820      	ldr	r0, [pc, #128]	; (8005e9c <MX_GPIO_Init+0x158>)
 8005e1a:	f001 fda7 	bl	800796c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BLUE_RESET_Pin|RF_PWR_Pin|BLUE_KEY_Pin|NRF24_IRQ_Pin
 8005e1e:	f649 0330 	movw	r3, #38960	; 0x9830
 8005e22:	617b      	str	r3, [r7, #20]
                          |NRF24_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e24:	2301      	movs	r3, #1
 8005e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e30:	f107 0314 	add.w	r3, r7, #20
 8005e34:	4619      	mov	r1, r3
 8005e36:	481a      	ldr	r0, [pc, #104]	; (8005ea0 <MX_GPIO_Init+0x15c>)
 8005e38:	f001 fd98 	bl	800796c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e40:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <MX_GPIO_Init+0x164>)
 8005e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4815      	ldr	r0, [pc, #84]	; (8005ea4 <MX_GPIO_Init+0x160>)
 8005e50:	f001 fd8c 	bl	800796c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SET_Pin;
 8005e54:	2302      	movs	r3, #2
 8005e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e60:	2302      	movs	r3, #2
 8005e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SET_GPIO_Port, &GPIO_InitStruct);
 8005e64:	f107 0314 	add.w	r3, r7, #20
 8005e68:	4619      	mov	r1, r3
 8005e6a:	480e      	ldr	r0, [pc, #56]	; (8005ea4 <MX_GPIO_Init+0x160>)
 8005e6c:	f001 fd7e 	bl	800796c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8005e70:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <MX_GPIO_Init+0x168>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <MX_GPIO_Init+0x168>)
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	6053      	str	r3, [r2, #4]

}
 8005e8c:	bf00      	nop
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40011400 	.word	0x40011400
 8005ea0:	40010800 	.word	0x40010800
 8005ea4:	40010c00 	.word	0x40010c00
 8005ea8:	10110000 	.word	0x10110000
 8005eac:	40010000 	.word	0x40010000

08005eb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005eb4:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <MX_I2C1_Init+0x54>)
 8005eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005eba:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ebc:	4a12      	ldr	r2, [pc, #72]	; (8005f08 <MX_I2C1_Init+0x58>)
 8005ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005eec:	4804      	ldr	r0, [pc, #16]	; (8005f00 <MX_I2C1_Init+0x50>)
 8005eee:	f001 fec9 	bl	8007c84 <HAL_I2C_Init>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005ef8:	f000 f8ba 	bl	8006070 <Error_Handler>
  }

}
 8005efc:	bf00      	nop
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20001d6c 	.word	0x20001d6c
 8005f04:	40005400 	.word	0x40005400
 8005f08:	00061a80 	.word	0x00061a80

08005f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f14:	f107 0314 	add.w	r3, r7, #20
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <HAL_I2C_MspInit+0x90>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d132      	bne.n	8005f92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	6193      	str	r3, [r2, #24]
 8005f38:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GY9250_SCL_Pin|GY9250_SDA_Pin;
 8005f44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f4a:	2312      	movs	r3, #18
 8005f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	4619      	mov	r1, r3
 8005f58:	4812      	ldr	r0, [pc, #72]	; (8005fa4 <HAL_I2C_MspInit+0x98>)
 8005f5a:	f001 fd07 	bl	800796c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_I2C_MspInit+0x9c>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f043 0302 	orr.w	r3, r3, #2
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
 8005f74:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <HAL_I2C_MspInit+0x9c>)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f84:	61d3      	str	r3, [r2, #28]
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_I2C_MspInit+0x94>)
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005f92:	bf00      	nop
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40005400 	.word	0x40005400
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40010c00 	.word	0x40010c00
 8005fa8:	40010000 	.word	0x40010000

08005fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fb0:	f000 fee6 	bl	8006d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fb4:	f000 f81b 	bl	8005fee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fb8:	f7ff fec4 	bl	8005d44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005fbc:	f7ff ff78 	bl	8005eb0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8005fc0:	f000 fd12 	bl	80069e8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005fc4:	f7ff fe88 	bl	8005cd8 <MX_DMA_Init>
  MX_SPI1_Init();
 8005fc8:	f000 f856 	bl	8006078 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005fcc:	f000 f88a 	bl	80060e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8005fd0:	f000 fa98 	bl	8006504 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005fd4:	f000 fb16 	bl	8006604 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005fd8:	f000 fb68 	bl	80066ac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005fdc:	f000 fcb0 	bl	8006940 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005fe0:	f000 fcd8 	bl	8006994 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8005fe4:	f000 f9ee 	bl	80063c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8005fe8:	f7fb f948 	bl	800127c <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005fec:	e7fe      	b.n	8005fec <main+0x40>

08005fee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b090      	sub	sp, #64	; 0x40
 8005ff2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ff4:	f107 0318 	add.w	r3, r7, #24
 8005ff8:	2228      	movs	r2, #40	; 0x28
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f005 f954 	bl	800b2aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006010:	2302      	movs	r3, #2
 8006012:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006014:	2301      	movs	r3, #1
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006018:	2310      	movs	r3, #16
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800601c:	2302      	movs	r3, #2
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006020:	2300      	movs	r3, #0
 8006022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006024:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800602a:	f107 0318 	add.w	r3, r7, #24
 800602e:	4618      	mov	r0, r3
 8006030:	f002 fe16 	bl	8008c60 <HAL_RCC_OscConfig>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800603a:	f000 f819 	bl	8006070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800603e:	230f      	movs	r3, #15
 8006040:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006042:	2302      	movs	r3, #2
 8006044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800604a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	2102      	movs	r1, #2
 8006058:	4618      	mov	r0, r3
 800605a:	f003 f881 	bl	8009160 <HAL_RCC_ClockConfig>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8006064:	f000 f804 	bl	8006070 <Error_Handler>
  }
}
 8006068:	bf00      	nop
 800606a:	3740      	adds	r7, #64	; 0x40
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006074:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006076:	e7fe      	b.n	8006076 <Error_Handler+0x6>

08006078 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800607c:	4b17      	ldr	r3, [pc, #92]	; (80060dc <MX_SPI1_Init+0x64>)
 800607e:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <MX_SPI1_Init+0x68>)
 8006080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006082:	4b16      	ldr	r3, [pc, #88]	; (80060dc <MX_SPI1_Init+0x64>)
 8006084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <MX_SPI1_Init+0x64>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <MX_SPI1_Init+0x64>)
 8006092:	2200      	movs	r2, #0
 8006094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <MX_SPI1_Init+0x64>)
 8006098:	2200      	movs	r2, #0
 800609a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <MX_SPI1_Init+0x64>)
 800609e:	2200      	movs	r2, #0
 80060a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <MX_SPI1_Init+0x64>)
 80060a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <MX_SPI1_Init+0x64>)
 80060ac:	2218      	movs	r2, #24
 80060ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <MX_SPI1_Init+0x64>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <MX_SPI1_Init+0x64>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <MX_SPI1_Init+0x64>)
 80060be:	2200      	movs	r2, #0
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <MX_SPI1_Init+0x64>)
 80060c4:	220a      	movs	r2, #10
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80060c8:	4804      	ldr	r0, [pc, #16]	; (80060dc <MX_SPI1_Init+0x64>)
 80060ca:	f003 f9e5 	bl	8009498 <HAL_SPI_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80060d4:	f7ff ffcc 	bl	8006070 <Error_Handler>
  }

}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20001e18 	.word	0x20001e18
 80060e0:	40013000 	.word	0x40013000

080060e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <MX_SPI2_Init+0x64>)
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <MX_SPI2_Init+0x68>)
 80060ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <MX_SPI2_Init+0x64>)
 80060f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <MX_SPI2_Init+0x64>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <MX_SPI2_Init+0x64>)
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <MX_SPI2_Init+0x64>)
 8006104:	2200      	movs	r2, #0
 8006106:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <MX_SPI2_Init+0x64>)
 800610a:	2200      	movs	r2, #0
 800610c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <MX_SPI2_Init+0x64>)
 8006110:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006114:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <MX_SPI2_Init+0x64>)
 8006118:	2200      	movs	r2, #0
 800611a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <MX_SPI2_Init+0x64>)
 800611e:	2200      	movs	r2, #0
 8006120:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <MX_SPI2_Init+0x64>)
 8006124:	2200      	movs	r2, #0
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <MX_SPI2_Init+0x64>)
 800612a:	2200      	movs	r2, #0
 800612c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <MX_SPI2_Init+0x64>)
 8006130:	220a      	movs	r2, #10
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006134:	4804      	ldr	r0, [pc, #16]	; (8006148 <MX_SPI2_Init+0x64>)
 8006136:	f003 f9af 	bl	8009498 <HAL_SPI_Init>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006140:	f7ff ff96 	bl	8006070 <Error_Handler>
  }

}
 8006144:	bf00      	nop
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20001dc0 	.word	0x20001dc0
 800614c:	40003800 	.word	0x40003800

08006150 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006158:	f107 031c 	add.w	r3, r7, #28
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <HAL_SPI_MspInit+0x114>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d13e      	bne.n	80061ee <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006170:	4b3d      	ldr	r3, [pc, #244]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	4a3c      	ldr	r2, [pc, #240]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800617a:	6193      	str	r3, [r2, #24]
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <HAL_SPI_MspInit+0x118>)
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006188:	4b37      	ldr	r3, [pc, #220]	; (8006268 <HAL_SPI_MspInit+0x118>)
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	4a36      	ldr	r2, [pc, #216]	; (8006268 <HAL_SPI_MspInit+0x118>)
 800618e:	f043 0308 	orr.w	r3, r3, #8
 8006192:	6193      	str	r3, [r2, #24]
 8006194:	4b34      	ldr	r3, [pc, #208]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 80061a0:	2328      	movs	r3, #40	; 0x28
 80061a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a4:	2302      	movs	r3, #2
 80061a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061a8:	2303      	movs	r3, #3
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ac:	f107 031c 	add.w	r3, r7, #28
 80061b0:	4619      	mov	r1, r3
 80061b2:	482e      	ldr	r0, [pc, #184]	; (800626c <HAL_SPI_MspInit+0x11c>)
 80061b4:	f001 fbda 	bl	800796c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 80061b8:	2310      	movs	r3, #16
 80061ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 80061c4:	f107 031c 	add.w	r3, r7, #28
 80061c8:	4619      	mov	r1, r3
 80061ca:	4828      	ldr	r0, [pc, #160]	; (800626c <HAL_SPI_MspInit+0x11c>)
 80061cc:	f001 fbce 	bl	800796c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_SPI_MspInit+0x120>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_SPI_MspInit+0x120>)
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80061ec:	e036      	b.n	800625c <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_SPI_MspInit+0x124>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d131      	bne.n	800625c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061f8:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <HAL_SPI_MspInit+0x118>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4a1a      	ldr	r2, [pc, #104]	; (8006268 <HAL_SPI_MspInit+0x118>)
 80061fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006202:	61d3      	str	r3, [r2, #28]
 8006204:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006210:	4b15      	ldr	r3, [pc, #84]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <HAL_SPI_MspInit+0x118>)
 8006216:	f043 0308 	orr.w	r3, r3, #8
 800621a:	6193      	str	r3, [r2, #24]
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <HAL_SPI_MspInit+0x118>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DWM_SPI_CSn_Pin|DWM_SPI_CLK_Pin|DWM_SPI_MOSI_Pin;
 8006228:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800622c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006232:	2303      	movs	r3, #3
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006236:	f107 031c 	add.w	r3, r7, #28
 800623a:	4619      	mov	r1, r3
 800623c:	480b      	ldr	r0, [pc, #44]	; (800626c <HAL_SPI_MspInit+0x11c>)
 800623e:	f001 fb95 	bl	800796c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DWM_SPI_MISO_Pin;
 8006242:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006248:	2300      	movs	r3, #0
 800624a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DWM_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8006250:	f107 031c 	add.w	r3, r7, #28
 8006254:	4619      	mov	r1, r3
 8006256:	4805      	ldr	r0, [pc, #20]	; (800626c <HAL_SPI_MspInit+0x11c>)
 8006258:	f001 fb88 	bl	800796c <HAL_GPIO_Init>
}
 800625c:	bf00      	nop
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40013000 	.word	0x40013000
 8006268:	40021000 	.word	0x40021000
 800626c:	40010c00 	.word	0x40010c00
 8006270:	40010000 	.word	0x40010000
 8006274:	40003800 	.word	0x40003800

08006278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800627e:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <HAL_MspInit+0x5c>)
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <HAL_MspInit+0x5c>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6193      	str	r3, [r2, #24]
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <HAL_MspInit+0x5c>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <HAL_MspInit+0x5c>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <HAL_MspInit+0x5c>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	61d3      	str	r3, [r2, #28]
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <HAL_MspInit+0x5c>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_MspInit+0x60>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <HAL_MspInit+0x60>)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40010000 	.word	0x40010000

080062dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062e0:	e7fe      	b.n	80062e0 <NMI_Handler+0x4>

080062e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062e6:	e7fe      	b.n	80062e6 <HardFault_Handler+0x4>

080062e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062ec:	e7fe      	b.n	80062ec <MemManage_Handler+0x4>

080062ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ee:	b480      	push	{r7}
 80062f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062f2:	e7fe      	b.n	80062f2 <BusFault_Handler+0x4>

080062f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062f8:	e7fe      	b.n	80062f8 <UsageFault_Handler+0x4>

080062fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006322:	f000 fd73 	bl	8006e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <DMA1_Channel2_IRQHandler+0x10>)
 8006332:	f000 ffe7 	bl	8007304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20002058 	.word	0x20002058

08006340 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006344:	4802      	ldr	r0, [pc, #8]	; (8006350 <DMA1_Channel3_IRQHandler+0x10>)
 8006346:	f000 ffdd 	bl	8007304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20001fd4 	.word	0x20001fd4

08006354 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006358:	4802      	ldr	r0, [pc, #8]	; (8006364 <DMA1_Channel6_IRQHandler+0x10>)
 800635a:	f000 ffd3 	bl	8007304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20001f90 	.word	0x20001f90

08006368 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800636c:	4802      	ldr	r0, [pc, #8]	; (8006378 <DMA1_Channel7_IRQHandler+0x10>)
 800636e:	f000 ffc9 	bl	8007304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	2000209c 	.word	0x2000209c

0800637c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006380:	4802      	ldr	r0, [pc, #8]	; (800638c <TIM1_UP_IRQHandler+0x10>)
 8006382:	f003 fc96 	bl	8009cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006386:	bf00      	nop
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20001f00 	.word	0x20001f00

08006390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <USART2_IRQHandler+0x10>)
 8006396:	f004 fbc3 	bl	800ab20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20002120 	.word	0x20002120

080063a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063a8:	4802      	ldr	r0, [pc, #8]	; (80063b4 <USART3_IRQHandler+0x10>)
 80063aa:	f004 fbb9 	bl	800ab20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20002018 	.word	0x20002018

080063b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b096      	sub	sp, #88	; 0x58
 80063c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	609a      	str	r2, [r3, #8]
 80063d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	609a      	str	r2, [r3, #8]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	611a      	str	r2, [r3, #16]
 80063f2:	615a      	str	r2, [r3, #20]
 80063f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063f6:	1d3b      	adds	r3, r7, #4
 80063f8:	2220      	movs	r2, #32
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f004 ff54 	bl	800b2aa <memset>

  htim1.Instance = TIM1;
 8006402:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <MX_TIM1_Init+0x138>)
 8006404:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <MX_TIM1_Init+0x13c>)
 8006406:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006408:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <MX_TIM1_Init+0x138>)
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800640e:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <MX_TIM1_Init+0x138>)
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 8006414:	4b39      	ldr	r3, [pc, #228]	; (80064fc <MX_TIM1_Init+0x138>)
 8006416:	224f      	movs	r2, #79	; 0x4f
 8006418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800641a:	4b38      	ldr	r3, [pc, #224]	; (80064fc <MX_TIM1_Init+0x138>)
 800641c:	2200      	movs	r2, #0
 800641e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <MX_TIM1_Init+0x138>)
 8006422:	2200      	movs	r2, #0
 8006424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006426:	4b35      	ldr	r3, [pc, #212]	; (80064fc <MX_TIM1_Init+0x138>)
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800642c:	4833      	ldr	r0, [pc, #204]	; (80064fc <MX_TIM1_Init+0x138>)
 800642e:	f003 f8b7 	bl	80095a0 <HAL_TIM_Base_Init>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8006438:	f7ff fe1a 	bl	8006070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800643c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006446:	4619      	mov	r1, r3
 8006448:	482c      	ldr	r0, [pc, #176]	; (80064fc <MX_TIM1_Init+0x138>)
 800644a:	f003 fdf9 	bl	800a040 <HAL_TIM_ConfigClockSource>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8006454:	f7ff fe0c 	bl	8006070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006458:	4828      	ldr	r0, [pc, #160]	; (80064fc <MX_TIM1_Init+0x138>)
 800645a:	f003 f943 	bl	80096e4 <HAL_TIM_PWM_Init>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8006464:	f7ff fe04 	bl	8006070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006468:	2300      	movs	r3, #0
 800646a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800646c:	2300      	movs	r3, #0
 800646e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006474:	4619      	mov	r1, r3
 8006476:	4821      	ldr	r0, [pc, #132]	; (80064fc <MX_TIM1_Init+0x138>)
 8006478:	f004 f958 	bl	800a72c <HAL_TIMEx_MasterConfigSynchronization>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8006482:	f7ff fdf5 	bl	8006070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006486:	2360      	movs	r3, #96	; 0x60
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800648e:	2300      	movs	r3, #0
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006492:	2300      	movs	r3, #0
 8006494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800649a:	2300      	movs	r3, #0
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a6:	2200      	movs	r2, #0
 80064a8:	4619      	mov	r1, r3
 80064aa:	4814      	ldr	r0, [pc, #80]	; (80064fc <MX_TIM1_Init+0x138>)
 80064ac:	f003 fd0a 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80064b6:	f7ff fddb 	bl	8006070 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80064d8:	1d3b      	adds	r3, r7, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4807      	ldr	r0, [pc, #28]	; (80064fc <MX_TIM1_Init+0x138>)
 80064de:	f004 f983 	bl	800a7e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80064e8:	f7ff fdc2 	bl	8006070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80064ec:	4803      	ldr	r0, [pc, #12]	; (80064fc <MX_TIM1_Init+0x138>)
 80064ee:	f000 f9d5 	bl	800689c <HAL_TIM_MspPostInit>

}
 80064f2:	bf00      	nop
 80064f4:	3758      	adds	r7, #88	; 0x58
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001f00 	.word	0x20001f00
 8006500:	40012c00 	.word	0x40012c00

08006504 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800650a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	609a      	str	r2, [r3, #8]
 8006516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006518:	f107 0320 	add.w	r3, r7, #32
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	611a      	str	r2, [r3, #16]
 8006530:	615a      	str	r2, [r3, #20]
 8006532:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8006534:	4b32      	ldr	r3, [pc, #200]	; (8006600 <MX_TIM2_Init+0xfc>)
 8006536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800653a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800653c:	4b30      	ldr	r3, [pc, #192]	; (8006600 <MX_TIM2_Init+0xfc>)
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006542:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <MX_TIM2_Init+0xfc>)
 8006544:	2200      	movs	r2, #0
 8006546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006548:	4b2d      	ldr	r3, [pc, #180]	; (8006600 <MX_TIM2_Init+0xfc>)
 800654a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800654e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006550:	4b2b      	ldr	r3, [pc, #172]	; (8006600 <MX_TIM2_Init+0xfc>)
 8006552:	2200      	movs	r2, #0
 8006554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006556:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <MX_TIM2_Init+0xfc>)
 8006558:	2200      	movs	r2, #0
 800655a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800655c:	4828      	ldr	r0, [pc, #160]	; (8006600 <MX_TIM2_Init+0xfc>)
 800655e:	f003 f81f 	bl	80095a0 <HAL_TIM_Base_Init>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8006568:	f7ff fd82 	bl	8006070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800656c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006576:	4619      	mov	r1, r3
 8006578:	4821      	ldr	r0, [pc, #132]	; (8006600 <MX_TIM2_Init+0xfc>)
 800657a:	f003 fd61 	bl	800a040 <HAL_TIM_ConfigClockSource>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8006584:	f7ff fd74 	bl	8006070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006588:	481d      	ldr	r0, [pc, #116]	; (8006600 <MX_TIM2_Init+0xfc>)
 800658a:	f003 f8ab 	bl	80096e4 <HAL_TIM_PWM_Init>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8006594:	f7ff fd6c 	bl	8006070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006598:	2300      	movs	r3, #0
 800659a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800659c:	2300      	movs	r3, #0
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065a0:	f107 0320 	add.w	r3, r7, #32
 80065a4:	4619      	mov	r1, r3
 80065a6:	4816      	ldr	r0, [pc, #88]	; (8006600 <MX_TIM2_Init+0xfc>)
 80065a8:	f004 f8c0 	bl	800a72c <HAL_TIMEx_MasterConfigSynchronization>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80065b2:	f7ff fd5d 	bl	8006070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065b6:	2360      	movs	r3, #96	; 0x60
 80065b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	2200      	movs	r2, #0
 80065ca:	4619      	mov	r1, r3
 80065cc:	480c      	ldr	r0, [pc, #48]	; (8006600 <MX_TIM2_Init+0xfc>)
 80065ce:	f003 fc79 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80065d8:	f7ff fd4a 	bl	8006070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	2204      	movs	r2, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4807      	ldr	r0, [pc, #28]	; (8006600 <MX_TIM2_Init+0xfc>)
 80065e4:	f003 fc6e 	bl	8009ec4 <HAL_TIM_PWM_ConfigChannel>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80065ee:	f7ff fd3f 	bl	8006070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80065f2:	4803      	ldr	r0, [pc, #12]	; (8006600 <MX_TIM2_Init+0xfc>)
 80065f4:	f000 f952 	bl	800689c <HAL_TIM_MspPostInit>

}
 80065f8:	bf00      	nop
 80065fa:	3738      	adds	r7, #56	; 0x38
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20001f48 	.word	0x20001f48

08006604 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f004 fe49 	bl	800b2aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8006620:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <MX_TIM3_Init+0xa0>)
 8006622:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <MX_TIM3_Init+0xa4>)
 8006624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006626:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <MX_TIM3_Init+0xa0>)
 8006628:	2200      	movs	r2, #0
 800662a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <MX_TIM3_Init+0xa0>)
 800662e:	2200      	movs	r2, #0
 8006630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <MX_TIM3_Init+0xa0>)
 8006634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <MX_TIM3_Init+0xa0>)
 800663c:	2200      	movs	r2, #0
 800663e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <MX_TIM3_Init+0xa0>)
 8006642:	2200      	movs	r2, #0
 8006644:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006646:	2301      	movs	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800664e:	2301      	movs	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006652:	2300      	movs	r3, #0
 8006654:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800665a:	2300      	movs	r3, #0
 800665c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800665e:	2301      	movs	r3, #1
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006662:	2300      	movs	r3, #0
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	4619      	mov	r1, r3
 8006670:	480c      	ldr	r0, [pc, #48]	; (80066a4 <MX_TIM3_Init+0xa0>)
 8006672:	f003 f9ef 	bl	8009a54 <HAL_TIM_Encoder_Init>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800667c:	f7ff fcf8 	bl	8006070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006680:	2300      	movs	r3, #0
 8006682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006684:	2300      	movs	r3, #0
 8006686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4805      	ldr	r0, [pc, #20]	; (80066a4 <MX_TIM3_Init+0xa0>)
 800668e:	f004 f84d 	bl	800a72c <HAL_TIMEx_MasterConfigSynchronization>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006698:	f7ff fcea 	bl	8006070 <Error_Handler>
  }

}
 800669c:	bf00      	nop
 800669e:	3730      	adds	r7, #48	; 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20001eb8 	.word	0x20001eb8
 80066a8:	40000400 	.word	0x40000400

080066ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	2224      	movs	r2, #36	; 0x24
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f004 fdf5 	bl	800b2aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066c0:	1d3b      	adds	r3, r7, #4
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <MX_TIM4_Init+0xa0>)
 80066ca:	4a21      	ldr	r2, [pc, #132]	; (8006750 <MX_TIM4_Init+0xa4>)
 80066cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <MX_TIM4_Init+0xa0>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <MX_TIM4_Init+0xa0>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80066da:	4b1c      	ldr	r3, [pc, #112]	; (800674c <MX_TIM4_Init+0xa0>)
 80066dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e2:	4b1a      	ldr	r3, [pc, #104]	; (800674c <MX_TIM4_Init+0xa0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <MX_TIM4_Init+0xa0>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80066ee:	2301      	movs	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80066f6:	2301      	movs	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006702:	2300      	movs	r3, #0
 8006704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006706:	2301      	movs	r3, #1
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800670a:	2300      	movs	r3, #0
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	4619      	mov	r1, r3
 8006718:	480c      	ldr	r0, [pc, #48]	; (800674c <MX_TIM4_Init+0xa0>)
 800671a:	f003 f99b 	bl	8009a54 <HAL_TIM_Encoder_Init>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006724:	f7ff fca4 	bl	8006070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006728:	2300      	movs	r3, #0
 800672a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4805      	ldr	r0, [pc, #20]	; (800674c <MX_TIM4_Init+0xa0>)
 8006736:	f003 fff9 	bl	800a72c <HAL_TIMEx_MasterConfigSynchronization>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006740:	f7ff fc96 	bl	8006070 <Error_Handler>
  }

}
 8006744:	bf00      	nop
 8006746:	3730      	adds	r7, #48	; 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20001e70 	.word	0x20001e70
 8006750:	40000800 	.word	0x40000800

08006754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <HAL_TIM_Base_MspInit+0x68>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d114      	bne.n	8006790 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006766:	4b16      	ldr	r3, [pc, #88]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 800676c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006770:	6193      	str	r3, [r2, #24]
 8006772:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 800677e:	2200      	movs	r2, #0
 8006780:	210f      	movs	r1, #15
 8006782:	2019      	movs	r0, #25
 8006784:	f000 fc57 	bl	8007036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006788:	2019      	movs	r0, #25
 800678a:	f000 fc70 	bl	800706e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800678e:	e010      	b.n	80067b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d10b      	bne.n	80067b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	61d3      	str	r3, [r2, #28]
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_TIM_Base_MspInit+0x6c>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40021000 	.word	0x40021000

080067c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067cc:	f107 0318 	add.w	r3, r7, #24
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2a      	ldr	r2, [pc, #168]	; (8006888 <HAL_TIM_Encoder_MspInit+0xc4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d124      	bne.n	800682e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80067e4:	4b29      	ldr	r3, [pc, #164]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4a28      	ldr	r2, [pc, #160]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	61d3      	str	r3, [r2, #28]
 80067f0:	4b26      	ldr	r3, [pc, #152]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067fc:	4b23      	ldr	r3, [pc, #140]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	4a22      	ldr	r2, [pc, #136]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006802:	f043 0304 	orr.w	r3, r3, #4
 8006806:	6193      	str	r3, [r2, #24]
 8006808:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_1A_MCU_Pin|ENC_1B_MCU_Pin;
 8006814:	23c0      	movs	r3, #192	; 0xc0
 8006816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681c:	2300      	movs	r3, #0
 800681e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006820:	f107 0318 	add.w	r3, r7, #24
 8006824:	4619      	mov	r1, r3
 8006826:	481a      	ldr	r0, [pc, #104]	; (8006890 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006828:	f001 f8a0 	bl	800796c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800682c:	e028      	b.n	8006880 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a18      	ldr	r2, [pc, #96]	; (8006894 <HAL_TIM_Encoder_MspInit+0xd0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d123      	bne.n	8006880 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 800683e:	f043 0304 	orr.w	r3, r3, #4
 8006842:	61d3      	str	r3, [r2, #28]
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	4a0d      	ldr	r2, [pc, #52]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006856:	f043 0308 	orr.w	r3, r3, #8
 800685a:	6193      	str	r3, [r2, #24]
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_TIM_Encoder_MspInit+0xc8>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_2B_MCU_Pin|ENC_2A_MCU_Pin;
 8006868:	23c0      	movs	r3, #192	; 0xc0
 800686a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006870:	2300      	movs	r3, #0
 8006872:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	4619      	mov	r1, r3
 800687a:	4807      	ldr	r0, [pc, #28]	; (8006898 <HAL_TIM_Encoder_MspInit+0xd4>)
 800687c:	f001 f876 	bl	800796c <HAL_GPIO_Init>
}
 8006880:	bf00      	nop
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40000400 	.word	0x40000400
 800688c:	40021000 	.word	0x40021000
 8006890:	40010800 	.word	0x40010800
 8006894:	40000800 	.word	0x40000800
 8006898:	40010c00 	.word	0x40010c00

0800689c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <HAL_TIM_MspPostInit+0x98>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d119      	bne.n	80068f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068bc:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 80068c2:	f043 0304 	orr.w	r3, r3, #4
 80068c6:	6193      	str	r3, [r2, #24]
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_Pin;
 80068d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068da:	2302      	movs	r3, #2
 80068dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068de:	2302      	movs	r3, #2
 80068e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80068e2:	f107 0310 	add.w	r3, r7, #16
 80068e6:	4619      	mov	r1, r3
 80068e8:	4814      	ldr	r0, [pc, #80]	; (800693c <HAL_TIM_MspPostInit+0xa0>)
 80068ea:	f001 f83f 	bl	800796c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80068ee:	e01c      	b.n	800692a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d117      	bne.n	800692a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	4a0e      	ldr	r2, [pc, #56]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 8006900:	f043 0304 	orr.w	r3, r3, #4
 8006904:	6193      	str	r3, [r2, #24]
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <HAL_TIM_MspPostInit+0x9c>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MTR1_PWM_MCU_Pin|MTR2_PWM_MCU_Pin;
 8006912:	2303      	movs	r3, #3
 8006914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006916:	2302      	movs	r3, #2
 8006918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691a:	2302      	movs	r3, #2
 800691c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	4619      	mov	r1, r3
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <HAL_TIM_MspPostInit+0xa0>)
 8006926:	f001 f821 	bl	800796c <HAL_GPIO_Init>
}
 800692a:	bf00      	nop
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40012c00 	.word	0x40012c00
 8006938:	40021000 	.word	0x40021000
 800693c:	40010800 	.word	0x40010800

08006940 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006944:	4b11      	ldr	r3, [pc, #68]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <MX_USART1_UART_Init+0x50>)
 8006948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <MX_USART1_UART_Init+0x4c>)
 800694c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006952:	4b0e      	ldr	r3, [pc, #56]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006954:	2200      	movs	r2, #0
 8006956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006958:	4b0c      	ldr	r3, [pc, #48]	; (800698c <MX_USART1_UART_Init+0x4c>)
 800695a:	2200      	movs	r2, #0
 800695c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006960:	2200      	movs	r2, #0
 8006962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006966:	220c      	movs	r2, #12
 8006968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <MX_USART1_UART_Init+0x4c>)
 800696c:	2200      	movs	r2, #0
 800696e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006976:	4805      	ldr	r0, [pc, #20]	; (800698c <MX_USART1_UART_Init+0x4c>)
 8006978:	f003 ff99 	bl	800a8ae <HAL_UART_Init>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006982:	f7ff fb75 	bl	8006070 <Error_Handler>
  }

}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200020e0 	.word	0x200020e0
 8006990:	40013800 	.word	0x40013800

08006994 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <MX_USART2_UART_Init+0x50>)
 800699c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069ba:	220c      	movs	r2, #12
 80069bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069ca:	4805      	ldr	r0, [pc, #20]	; (80069e0 <MX_USART2_UART_Init+0x4c>)
 80069cc:	f003 ff6f 	bl	800a8ae <HAL_UART_Init>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80069d6:	f7ff fb4b 	bl	8006070 <Error_Handler>
  }

}
 80069da:	bf00      	nop
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20002120 	.word	0x20002120
 80069e4:	40004400 	.word	0x40004400

080069e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80069ec:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 80069ee:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <MX_USART3_UART_Init+0x50>)
 80069f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 80069f4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80069f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80069fa:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a0e:	220c      	movs	r2, #12
 8006a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <MX_USART3_UART_Init+0x4c>)
 8006a20:	f003 ff45 	bl	800a8ae <HAL_UART_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006a2a:	f7ff fb21 	bl	8006070 <Error_Handler>
  }

}
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20002018 	.word	0x20002018
 8006a38:	40004800 	.word	0x40004800

08006a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a44:	f107 0320 	add.w	r3, r7, #32
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a60      	ldr	r2, [pc, #384]	; (8006bd8 <HAL_UART_MspInit+0x19c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d132      	bne.n	8006ac2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a5c:	4b5f      	ldr	r3, [pc, #380]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	4a5e      	ldr	r2, [pc, #376]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a66:	6193      	str	r3, [r2, #24]
 8006a68:	4b5c      	ldr	r3, [pc, #368]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	4a58      	ldr	r2, [pc, #352]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a7a:	f043 0304 	orr.w	r3, r3, #4
 8006a7e:	6193      	str	r3, [r2, #24]
 8006a80:	4b56      	ldr	r3, [pc, #344]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BLUE_RX_Pin;
 8006a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a92:	2302      	movs	r3, #2
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a96:	2303      	movs	r3, #3
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUE_RX_GPIO_Port, &GPIO_InitStruct);
 8006a9a:	f107 0320 	add.w	r3, r7, #32
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	484f      	ldr	r0, [pc, #316]	; (8006be0 <HAL_UART_MspInit+0x1a4>)
 8006aa2:	f000 ff63 	bl	800796c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_TX_Pin;
 8006aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BLUE_TX_GPIO_Port, &GPIO_InitStruct);
 8006ab4:	f107 0320 	add.w	r3, r7, #32
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4849      	ldr	r0, [pc, #292]	; (8006be0 <HAL_UART_MspInit+0x1a4>)
 8006abc:	f000 ff56 	bl	800796c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006ac0:	e126      	b.n	8006d10 <HAL_UART_MspInit+0x2d4>
  else if(uartHandle->Instance==USART2)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a47      	ldr	r2, [pc, #284]	; (8006be4 <HAL_UART_MspInit+0x1a8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f040 8095 	bne.w	8006bf8 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ace:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4a42      	ldr	r2, [pc, #264]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad8:	61d3      	str	r3, [r2, #28]
 8006ada:	4b40      	ldr	r3, [pc, #256]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae6:	4b3d      	ldr	r3, [pc, #244]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4a3c      	ldr	r2, [pc, #240]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006aec:	f043 0304 	orr.w	r3, r3, #4
 8006af0:	6193      	str	r3, [r2, #24]
 8006af2:	4b3a      	ldr	r3, [pc, #232]	; (8006bdc <HAL_UART_MspInit+0x1a0>)
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP_RX_MCU_Pin;
 8006afe:	2304      	movs	r3, #4
 8006b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b02:	2302      	movs	r3, #2
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b06:	2303      	movs	r3, #3
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESP_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8006b0a:	f107 0320 	add.w	r3, r7, #32
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4833      	ldr	r0, [pc, #204]	; (8006be0 <HAL_UART_MspInit+0x1a4>)
 8006b12:	f000 ff2b 	bl	800796c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_TX_MCU_Pin;
 8006b16:	2308      	movs	r3, #8
 8006b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(ESP_TX_MCU_GPIO_Port, &GPIO_InitStruct);
 8006b22:	f107 0320 	add.w	r3, r7, #32
 8006b26:	4619      	mov	r1, r3
 8006b28:	482d      	ldr	r0, [pc, #180]	; (8006be0 <HAL_UART_MspInit+0x1a4>)
 8006b2a:	f000 ff1f 	bl	800796c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b30:	4a2e      	ldr	r2, [pc, #184]	; (8006bec <HAL_UART_MspInit+0x1b0>)
 8006b32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b34:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3a:	4b2b      	ldr	r3, [pc, #172]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b40:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b46:	4b28      	ldr	r3, [pc, #160]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b4c:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006b52:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b58:	4b23      	ldr	r3, [pc, #140]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b5e:	4822      	ldr	r0, [pc, #136]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b60:	f000 faa0 	bl	80070a4 <HAL_DMA_Init>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8006b6a:	f7ff fa81 	bl	8006070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b72:	635a      	str	r2, [r3, #52]	; 0x34
 8006b74:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <HAL_UART_MspInit+0x1ac>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006b7a:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_UART_MspInit+0x1b8>)
 8006b7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b82:	2210      	movs	r2, #16
 8006b84:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b8c:	4b18      	ldr	r3, [pc, #96]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b8e:	2280      	movs	r2, #128	; 0x80
 8006b90:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b92:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006b9e:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006baa:	4811      	ldr	r0, [pc, #68]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006bac:	f000 fa7a 	bl	80070a4 <HAL_DMA_Init>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8006bb6:	f7ff fa5b 	bl	8006070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a0c      	ldr	r2, [pc, #48]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc0:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <HAL_UART_MspInit+0x1b4>)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	2026      	movs	r0, #38	; 0x26
 8006bcc:	f000 fa33 	bl	8007036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006bd0:	2026      	movs	r0, #38	; 0x26
 8006bd2:	f000 fa4c 	bl	800706e <HAL_NVIC_EnableIRQ>
}
 8006bd6:	e09b      	b.n	8006d10 <HAL_UART_MspInit+0x2d4>
 8006bd8:	40013800 	.word	0x40013800
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40010800 	.word	0x40010800
 8006be4:	40004400 	.word	0x40004400
 8006be8:	20001f90 	.word	0x20001f90
 8006bec:	4002006c 	.word	0x4002006c
 8006bf0:	2000209c 	.word	0x2000209c
 8006bf4:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a46      	ldr	r2, [pc, #280]	; (8006d18 <HAL_UART_MspInit+0x2dc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	f040 8086 	bne.w	8006d10 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c04:	4b45      	ldr	r3, [pc, #276]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4a44      	ldr	r2, [pc, #272]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c0e:	61d3      	str	r3, [r2, #28]
 8006c10:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	4a3e      	ldr	r2, [pc, #248]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c22:	f043 0308 	orr.w	r3, r3, #8
 8006c26:	6193      	str	r3, [r2, #24]
 8006c28:	4b3c      	ldr	r3, [pc, #240]	; (8006d1c <HAL_UART_MspInit+0x2e0>)
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RF_RXD_Pin;
 8006c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RF_RXD_GPIO_Port, &GPIO_InitStruct);
 8006c42:	f107 0320 	add.w	r3, r7, #32
 8006c46:	4619      	mov	r1, r3
 8006c48:	4835      	ldr	r0, [pc, #212]	; (8006d20 <HAL_UART_MspInit+0x2e4>)
 8006c4a:	f000 fe8f 	bl	800796c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RF_TXD_Pin;
 8006c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RF_TXD_GPIO_Port, &GPIO_InitStruct);
 8006c5c:	f107 0320 	add.w	r3, r7, #32
 8006c60:	4619      	mov	r1, r3
 8006c62:	482f      	ldr	r0, [pc, #188]	; (8006d20 <HAL_UART_MspInit+0x2e4>)
 8006c64:	f000 fe82 	bl	800796c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006c68:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c6a:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <HAL_UART_MspInit+0x2ec>)
 8006c6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c6e:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c7c:	2280      	movs	r2, #128	; 0x80
 8006c7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c80:	4b28      	ldr	r3, [pc, #160]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c86:	4b27      	ldr	r3, [pc, #156]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006c98:	4822      	ldr	r0, [pc, #136]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006c9a:	f000 fa03 	bl	80070a4 <HAL_DMA_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8006ca4:	f7ff f9e4 	bl	8006070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34
 8006cae:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <HAL_UART_MspInit+0x2e8>)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <HAL_UART_MspInit+0x2f4>)
 8006cb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cc8:	2280      	movs	r2, #128	; 0x80
 8006cca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ccc:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cd2:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006ce4:	4811      	ldr	r0, [pc, #68]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006ce6:	f000 f9dd 	bl	80070a4 <HAL_DMA_Init>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8006cf0:	f7ff f9be 	bl	8006070 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <HAL_UART_MspInit+0x2f0>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	2027      	movs	r0, #39	; 0x27
 8006d06:	f000 f996 	bl	8007036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d0a:	2027      	movs	r0, #39	; 0x27
 8006d0c:	f000 f9af 	bl	800706e <HAL_NVIC_EnableIRQ>
}
 8006d10:	bf00      	nop
 8006d12:	3730      	adds	r7, #48	; 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40004800 	.word	0x40004800
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40010c00 	.word	0x40010c00
 8006d24:	20001fd4 	.word	0x20001fd4
 8006d28:	40020030 	.word	0x40020030
 8006d2c:	20002058 	.word	0x20002058
 8006d30:	4002001c 	.word	0x4002001c

08006d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006d34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006d36:	e003      	b.n	8006d40 <LoopCopyDataInit>

08006d38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006d3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006d3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006d3e:	3104      	adds	r1, #4

08006d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006d40:	480a      	ldr	r0, [pc, #40]	; (8006d6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006d44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006d46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006d48:	d3f6      	bcc.n	8006d38 <CopyDataInit>
  ldr r2, =_sbss
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006d4c:	e002      	b.n	8006d54 <LoopFillZerobss>

08006d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006d4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006d50:	f842 3b04 	str.w	r3, [r2], #4

08006d54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006d56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006d58:	d3f9      	bcc.n	8006d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d5a:	f7ff fb2d 	bl	80063b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d5e:	f004 fa75 	bl	800b24c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d62:	f7ff f923 	bl	8005fac <main>
  bx lr
 8006d66:	4770      	bx	lr
  ldr r3, =_sidata
 8006d68:	0800bb38 	.word	0x0800bb38
  ldr r0, =_sdata
 8006d6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006d70:	20001214 	.word	0x20001214
  ldr r2, =_sbss
 8006d74:	20001218 	.word	0x20001218
  ldr r3, = _ebss
 8006d78:	20002188 	.word	0x20002188

08006d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d7c:	e7fe      	b.n	8006d7c <ADC1_2_IRQHandler>
	...

08006d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d84:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <HAL_Init+0x28>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a07      	ldr	r2, [pc, #28]	; (8006da8 <HAL_Init+0x28>)
 8006d8a:	f043 0310 	orr.w	r3, r3, #16
 8006d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d90:	2003      	movs	r0, #3
 8006d92:	f000 f945 	bl	8007020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d96:	2000      	movs	r0, #0
 8006d98:	f000 f808 	bl	8006dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d9c:	f7ff fa6c 	bl	8006278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40022000 	.word	0x40022000

08006dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006db4:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <HAL_InitTick+0x54>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <HAL_InitTick+0x58>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f95d 	bl	800708a <HAL_SYSTICK_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e00e      	b.n	8006df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d80a      	bhi.n	8006df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006de0:	2200      	movs	r2, #0
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	f000 f925 	bl	8007036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <HAL_InitTick+0x5c>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200011a0 	.word	0x200011a0
 8006e04:	200011a8 	.word	0x200011a8
 8006e08:	200011a4 	.word	0x200011a4

08006e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_IncTick+0x1c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_IncTick+0x20>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4a03      	ldr	r2, [pc, #12]	; (8006e2c <HAL_IncTick+0x20>)
 8006e1e:	6013      	str	r3, [r2, #0]
}
 8006e20:	bf00      	nop
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr
 8006e28:	200011a8 	.word	0x200011a8
 8006e2c:	20002160 	.word	0x20002160

08006e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return uwTick;
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <HAL_GetTick+0x10>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr
 8006e40:	20002160 	.word	0x20002160

08006e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e4c:	f7ff fff0 	bl	8006e30 <HAL_GetTick>
 8006e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d005      	beq.n	8006e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <HAL_Delay+0x40>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e6a:	bf00      	nop
 8006e6c:	f7ff ffe0 	bl	8006e30 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d8f7      	bhi.n	8006e6c <HAL_Delay+0x28>
  {
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200011a8 	.word	0x200011a8

08006e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <__NVIC_SetPriorityGrouping+0x44>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eba:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <__NVIC_SetPriorityGrouping+0x44>)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	60d3      	str	r3, [r2, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	e000ed00 	.word	0xe000ed00

08006ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	0a1b      	lsrs	r3, r3, #8
 8006eda:	f003 0307 	and.w	r3, r3, #7
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	e000ed00 	.word	0xe000ed00

08006eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	db0b      	blt.n	8006f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f003 021f 	and.w	r2, r3, #31
 8006f04:	4906      	ldr	r1, [pc, #24]	; (8006f20 <__NVIC_EnableIRQ+0x34>)
 8006f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	e000e100 	.word	0xe000e100

08006f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db0a      	blt.n	8006f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	490c      	ldr	r1, [pc, #48]	; (8006f70 <__NVIC_SetPriority+0x4c>)
 8006f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f42:	0112      	lsls	r2, r2, #4
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	440b      	add	r3, r1
 8006f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f4c:	e00a      	b.n	8006f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	4908      	ldr	r1, [pc, #32]	; (8006f74 <__NVIC_SetPriority+0x50>)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	3b04      	subs	r3, #4
 8006f5c:	0112      	lsls	r2, r2, #4
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	440b      	add	r3, r1
 8006f62:	761a      	strb	r2, [r3, #24]
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000e100 	.word	0xe000e100
 8006f74:	e000ed00 	.word	0xe000ed00

08006f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f1c3 0307 	rsb	r3, r3, #7
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	bf28      	it	cs
 8006f96:	2304      	movcs	r3, #4
 8006f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d902      	bls.n	8006fa8 <NVIC_EncodePriority+0x30>
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3b03      	subs	r3, #3
 8006fa6:	e000      	b.n	8006faa <NVIC_EncodePriority+0x32>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fac:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43da      	mvns	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	401a      	ands	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	43d9      	mvns	r1, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fd0:	4313      	orrs	r3, r2
         );
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3724      	adds	r7, #36	; 0x24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fec:	d301      	bcc.n	8006ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e00f      	b.n	8007012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ff2:	4a0a      	ldr	r2, [pc, #40]	; (800701c <SysTick_Config+0x40>)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ffa:	210f      	movs	r1, #15
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	f7ff ff90 	bl	8006f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <SysTick_Config+0x40>)
 8007006:	2200      	movs	r2, #0
 8007008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <SysTick_Config+0x40>)
 800700c:	2207      	movs	r2, #7
 800700e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	e000e010 	.word	0xe000e010

08007020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff ff2d 	bl	8006e88 <__NVIC_SetPriorityGrouping>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007036:	b580      	push	{r7, lr}
 8007038:	b086      	sub	sp, #24
 800703a:	af00      	add	r7, sp, #0
 800703c:	4603      	mov	r3, r0
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007048:	f7ff ff42 	bl	8006ed0 <__NVIC_GetPriorityGrouping>
 800704c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	6978      	ldr	r0, [r7, #20]
 8007054:	f7ff ff90 	bl	8006f78 <NVIC_EncodePriority>
 8007058:	4602      	mov	r2, r0
 800705a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff ff5f 	bl	8006f24 <__NVIC_SetPriority>
}
 8007066:	bf00      	nop
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	4603      	mov	r3, r0
 8007076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff ff35 	bl	8006eec <__NVIC_EnableIRQ>
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff ffa2 	bl	8006fdc <SysTick_Config>
 8007098:	4603      	mov	r3, r0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e043      	b.n	8007142 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	4b22      	ldr	r3, [pc, #136]	; (800714c <HAL_DMA_Init+0xa8>)
 80070c2:	4413      	add	r3, r2
 80070c4:	4a22      	ldr	r2, [pc, #136]	; (8007150 <HAL_DMA_Init+0xac>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	009a      	lsls	r2, r3, #2
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <HAL_DMA_Init+0xb0>)
 80070d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80070ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80070f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80070fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007108:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007114:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr
 800714c:	bffdfff8 	.word	0xbffdfff8
 8007150:	cccccccd 	.word	0xcccccccd
 8007154:	40020000 	.word	0x40020000

08007158 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_DMA_Start_IT+0x20>
 8007174:	2302      	movs	r3, #2
 8007176:	e04a      	b.n	800720e <HAL_DMA_Start_IT+0xb6>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007186:	2b01      	cmp	r3, #1
 8007188:	d13a      	bne.n	8007200 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f9ae 	bl	8007510 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 020e 	orr.w	r2, r2, #14
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e00f      	b.n	80071ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0204 	bic.w	r2, r2, #4
 80071dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 020a 	orr.w	r2, r2, #10
 80071ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e005      	b.n	800720c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007208:	2302      	movs	r3, #2
 800720a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800722a:	2b02      	cmp	r3, #2
 800722c:	d005      	beq.n	800723a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2204      	movs	r2, #4
 8007232:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
 8007238:	e051      	b.n	80072de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 020e 	bic.w	r2, r2, #14
 8007248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <HAL_DMA_Abort_IT+0xd0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d029      	beq.n	80072b8 <HAL_DMA_Abort_IT+0xa0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a20      	ldr	r2, [pc, #128]	; (80072ec <HAL_DMA_Abort_IT+0xd4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x9c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <HAL_DMA_Abort_IT+0xd8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01a      	beq.n	80072ae <HAL_DMA_Abort_IT+0x96>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <HAL_DMA_Abort_IT+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d012      	beq.n	80072a8 <HAL_DMA_Abort_IT+0x90>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <HAL_DMA_Abort_IT+0xe0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00a      	beq.n	80072a2 <HAL_DMA_Abort_IT+0x8a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <HAL_DMA_Abort_IT+0xe4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d102      	bne.n	800729c <HAL_DMA_Abort_IT+0x84>
 8007296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800729a:	e00e      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 800729c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072a0:	e00b      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 80072a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072a6:	e008      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 80072a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ac:	e005      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 80072ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b2:	e002      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 80072b4:	2310      	movs	r3, #16
 80072b6:	e000      	b.n	80072ba <HAL_DMA_Abort_IT+0xa2>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <HAL_DMA_Abort_IT+0xe8>)
 80072bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
    } 
  }
  return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40020008 	.word	0x40020008
 80072ec:	4002001c 	.word	0x4002001c
 80072f0:	40020030 	.word	0x40020030
 80072f4:	40020044 	.word	0x40020044
 80072f8:	40020058 	.word	0x40020058
 80072fc:	4002006c 	.word	0x4002006c
 8007300:	40020000 	.word	0x40020000

08007304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	2204      	movs	r2, #4
 8007322:	409a      	lsls	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d04f      	beq.n	80073cc <HAL_DMA_IRQHandler+0xc8>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04a      	beq.n	80073cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d107      	bne.n	8007354 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a66      	ldr	r2, [pc, #408]	; (80074f4 <HAL_DMA_IRQHandler+0x1f0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d029      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xae>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a65      	ldr	r2, [pc, #404]	; (80074f8 <HAL_DMA_IRQHandler+0x1f4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_DMA_IRQHandler+0xaa>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a63      	ldr	r2, [pc, #396]	; (80074fc <HAL_DMA_IRQHandler+0x1f8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01a      	beq.n	80073a8 <HAL_DMA_IRQHandler+0xa4>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a62      	ldr	r2, [pc, #392]	; (8007500 <HAL_DMA_IRQHandler+0x1fc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d012      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x9e>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a60      	ldr	r2, [pc, #384]	; (8007504 <HAL_DMA_IRQHandler+0x200>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00a      	beq.n	800739c <HAL_DMA_IRQHandler+0x98>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a5f      	ldr	r2, [pc, #380]	; (8007508 <HAL_DMA_IRQHandler+0x204>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d102      	bne.n	8007396 <HAL_DMA_IRQHandler+0x92>
 8007390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007394:	e00e      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 8007396:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800739a:	e00b      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 800739c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073a0:	e008      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 80073a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073a6:	e005      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 80073a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ac:	e002      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 80073ae:	2340      	movs	r3, #64	; 0x40
 80073b0:	e000      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb0>
 80073b2:	2304      	movs	r3, #4
 80073b4:	4a55      	ldr	r2, [pc, #340]	; (800750c <HAL_DMA_IRQHandler+0x208>)
 80073b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8094 	beq.w	80074ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80073ca:	e08e      	b.n	80074ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	2202      	movs	r2, #2
 80073d2:	409a      	lsls	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d056      	beq.n	800748a <HAL_DMA_IRQHandler+0x186>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d051      	beq.n	800748a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 020a 	bic.w	r2, r2, #10
 8007402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a38      	ldr	r2, [pc, #224]	; (80074f4 <HAL_DMA_IRQHandler+0x1f0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d029      	beq.n	800746a <HAL_DMA_IRQHandler+0x166>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a37      	ldr	r2, [pc, #220]	; (80074f8 <HAL_DMA_IRQHandler+0x1f4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d022      	beq.n	8007466 <HAL_DMA_IRQHandler+0x162>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a35      	ldr	r2, [pc, #212]	; (80074fc <HAL_DMA_IRQHandler+0x1f8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01a      	beq.n	8007460 <HAL_DMA_IRQHandler+0x15c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a34      	ldr	r2, [pc, #208]	; (8007500 <HAL_DMA_IRQHandler+0x1fc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d012      	beq.n	800745a <HAL_DMA_IRQHandler+0x156>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a32      	ldr	r2, [pc, #200]	; (8007504 <HAL_DMA_IRQHandler+0x200>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00a      	beq.n	8007454 <HAL_DMA_IRQHandler+0x150>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a31      	ldr	r2, [pc, #196]	; (8007508 <HAL_DMA_IRQHandler+0x204>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d102      	bne.n	800744e <HAL_DMA_IRQHandler+0x14a>
 8007448:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800744c:	e00e      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 800744e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007452:	e00b      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 8007454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007458:	e008      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 800745a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800745e:	e005      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 8007460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007464:	e002      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 8007466:	2320      	movs	r3, #32
 8007468:	e000      	b.n	800746c <HAL_DMA_IRQHandler+0x168>
 800746a:	2302      	movs	r3, #2
 800746c:	4a27      	ldr	r2, [pc, #156]	; (800750c <HAL_DMA_IRQHandler+0x208>)
 800746e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d034      	beq.n	80074ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007488:	e02f      	b.n	80074ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	2208      	movs	r2, #8
 8007490:	409a      	lsls	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d028      	beq.n	80074ec <HAL_DMA_IRQHandler+0x1e8>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d023      	beq.n	80074ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 020e 	bic.w	r2, r2, #14
 80074b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074bc:	2101      	movs	r1, #1
 80074be:	fa01 f202 	lsl.w	r2, r1, r2
 80074c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
    }
  }
  return;
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
}
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40020008 	.word	0x40020008
 80074f8:	4002001c 	.word	0x4002001c
 80074fc:	40020030 	.word	0x40020030
 8007500:	40020044 	.word	0x40020044
 8007504:	40020058 	.word	0x40020058
 8007508:	4002006c 	.word	0x4002006c
 800750c:	40020000 	.word	0x40020000

08007510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	2101      	movs	r1, #1
 8007528:	fa01 f202 	lsl.w	r2, r1, r2
 800752c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b10      	cmp	r3, #16
 800753c:	d108      	bne.n	8007550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800754e:	e007      	b.n	8007560 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
	...

0800756c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800756c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_FLASH_Program+0xd8>)
 8007588:	7e1b      	ldrb	r3, [r3, #24]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_FLASH_Program+0x26>
 800758e:	2302      	movs	r3, #2
 8007590:	e054      	b.n	800763c <HAL_FLASH_Program+0xd0>
 8007592:	4b2c      	ldr	r3, [pc, #176]	; (8007644 <HAL_FLASH_Program+0xd8>)
 8007594:	2201      	movs	r2, #1
 8007596:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007598:	f24c 3050 	movw	r0, #50000	; 0xc350
 800759c:	f000 f8a8 	bl	80076f0 <FLASH_WaitForLastOperation>
 80075a0:	4603      	mov	r3, r0
 80075a2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d144      	bne.n	8007634 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d102      	bne.n	80075b6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80075b0:	2301      	movs	r3, #1
 80075b2:	757b      	strb	r3, [r7, #21]
 80075b4:	e007      	b.n	80075c6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d102      	bne.n	80075c2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80075bc:	2302      	movs	r3, #2
 80075be:	757b      	strb	r3, [r7, #21]
 80075c0:	e001      	b.n	80075c6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80075c2:	2304      	movs	r3, #4
 80075c4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	75bb      	strb	r3, [r7, #22]
 80075ca:	e02d      	b.n	8007628 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80075cc:	7dbb      	ldrb	r3, [r7, #22]
 80075ce:	005a      	lsls	r2, r3, #1
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	eb02 0c03 	add.w	ip, r2, r3
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	0119      	lsls	r1, r3, #4
 80075da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075de:	f1c1 0620 	rsb	r6, r1, #32
 80075e2:	f1a1 0020 	sub.w	r0, r1, #32
 80075e6:	fa22 f401 	lsr.w	r4, r2, r1
 80075ea:	fa03 f606 	lsl.w	r6, r3, r6
 80075ee:	4334      	orrs	r4, r6
 80075f0:	fa23 f000 	lsr.w	r0, r3, r0
 80075f4:	4304      	orrs	r4, r0
 80075f6:	fa23 f501 	lsr.w	r5, r3, r1
 80075fa:	b2a3      	uxth	r3, r4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4660      	mov	r0, ip
 8007600:	f000 f85a 	bl	80076b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007604:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007608:	f000 f872 	bl	80076f0 <FLASH_WaitForLastOperation>
 800760c:	4603      	mov	r3, r0
 800760e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007610:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <HAL_FLASH_Program+0xdc>)
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <HAL_FLASH_Program+0xdc>)
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007622:	7dbb      	ldrb	r3, [r7, #22]
 8007624:	3301      	adds	r3, #1
 8007626:	75bb      	strb	r3, [r7, #22]
 8007628:	7dba      	ldrb	r2, [r7, #22]
 800762a:	7d7b      	ldrb	r3, [r7, #21]
 800762c:	429a      	cmp	r2, r3
 800762e:	d3cd      	bcc.n	80075cc <HAL_FLASH_Program+0x60>
 8007630:	e000      	b.n	8007634 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007632:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <HAL_FLASH_Program+0xd8>)
 8007636:	2200      	movs	r2, #0
 8007638:	761a      	strb	r2, [r3, #24]

  return status;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
}
 800763c:	4618      	mov	r0, r3
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007644:	20002168 	.word	0x20002168
 8007648:	40022000 	.word	0x40022000

0800764c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <HAL_FLASH_Unlock+0x40>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_FLASH_Unlock+0x40>)
 8007664:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <HAL_FLASH_Unlock+0x44>)
 8007666:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <HAL_FLASH_Unlock+0x40>)
 800766a:	4a0a      	ldr	r2, [pc, #40]	; (8007694 <HAL_FLASH_Unlock+0x48>)
 800766c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <HAL_FLASH_Unlock+0x40>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800767e:	79fb      	ldrb	r3, [r7, #7]
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40022000 	.word	0x40022000
 8007690:	45670123 	.word	0x45670123
 8007694:	cdef89ab 	.word	0xcdef89ab

08007698 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <HAL_FLASH_Lock+0x1c>)
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <HAL_FLASH_Lock+0x1c>)
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40022000 	.word	0x40022000

080076b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <FLASH_Program_HalfWord+0x30>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80076ca:	4b08      	ldr	r3, [pc, #32]	; (80076ec <FLASH_Program_HalfWord+0x34>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	4a07      	ldr	r2, [pc, #28]	; (80076ec <FLASH_Program_HalfWord+0x34>)
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	887a      	ldrh	r2, [r7, #2]
 80076da:	801a      	strh	r2, [r3, #0]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20002168 	.word	0x20002168
 80076ec:	40022000 	.word	0x40022000

080076f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80076f8:	f7ff fb9a 	bl	8006e30 <HAL_GetTick>
 80076fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80076fe:	e010      	b.n	8007722 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d00c      	beq.n	8007722 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <FLASH_WaitForLastOperation+0x2e>
 800770e:	f7ff fb8f 	bl	8006e30 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d201      	bcs.n	8007722 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e025      	b.n	800776e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e8      	bne.n	8007700 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800772e:	4b12      	ldr	r3, [pc, #72]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 800773c:	2220      	movs	r2, #32
 800773e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10b      	bne.n	8007764 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007754:	2b00      	cmp	r3, #0
 8007756:	d105      	bne.n	8007764 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <FLASH_WaitForLastOperation+0x88>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007764:	f000 f80a 	bl	800777c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40022000 	.word	0x40022000

0800777c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007786:	4b23      	ldr	r3, [pc, #140]	; (8007814 <FLASH_SetErrorCode+0x98>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007792:	4b21      	ldr	r3, [pc, #132]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f043 0302 	orr.w	r3, r3, #2
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 800779c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f043 0310 	orr.w	r3, r3, #16
 80077a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80077b2:	4b19      	ldr	r3, [pc, #100]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	4a17      	ldr	r2, [pc, #92]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 80077bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f043 0304 	orr.w	r3, r3, #4
 80077c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80077c6:	4b13      	ldr	r3, [pc, #76]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f043 0304 	orr.w	r3, r3, #4
 80077da:	4a0f      	ldr	r2, [pc, #60]	; (8007818 <FLASH_SetErrorCode+0x9c>)
 80077dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80077de:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	4a0c      	ldr	r2, [pc, #48]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f240 1201 	movw	r2, #257	; 0x101
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d106      	bne.n	8007802 <FLASH_SetErrorCode+0x86>
 80077f4:	4b07      	ldr	r3, [pc, #28]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	4a06      	ldr	r2, [pc, #24]	; (8007814 <FLASH_SetErrorCode+0x98>)
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	61d3      	str	r3, [r2, #28]
}  
 8007800:	e002      	b.n	8007808 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007802:	4a04      	ldr	r2, [pc, #16]	; (8007814 <FLASH_SetErrorCode+0x98>)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60d3      	str	r3, [r2, #12]
}  
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40022000 	.word	0x40022000
 8007818:	20002168 	.word	0x20002168

0800781c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800782e:	4b2f      	ldr	r3, [pc, #188]	; (80078ec <HAL_FLASHEx_Erase+0xd0>)
 8007830:	7e1b      	ldrb	r3, [r3, #24]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_FLASHEx_Erase+0x1e>
 8007836:	2302      	movs	r3, #2
 8007838:	e053      	b.n	80078e2 <HAL_FLASHEx_Erase+0xc6>
 800783a:	4b2c      	ldr	r3, [pc, #176]	; (80078ec <HAL_FLASHEx_Erase+0xd0>)
 800783c:	2201      	movs	r2, #1
 800783e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d116      	bne.n	8007876 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800784c:	f7ff ff50 	bl	80076f0 <FLASH_WaitForLastOperation>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d141      	bne.n	80078da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f84c 	bl	80078f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800785c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007860:	f7ff ff46 	bl	80076f0 <FLASH_WaitForLastOperation>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007868:	4b21      	ldr	r3, [pc, #132]	; (80078f0 <HAL_FLASHEx_Erase+0xd4>)
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	4a20      	ldr	r2, [pc, #128]	; (80078f0 <HAL_FLASHEx_Erase+0xd4>)
 800786e:	f023 0304 	bic.w	r3, r3, #4
 8007872:	6113      	str	r3, [r2, #16]
 8007874:	e031      	b.n	80078da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007876:	f24c 3050 	movw	r0, #50000	; 0xc350
 800787a:	f7ff ff39 	bl	80076f0 <FLASH_WaitForLastOperation>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d12a      	bne.n	80078da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f04f 32ff 	mov.w	r2, #4294967295
 800788a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	e019      	b.n	80078c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8007894:	68b8      	ldr	r0, [r7, #8]
 8007896:	f000 f849 	bl	800792c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800789a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800789e:	f7ff ff27 	bl	80076f0 <FLASH_WaitForLastOperation>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_FLASHEx_Erase+0xd4>)
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <HAL_FLASHEx_Erase+0xd4>)
 80078ac:	f023 0302 	bic.w	r3, r3, #2
 80078b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	601a      	str	r2, [r3, #0]
            break;
 80078be:	e00c      	b.n	80078da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	029a      	lsls	r2, r3, #10
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d3dc      	bcc.n	8007894 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <HAL_FLASHEx_Erase+0xd0>)
 80078dc:	2200      	movs	r2, #0
 80078de:	761a      	strb	r2, [r3, #24]

  return status;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20002168 	.word	0x20002168
 80078f0:	40022000 	.word	0x40022000

080078f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <FLASH_MassErase+0x30>)
 80078fe:	2200      	movs	r2, #0
 8007900:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <FLASH_MassErase+0x34>)
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	4a08      	ldr	r2, [pc, #32]	; (8007928 <FLASH_MassErase+0x34>)
 8007908:	f043 0304 	orr.w	r3, r3, #4
 800790c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <FLASH_MassErase+0x34>)
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	4a05      	ldr	r2, [pc, #20]	; (8007928 <FLASH_MassErase+0x34>)
 8007914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007918:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr
 8007924:	20002168 	.word	0x20002168
 8007928:	40022000 	.word	0x40022000

0800792c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <FLASH_PageErase+0x38>)
 8007936:	2200      	movs	r2, #0
 8007938:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <FLASH_PageErase+0x3c>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <FLASH_PageErase+0x3c>)
 8007940:	f043 0302 	orr.w	r3, r3, #2
 8007944:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007946:	4a08      	ldr	r2, [pc, #32]	; (8007968 <FLASH_PageErase+0x3c>)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <FLASH_PageErase+0x3c>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4a05      	ldr	r2, [pc, #20]	; (8007968 <FLASH_PageErase+0x3c>)
 8007952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007956:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20002168 	.word	0x20002168
 8007968:	40022000 	.word	0x40022000

0800796c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800796c:	b480      	push	{r7}
 800796e:	b08b      	sub	sp, #44	; 0x2c
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007976:	2300      	movs	r3, #0
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800797a:	2300      	movs	r3, #0
 800797c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800797e:	e127      	b.n	8007bd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007980:	2201      	movs	r2, #1
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	429a      	cmp	r2, r3
 800799a:	f040 8116 	bne.w	8007bca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b12      	cmp	r3, #18
 80079a4:	d034      	beq.n	8007a10 <HAL_GPIO_Init+0xa4>
 80079a6:	2b12      	cmp	r3, #18
 80079a8:	d80d      	bhi.n	80079c6 <HAL_GPIO_Init+0x5a>
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d02b      	beq.n	8007a06 <HAL_GPIO_Init+0x9a>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d804      	bhi.n	80079bc <HAL_GPIO_Init+0x50>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d031      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d01c      	beq.n	80079f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80079ba:	e048      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d043      	beq.n	8007a48 <HAL_GPIO_Init+0xdc>
 80079c0:	2b11      	cmp	r3, #17
 80079c2:	d01b      	beq.n	80079fc <HAL_GPIO_Init+0x90>
          break;
 80079c4:	e043      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80079c6:	4a89      	ldr	r2, [pc, #548]	; (8007bec <HAL_GPIO_Init+0x280>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d026      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
 80079cc:	4a87      	ldr	r2, [pc, #540]	; (8007bec <HAL_GPIO_Init+0x280>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d806      	bhi.n	80079e0 <HAL_GPIO_Init+0x74>
 80079d2:	4a87      	ldr	r2, [pc, #540]	; (8007bf0 <HAL_GPIO_Init+0x284>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d020      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
 80079d8:	4a86      	ldr	r2, [pc, #536]	; (8007bf4 <HAL_GPIO_Init+0x288>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01d      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
          break;
 80079de:	e036      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80079e0:	4a85      	ldr	r2, [pc, #532]	; (8007bf8 <HAL_GPIO_Init+0x28c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d019      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
 80079e6:	4a85      	ldr	r2, [pc, #532]	; (8007bfc <HAL_GPIO_Init+0x290>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d016      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
 80079ec:	4a84      	ldr	r2, [pc, #528]	; (8007c00 <HAL_GPIO_Init+0x294>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_GPIO_Init+0xae>
          break;
 80079f2:	e02c      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	623b      	str	r3, [r7, #32]
          break;
 80079fa:	e028      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	3304      	adds	r3, #4
 8007a02:	623b      	str	r3, [r7, #32]
          break;
 8007a04:	e023      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	623b      	str	r3, [r7, #32]
          break;
 8007a0e:	e01e      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	330c      	adds	r3, #12
 8007a16:	623b      	str	r3, [r7, #32]
          break;
 8007a18:	e019      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007a22:	2304      	movs	r3, #4
 8007a24:	623b      	str	r3, [r7, #32]
          break;
 8007a26:	e012      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d105      	bne.n	8007a3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007a30:	2308      	movs	r3, #8
 8007a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	611a      	str	r2, [r3, #16]
          break;
 8007a3a:	e008      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	615a      	str	r2, [r3, #20]
          break;
 8007a46:	e002      	b.n	8007a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	623b      	str	r3, [r7, #32]
          break;
 8007a4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2bff      	cmp	r3, #255	; 0xff
 8007a52:	d801      	bhi.n	8007a58 <HAL_GPIO_Init+0xec>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	e001      	b.n	8007a5c <HAL_GPIO_Init+0xf0>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	2bff      	cmp	r3, #255	; 0xff
 8007a62:	d802      	bhi.n	8007a6a <HAL_GPIO_Init+0xfe>
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	e002      	b.n	8007a70 <HAL_GPIO_Init+0x104>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	3b08      	subs	r3, #8
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	210f      	movs	r1, #15
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	401a      	ands	r2, r3
 8007a82:	6a39      	ldr	r1, [r7, #32]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8096 	beq.w	8007bca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007a9e:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <HAL_GPIO_Init+0x298>)
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	4a58      	ldr	r2, [pc, #352]	; (8007c04 <HAL_GPIO_Init+0x298>)
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6193      	str	r3, [r2, #24]
 8007aaa:	4b56      	ldr	r3, [pc, #344]	; (8007c04 <HAL_GPIO_Init+0x298>)
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	60bb      	str	r3, [r7, #8]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007ab6:	4a54      	ldr	r2, [pc, #336]	; (8007c08 <HAL_GPIO_Init+0x29c>)
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	089b      	lsrs	r3, r3, #2
 8007abc:	3302      	adds	r3, #2
 8007abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	220f      	movs	r2, #15
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a4b      	ldr	r2, [pc, #300]	; (8007c0c <HAL_GPIO_Init+0x2a0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <HAL_GPIO_Init+0x19e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a4a      	ldr	r2, [pc, #296]	; (8007c10 <HAL_GPIO_Init+0x2a4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00d      	beq.n	8007b06 <HAL_GPIO_Init+0x19a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a49      	ldr	r2, [pc, #292]	; (8007c14 <HAL_GPIO_Init+0x2a8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d007      	beq.n	8007b02 <HAL_GPIO_Init+0x196>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a48      	ldr	r2, [pc, #288]	; (8007c18 <HAL_GPIO_Init+0x2ac>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d101      	bne.n	8007afe <HAL_GPIO_Init+0x192>
 8007afa:	2303      	movs	r3, #3
 8007afc:	e006      	b.n	8007b0c <HAL_GPIO_Init+0x1a0>
 8007afe:	2304      	movs	r3, #4
 8007b00:	e004      	b.n	8007b0c <HAL_GPIO_Init+0x1a0>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e002      	b.n	8007b0c <HAL_GPIO_Init+0x1a0>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <HAL_GPIO_Init+0x1a0>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0e:	f002 0203 	and.w	r2, r2, #3
 8007b12:	0092      	lsls	r2, r2, #2
 8007b14:	4093      	lsls	r3, r2
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007b1c:	493a      	ldr	r1, [pc, #232]	; (8007c08 <HAL_GPIO_Init+0x29c>)
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	089b      	lsrs	r3, r3, #2
 8007b22:	3302      	adds	r3, #2
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007b36:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4938      	ldr	r1, [pc, #224]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
 8007b42:	e006      	b.n	8007b52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007b44:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	4933      	ldr	r1, [pc, #204]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d006      	beq.n	8007b6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007b5e:	4b2f      	ldr	r3, [pc, #188]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	492e      	ldr	r1, [pc, #184]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	604b      	str	r3, [r1, #4]
 8007b6a:	e006      	b.n	8007b7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007b6c:	4b2b      	ldr	r3, [pc, #172]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	43db      	mvns	r3, r3
 8007b74:	4929      	ldr	r1, [pc, #164]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007b86:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	4924      	ldr	r1, [pc, #144]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
 8007b92:	e006      	b.n	8007ba2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007b94:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	491f      	ldr	r1, [pc, #124]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007bae:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	491a      	ldr	r1, [pc, #104]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60cb      	str	r3, [r1, #12]
 8007bba:	e006      	b.n	8007bca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	43db      	mvns	r3, r3
 8007bc4:	4915      	ldr	r1, [pc, #84]	; (8007c1c <HAL_GPIO_Init+0x2b0>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f47f aed0 	bne.w	8007980 <HAL_GPIO_Init+0x14>
  }
}
 8007be0:	bf00      	nop
 8007be2:	372c      	adds	r7, #44	; 0x2c
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	10210000 	.word	0x10210000
 8007bf0:	10110000 	.word	0x10110000
 8007bf4:	10120000 	.word	0x10120000
 8007bf8:	10310000 	.word	0x10310000
 8007bfc:	10320000 	.word	0x10320000
 8007c00:	10220000 	.word	0x10220000
 8007c04:	40021000 	.word	0x40021000
 8007c08:	40010000 	.word	0x40010000
 8007c0c:	40010800 	.word	0x40010800
 8007c10:	40010c00 	.word	0x40010c00
 8007c14:	40011000 	.word	0x40011000
 8007c18:	40011400 	.word	0x40011400
 8007c1c:	40010400 	.word	0x40010400

08007c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c30:	787b      	ldrb	r3, [r7, #1]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c36:	887a      	ldrh	r2, [r7, #2]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007c3c:	e003      	b.n	8007c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007c3e:	887b      	ldrh	r3, [r7, #2]
 8007c40:	041a      	lsls	r2, r3, #16
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	611a      	str	r2, [r3, #16]
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4013      	ands	r3, r2
 8007c68:	041a      	lsls	r2, r3, #16
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	43d9      	mvns	r1, r3
 8007c6e:	887b      	ldrh	r3, [r7, #2]
 8007c70:	400b      	ands	r3, r1
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	611a      	str	r2, [r3, #16]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr
	...

08007c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e11f      	b.n	8007ed6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fe f92e 	bl	8005f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ce8:	f001 fb90 	bl	800940c <HAL_RCC_GetPCLK1Freq>
 8007cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	4a7b      	ldr	r2, [pc, #492]	; (8007ee0 <HAL_I2C_Init+0x25c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d807      	bhi.n	8007d08 <HAL_I2C_Init+0x84>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a7a      	ldr	r2, [pc, #488]	; (8007ee4 <HAL_I2C_Init+0x260>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	bf94      	ite	ls
 8007d00:	2301      	movls	r3, #1
 8007d02:	2300      	movhi	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	e006      	b.n	8007d16 <HAL_I2C_Init+0x92>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a77      	ldr	r2, [pc, #476]	; (8007ee8 <HAL_I2C_Init+0x264>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	bf94      	ite	ls
 8007d10:	2301      	movls	r3, #1
 8007d12:	2300      	movhi	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0db      	b.n	8007ed6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4a72      	ldr	r2, [pc, #456]	; (8007eec <HAL_I2C_Init+0x268>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	0c9b      	lsrs	r3, r3, #18
 8007d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	4a64      	ldr	r2, [pc, #400]	; (8007ee0 <HAL_I2C_Init+0x25c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d802      	bhi.n	8007d58 <HAL_I2C_Init+0xd4>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3301      	adds	r3, #1
 8007d56:	e009      	b.n	8007d6c <HAL_I2C_Init+0xe8>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	4a63      	ldr	r2, [pc, #396]	; (8007ef0 <HAL_I2C_Init+0x26c>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	099b      	lsrs	r3, r3, #6
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	430b      	orrs	r3, r1
 8007d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4956      	ldr	r1, [pc, #344]	; (8007ee0 <HAL_I2C_Init+0x25c>)
 8007d88:	428b      	cmp	r3, r1
 8007d8a:	d80d      	bhi.n	8007da8 <HAL_I2C_Init+0x124>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1e59      	subs	r1, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	bf38      	it	cc
 8007da4:	2304      	movcc	r3, #4
 8007da6:	e04f      	b.n	8007e48 <HAL_I2C_Init+0x1c4>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d111      	bne.n	8007dd4 <HAL_I2C_Init+0x150>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1e58      	subs	r0, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6859      	ldr	r1, [r3, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	440b      	add	r3, r1
 8007dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bf0c      	ite	eq
 8007dcc:	2301      	moveq	r3, #1
 8007dce:	2300      	movne	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e012      	b.n	8007dfa <HAL_I2C_Init+0x176>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1e58      	subs	r0, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6859      	ldr	r1, [r3, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	0099      	lsls	r1, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dea:	3301      	adds	r3, #1
 8007dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Init+0x17e>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e022      	b.n	8007e48 <HAL_I2C_Init+0x1c4>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10e      	bne.n	8007e28 <HAL_I2C_Init+0x1a4>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1e58      	subs	r0, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	440b      	add	r3, r1
 8007e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	e00f      	b.n	8007e48 <HAL_I2C_Init+0x1c4>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1e58      	subs	r0, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6859      	ldr	r1, [r3, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	0099      	lsls	r1, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e3e:	3301      	adds	r3, #1
 8007e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	6809      	ldr	r1, [r1, #0]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6911      	ldr	r1, [r2, #16]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68d2      	ldr	r2, [r2, #12]
 8007e82:	4311      	orrs	r1, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	000186a0 	.word	0x000186a0
 8007ee4:	001e847f 	.word	0x001e847f
 8007ee8:	003d08ff 	.word	0x003d08ff
 8007eec:	431bde83 	.word	0x431bde83
 8007ef0:	10624dd3 	.word	0x10624dd3

08007ef4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	817b      	strh	r3, [r7, #10]
 8007f06:	460b      	mov	r3, r1
 8007f08:	813b      	strh	r3, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f0e:	f7fe ff8f 	bl	8006e30 <HAL_GetTick>
 8007f12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	f040 80d9 	bne.w	80080d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	2319      	movs	r3, #25
 8007f28:	2201      	movs	r2, #1
 8007f2a:	496d      	ldr	r1, [pc, #436]	; (80080e0 <HAL_I2C_Mem_Write+0x1ec>)
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fcbb 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e0cc      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_I2C_Mem_Write+0x56>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e0c5      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d007      	beq.n	8007f70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2221      	movs	r2, #33	; 0x21
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a4d      	ldr	r2, [pc, #308]	; (80080e4 <HAL_I2C_Mem_Write+0x1f0>)
 8007fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fb2:	88f8      	ldrh	r0, [r7, #6]
 8007fb4:	893a      	ldrh	r2, [r7, #8]
 8007fb6:	8979      	ldrh	r1, [r7, #10]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 faf2 	bl	80085ac <I2C_RequestMemoryWrite>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d052      	beq.n	8008074 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e081      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 fd3c 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00d      	beq.n	8007ffe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d107      	bne.n	8007ffa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e06b      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b04      	cmp	r3, #4
 800803a:	d11b      	bne.n	8008074 <HAL_I2C_Mem_Write+0x180>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	d017      	beq.n	8008074 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1aa      	bne.n	8007fd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fd28 	bl	8008ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	2b04      	cmp	r3, #4
 8008092:	d107      	bne.n	80080a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e016      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	00100002 	.word	0x00100002
 80080e4:	ffff0000 	.word	0xffff0000

080080e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	; 0x30
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	817b      	strh	r3, [r7, #10]
 80080fa:	460b      	mov	r3, r1
 80080fc:	813b      	strh	r3, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008106:	f7fe fe93 	bl	8006e30 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b20      	cmp	r3, #32
 8008116:	f040 823d 	bne.w	8008594 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	2319      	movs	r3, #25
 8008120:	2201      	movs	r2, #1
 8008122:	4981      	ldr	r1, [pc, #516]	; (8008328 <HAL_I2C_Mem_Read+0x240>)
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fbbf 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
 8008132:	e230      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_I2C_Mem_Read+0x5a>
 800813e:	2302      	movs	r3, #2
 8008140:	e229      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b01      	cmp	r3, #1
 8008156:	d007      	beq.n	8008168 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2222      	movs	r2, #34	; 0x22
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a61      	ldr	r2, [pc, #388]	; (800832c <HAL_I2C_Mem_Read+0x244>)
 80081a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081aa:	88f8      	ldrh	r0, [r7, #6]
 80081ac:	893a      	ldrh	r2, [r7, #8]
 80081ae:	8979      	ldrh	r1, [r7, #10]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4603      	mov	r3, r0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 fa8c 	bl	80086d8 <I2C_RequestMemoryRead>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e1e5      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d113      	bne.n	80081fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e1b9      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11d      	bne.n	800823e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008238:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800823a:	b662      	cpsie	i
 800823c:	e197      	b.n	800856e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008242:	2b02      	cmp	r3, #2
 8008244:	d11d      	bne.n	8008282 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008256:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800827e:	b662      	cpsie	i
 8008280:	e175      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008290:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80082a8:	e161      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	f200 811a 	bhi.w	80084e8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d123      	bne.n	8008304 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fc49 	bl	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e162      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008302:	e134      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008308:	2b02      	cmp	r3, #2
 800830a:	d150      	bne.n	80083ae <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	2200      	movs	r2, #0
 8008314:	4906      	ldr	r1, [pc, #24]	; (8008330 <HAL_I2C_Mem_Read+0x248>)
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fac6 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e137      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
 8008326:	bf00      	nop
 8008328:	00100002 	.word	0x00100002
 800832c:	ffff0000 	.word	0xffff0000
 8008330:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008334:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008344:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008378:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083ac:	e0df      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	2200      	movs	r2, #0
 80083b6:	497a      	ldr	r1, [pc, #488]	; (80085a0 <HAL_I2C_Mem_Read+0x4b8>)
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fa75 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e0e6      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80083d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008402:	b29b      	uxth	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800840c:	4b65      	ldr	r3, [pc, #404]	; (80085a4 <HAL_I2C_Mem_Read+0x4bc>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	4a65      	ldr	r2, [pc, #404]	; (80085a8 <HAL_I2C_Mem_Read+0x4c0>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	0a1a      	lsrs	r2, r3, #8
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	00da      	lsls	r2, r3, #3
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	3b01      	subs	r3, #1
 800842a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d117      	bne.n	8008462 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	f043 0220 	orr.w	r2, r3, #32
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008454:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e099      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b04      	cmp	r3, #4
 800846e:	d1da      	bne.n	8008426 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800847e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084b2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084e6:	e042      	b.n	800856e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 fb33 	bl	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e04c      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008518:	3b01      	subs	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d118      	bne.n	800856e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	f47f ae99 	bne.w	80082aa <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e000      	b.n	8008596 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8008594:	2302      	movs	r3, #2
  }
}
 8008596:	4618      	mov	r0, r3
 8008598:	3728      	adds	r7, #40	; 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	00010004 	.word	0x00010004
 80085a4:	200011a0 	.word	0x200011a0
 80085a8:	14f8b589 	.word	0x14f8b589

080085ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	461a      	mov	r2, r3
 80085ba:	4603      	mov	r3, r0
 80085bc:	817b      	strh	r3, [r7, #10]
 80085be:	460b      	mov	r3, r1
 80085c0:	813b      	strh	r3, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2200      	movs	r2, #0
 80085de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f960 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d103      	bne.n	8008606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e05f      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	492d      	ldr	r1, [pc, #180]	; (80086d4 <I2C_RequestMemoryWrite+0x128>)
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f998 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e04c      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008648:	6a39      	ldr	r1, [r7, #32]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa02 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	2b04      	cmp	r3, #4
 800865c:	d107      	bne.n	800866e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800866c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e02b      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008678:	893b      	ldrh	r3, [r7, #8]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	611a      	str	r2, [r3, #16]
 8008682:	e021      	b.n	80086c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	b29b      	uxth	r3, r3
 800868a:	b2da      	uxtb	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008694:	6a39      	ldr	r1, [r7, #32]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f9dc 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	d107      	bne.n	80086ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e005      	b.n	80086ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086be:	893b      	ldrh	r3, [r7, #8]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	00010002 	.word	0x00010002

080086d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	817b      	strh	r3, [r7, #10]
 80086ea:	460b      	mov	r3, r1
 80086ec:	813b      	strh	r3, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008700:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	2200      	movs	r2, #0
 800871a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 f8c2 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008738:	d103      	bne.n	8008742 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e0aa      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008746:	897b      	ldrh	r3, [r7, #10]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	4952      	ldr	r1, [pc, #328]	; (80088a4 <I2C_RequestMemoryRead+0x1cc>)
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f8fa 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e097      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	6a39      	ldr	r1, [r7, #32]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f964 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	2b04      	cmp	r3, #4
 8008798:	d107      	bne.n	80087aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e076      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ae:	88fb      	ldrh	r3, [r7, #6]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d105      	bne.n	80087c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	611a      	str	r2, [r3, #16]
 80087be:	e021      	b.n	8008804 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087c0:	893b      	ldrh	r3, [r7, #8]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d0:	6a39      	ldr	r1, [r7, #32]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f93e 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d107      	bne.n	80087f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e050      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087fa:	893b      	ldrh	r3, [r7, #8]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008806:	6a39      	ldr	r1, [r7, #32]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 f923 	bl	8008a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00d      	beq.n	8008830 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	2b04      	cmp	r3, #4
 800881a:	d107      	bne.n	800882c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800882a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e035      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800883e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2200      	movs	r2, #0
 8008848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f82b 	bl	80088a8 <I2C_WaitOnFlagUntilTimeout>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00d      	beq.n	8008874 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008866:	d103      	bne.n	8008870 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800886e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e013      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008874:	897b      	ldrh	r3, [r7, #10]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	6a3a      	ldr	r2, [r7, #32]
 8008888:	4906      	ldr	r1, [pc, #24]	; (80088a4 <I2C_RequestMemoryRead+0x1cc>)
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f863 	bl	8008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	00010002 	.word	0x00010002

080088a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b8:	e025      	b.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d021      	beq.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c2:	f7fe fab5 	bl	8006e30 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d302      	bcc.n	80088d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d116      	bne.n	8008906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	f043 0220 	orr.w	r2, r3, #32
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e023      	b.n	800894e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	0c1b      	lsrs	r3, r3, #16
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d10d      	bne.n	800892c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	43da      	mvns	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4013      	ands	r3, r2
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	bf0c      	ite	eq
 8008922:	2301      	moveq	r3, #1
 8008924:	2300      	movne	r3, #0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	461a      	mov	r2, r3
 800892a:	e00c      	b.n	8008946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	43da      	mvns	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	bf0c      	ite	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	2300      	movne	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	429a      	cmp	r2, r3
 800894a:	d0b6      	beq.n	80088ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008964:	e051      	b.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008974:	d123      	bne.n	80089be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800898e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f043 0204 	orr.w	r2, r3, #4
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e046      	b.n	8008a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d021      	beq.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c6:	f7fe fa33 	bl	8006e30 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d116      	bne.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	f043 0220 	orr.w	r2, r3, #32
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e020      	b.n	8008a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	0c1b      	lsrs	r3, r3, #16
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10c      	bne.n	8008a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e00b      	b.n	8008a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	43da      	mvns	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d18d      	bne.n	8008966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a60:	e02d      	b.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f8ce 	bl	8008c04 <I2C_IsAcknowledgeFailed>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e02d      	b.n	8008ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d021      	beq.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fe f9d9 	bl	8006e30 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d116      	bne.n	8008abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e007      	b.n	8008ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d1ca      	bne.n	8008a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ae2:	e02d      	b.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f88d 	bl	8008c04 <I2C_IsAcknowledgeFailed>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e02d      	b.n	8008b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afa:	d021      	beq.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008afc:	f7fe f998 	bl	8006e30 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d116      	bne.n	8008b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e007      	b.n	8008b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d1ca      	bne.n	8008ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b64:	e042      	b.n	8008bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b10      	cmp	r3, #16
 8008b72:	d119      	bne.n	8008ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0210 	mvn.w	r2, #16
 8008b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e029      	b.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ba8:	f7fe f942 	bl	8006e30 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d302      	bcc.n	8008bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d116      	bne.n	8008bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e007      	b.n	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf6:	2b40      	cmp	r3, #64	; 0x40
 8008bf8:	d1b5      	bne.n	8008b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c1a:	d11b      	bne.n	8008c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c40:	f043 0204 	orr.w	r2, r3, #4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e26c      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8087 	beq.w	8008d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c80:	4b92      	ldr	r3, [pc, #584]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d00c      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c8c:	4b8f      	ldr	r3, [pc, #572]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d112      	bne.n	8008cbe <HAL_RCC_OscConfig+0x5e>
 8008c98:	4b8c      	ldr	r3, [pc, #560]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca4:	d10b      	bne.n	8008cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ca6:	4b89      	ldr	r3, [pc, #548]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d06c      	beq.n	8008d8c <HAL_RCC_OscConfig+0x12c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d168      	bne.n	8008d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e246      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc6:	d106      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x76>
 8008cc8:	4b80      	ldr	r3, [pc, #512]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a7f      	ldr	r2, [pc, #508]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	e02e      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x98>
 8008cde:	4b7b      	ldr	r3, [pc, #492]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a7a      	ldr	r2, [pc, #488]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4b78      	ldr	r3, [pc, #480]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a77      	ldr	r2, [pc, #476]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	e01d      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d00:	d10c      	bne.n	8008d1c <HAL_RCC_OscConfig+0xbc>
 8008d02:	4b72      	ldr	r3, [pc, #456]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a71      	ldr	r2, [pc, #452]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b6f      	ldr	r3, [pc, #444]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a6e      	ldr	r2, [pc, #440]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e00b      	b.n	8008d34 <HAL_RCC_OscConfig+0xd4>
 8008d1c:	4b6b      	ldr	r3, [pc, #428]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a6a      	ldr	r2, [pc, #424]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	4b68      	ldr	r3, [pc, #416]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a67      	ldr	r2, [pc, #412]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d013      	beq.n	8008d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d3c:	f7fe f878 	bl	8006e30 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d44:	f7fe f874 	bl	8006e30 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b64      	cmp	r3, #100	; 0x64
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e1fa      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d56:	4b5d      	ldr	r3, [pc, #372]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <HAL_RCC_OscConfig+0xe4>
 8008d62:	e014      	b.n	8008d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d64:	f7fe f864 	bl	8006e30 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d6c:	f7fe f860 	bl	8006e30 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e1e6      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d7e:	4b53      	ldr	r3, [pc, #332]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x10c>
 8008d8a:	e000      	b.n	8008d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d063      	beq.n	8008e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d9a:	4b4c      	ldr	r3, [pc, #304]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008da6:	4b49      	ldr	r3, [pc, #292]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f003 030c 	and.w	r3, r3, #12
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d11c      	bne.n	8008dec <HAL_RCC_OscConfig+0x18c>
 8008db2:	4b46      	ldr	r3, [pc, #280]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d116      	bne.n	8008dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dbe:	4b43      	ldr	r3, [pc, #268]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x176>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e1ba      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dd6:	4b3d      	ldr	r3, [pc, #244]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4939      	ldr	r1, [pc, #228]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dea:	e03a      	b.n	8008e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d020      	beq.n	8008e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008df4:	4b36      	ldr	r3, [pc, #216]	; (8008ed0 <HAL_RCC_OscConfig+0x270>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dfa:	f7fe f819 	bl	8006e30 <HAL_GetTick>
 8008dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e02:	f7fe f815 	bl	8006e30 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e19b      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e14:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e20:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4927      	ldr	r1, [pc, #156]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]
 8008e34:	e015      	b.n	8008e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e36:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <HAL_RCC_OscConfig+0x270>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e3c:	f7fd fff8 	bl	8006e30 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e44:	f7fd fff4 	bl	8006e30 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e17a      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f0      	bne.n	8008e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d03a      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e76:	4b17      	ldr	r3, [pc, #92]	; (8008ed4 <HAL_RCC_OscConfig+0x274>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e7c:	f7fd ffd8 	bl	8006e30 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e84:	f7fd ffd4 	bl	8006e30 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e15a      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <HAL_RCC_OscConfig+0x26c>)
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	f000 fada 	bl	800945c <RCC_Delay>
 8008ea8:	e01c      	b.n	8008ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <HAL_RCC_OscConfig+0x274>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eb0:	f7fd ffbe 	bl	8006e30 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eb6:	e00f      	b.n	8008ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008eb8:	f7fd ffba 	bl	8006e30 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d908      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e140      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
 8008eca:	bf00      	nop
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	42420000 	.word	0x42420000
 8008ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed8:	4b9e      	ldr	r3, [pc, #632]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e9      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80a6 	beq.w	800903e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ef6:	4b97      	ldr	r3, [pc, #604]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f02:	4b94      	ldr	r3, [pc, #592]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	4a93      	ldr	r2, [pc, #588]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0c:	61d3      	str	r3, [r2, #28]
 8008f0e:	4b91      	ldr	r3, [pc, #580]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f16:	60bb      	str	r3, [r7, #8]
 8008f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f1e:	4b8e      	ldr	r3, [pc, #568]	; (8009158 <HAL_RCC_OscConfig+0x4f8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d118      	bne.n	8008f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f2a:	4b8b      	ldr	r3, [pc, #556]	; (8009158 <HAL_RCC_OscConfig+0x4f8>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a8a      	ldr	r2, [pc, #552]	; (8009158 <HAL_RCC_OscConfig+0x4f8>)
 8008f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f36:	f7fd ff7b 	bl	8006e30 <HAL_GetTick>
 8008f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3e:	f7fd ff77 	bl	8006e30 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b64      	cmp	r3, #100	; 0x64
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e0fd      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f50:	4b81      	ldr	r3, [pc, #516]	; (8009158 <HAL_RCC_OscConfig+0x4f8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <HAL_RCC_OscConfig+0x312>
 8008f64:	4b7b      	ldr	r3, [pc, #492]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	4a7a      	ldr	r2, [pc, #488]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	6213      	str	r3, [r2, #32]
 8008f70:	e02d      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10c      	bne.n	8008f94 <HAL_RCC_OscConfig+0x334>
 8008f7a:	4b76      	ldr	r3, [pc, #472]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	4a75      	ldr	r2, [pc, #468]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	6213      	str	r3, [r2, #32]
 8008f86:	4b73      	ldr	r3, [pc, #460]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	4a72      	ldr	r2, [pc, #456]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f8c:	f023 0304 	bic.w	r3, r3, #4
 8008f90:	6213      	str	r3, [r2, #32]
 8008f92:	e01c      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d10c      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x356>
 8008f9c:	4b6d      	ldr	r3, [pc, #436]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	4a6c      	ldr	r2, [pc, #432]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fa2:	f043 0304 	orr.w	r3, r3, #4
 8008fa6:	6213      	str	r3, [r2, #32]
 8008fa8:	4b6a      	ldr	r3, [pc, #424]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	4a69      	ldr	r2, [pc, #420]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	6213      	str	r3, [r2, #32]
 8008fb4:	e00b      	b.n	8008fce <HAL_RCC_OscConfig+0x36e>
 8008fb6:	4b67      	ldr	r3, [pc, #412]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	4a66      	ldr	r2, [pc, #408]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	6213      	str	r3, [r2, #32]
 8008fc2:	4b64      	ldr	r3, [pc, #400]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	4a63      	ldr	r2, [pc, #396]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008fc8:	f023 0304 	bic.w	r3, r3, #4
 8008fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d015      	beq.n	8009002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd6:	f7fd ff2b 	bl	8006e30 <HAL_GetTick>
 8008fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fdc:	e00a      	b.n	8008ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fde:	f7fd ff27 	bl	8006e30 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e0ab      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff4:	4b57      	ldr	r3, [pc, #348]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0ee      	beq.n	8008fde <HAL_RCC_OscConfig+0x37e>
 8009000:	e014      	b.n	800902c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009002:	f7fd ff15 	bl	8006e30 <HAL_GetTick>
 8009006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009008:	e00a      	b.n	8009020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900a:	f7fd ff11 	bl	8006e30 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	f241 3288 	movw	r2, #5000	; 0x1388
 8009018:	4293      	cmp	r3, r2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e095      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009020:	4b4c      	ldr	r3, [pc, #304]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1ee      	bne.n	800900a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d105      	bne.n	800903e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009032:	4b48      	ldr	r3, [pc, #288]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	4a47      	ldr	r2, [pc, #284]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8009038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800903c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 8081 	beq.w	800914a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009048:	4b42      	ldr	r3, [pc, #264]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b08      	cmp	r3, #8
 8009052:	d061      	beq.n	8009118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d146      	bne.n	80090ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905c:	4b3f      	ldr	r3, [pc, #252]	; (800915c <HAL_RCC_OscConfig+0x4fc>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009062:	f7fd fee5 	bl	8006e30 <HAL_GetTick>
 8009066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009068:	e008      	b.n	800907c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800906a:	f7fd fee1 	bl	8006e30 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e067      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800907c:	4b35      	ldr	r3, [pc, #212]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1f0      	bne.n	800906a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009090:	d108      	bne.n	80090a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009092:	4b30      	ldr	r3, [pc, #192]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	492d      	ldr	r1, [pc, #180]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090a4:	4b2b      	ldr	r3, [pc, #172]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a19      	ldr	r1, [r3, #32]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	430b      	orrs	r3, r1
 80090b6:	4927      	ldr	r1, [pc, #156]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090bc:	4b27      	ldr	r3, [pc, #156]	; (800915c <HAL_RCC_OscConfig+0x4fc>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c2:	f7fd feb5 	bl	8006e30 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ca:	f7fd feb1 	bl	8006e30 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e037      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x46a>
 80090e8:	e02f      	b.n	800914a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ea:	4b1c      	ldr	r3, [pc, #112]	; (800915c <HAL_RCC_OscConfig+0x4fc>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090f0:	f7fd fe9e 	bl	8006e30 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f8:	f7fd fe9a 	bl	8006e30 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e020      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800910a:	4b12      	ldr	r3, [pc, #72]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x498>
 8009116:	e018      	b.n	800914a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e013      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <HAL_RCC_OscConfig+0x4f4>)
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	429a      	cmp	r2, r3
 8009136:	d106      	bne.n	8009146 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009142:	429a      	cmp	r2, r3
 8009144:	d001      	beq.n	800914a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	40021000 	.word	0x40021000
 8009158:	40007000 	.word	0x40007000
 800915c:	42420060 	.word	0x42420060

08009160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e0d0      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009174:	4b6a      	ldr	r3, [pc, #424]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d910      	bls.n	80091a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009182:	4b67      	ldr	r3, [pc, #412]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f023 0207 	bic.w	r2, r3, #7
 800918a:	4965      	ldr	r1, [pc, #404]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	4313      	orrs	r3, r2
 8009190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009192:	4b63      	ldr	r3, [pc, #396]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d001      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0b8      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d020      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091bc:	4b59      	ldr	r3, [pc, #356]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4a58      	ldr	r2, [pc, #352]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80091c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091d4:	4b53      	ldr	r3, [pc, #332]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4a52      	ldr	r2, [pc, #328]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80091de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e0:	4b50      	ldr	r3, [pc, #320]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	494d      	ldr	r1, [pc, #308]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d040      	beq.n	8009280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009206:	4b47      	ldr	r3, [pc, #284]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d115      	bne.n	800923e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e07f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d107      	bne.n	800922e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e073      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800922e:	4b3d      	ldr	r3, [pc, #244]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e06b      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800923e:	4b39      	ldr	r3, [pc, #228]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f023 0203 	bic.w	r2, r3, #3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4936      	ldr	r1, [pc, #216]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 800924c:	4313      	orrs	r3, r2
 800924e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009250:	f7fd fdee 	bl	8006e30 <HAL_GetTick>
 8009254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009256:	e00a      	b.n	800926e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009258:	f7fd fdea 	bl	8006e30 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f241 3288 	movw	r2, #5000	; 0x1388
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e053      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800926e:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f003 020c 	and.w	r2, r3, #12
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	429a      	cmp	r2, r3
 800927e:	d1eb      	bne.n	8009258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009280:	4b27      	ldr	r3, [pc, #156]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d210      	bcs.n	80092b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800928e:	4b24      	ldr	r3, [pc, #144]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f023 0207 	bic.w	r2, r3, #7
 8009296:	4922      	ldr	r1, [pc, #136]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	4313      	orrs	r3, r2
 800929c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800929e:	4b20      	ldr	r3, [pc, #128]	; (8009320 <HAL_RCC_ClockConfig+0x1c0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d001      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e032      	b.n	8009316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4916      	ldr	r1, [pc, #88]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	490e      	ldr	r1, [pc, #56]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80092ee:	f000 f821 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 80092f2:	4601      	mov	r1, r0
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <HAL_RCC_ClockConfig+0x1c4>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x1c8>)
 8009300:	5cd3      	ldrb	r3, [r2, r3]
 8009302:	fa21 f303 	lsr.w	r3, r1, r3
 8009306:	4a09      	ldr	r2, [pc, #36]	; (800932c <HAL_RCC_ClockConfig+0x1cc>)
 8009308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <HAL_RCC_ClockConfig+0x1d0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7fd fd4c 	bl	8006dac <HAL_InitTick>

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40022000 	.word	0x40022000
 8009324:	40021000 	.word	0x40021000
 8009328:	0800bacc 	.word	0x0800bacc
 800932c:	200011a0 	.word	0x200011a0
 8009330:	200011a4 	.word	0x200011a4

08009334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009334:	b490      	push	{r4, r7}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800933a:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800933c:	1d3c      	adds	r4, r7, #4
 800933e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009344:	4b28      	ldr	r3, [pc, #160]	; (80093e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 030c 	and.w	r3, r3, #12
 800936a:	2b04      	cmp	r3, #4
 800936c:	d002      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x40>
 800936e:	2b08      	cmp	r3, #8
 8009370:	d003      	beq.n	800937a <HAL_RCC_GetSysClockFreq+0x46>
 8009372:	e02d      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009374:	4b1e      	ldr	r3, [pc, #120]	; (80093f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009376:	623b      	str	r3, [r7, #32]
      break;
 8009378:	e02d      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	0c9b      	lsrs	r3, r3, #18
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009386:	4413      	add	r3, r2
 8009388:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800938c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d013      	beq.n	80093c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009398:	4b14      	ldr	r3, [pc, #80]	; (80093ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	0c5b      	lsrs	r3, r3, #17
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80093a6:	4413      	add	r3, r2
 80093a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80093ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80093b2:	fb02 f203 	mul.w	r2, r2, r3
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
 80093be:	e004      	b.n	80093ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	4a0c      	ldr	r2, [pc, #48]	; (80093f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	623b      	str	r3, [r7, #32]
      break;
 80093ce:	e002      	b.n	80093d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80093d2:	623b      	str	r3, [r7, #32]
      break;
 80093d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093d6:	6a3b      	ldr	r3, [r7, #32]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	; 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc90      	pop	{r4, r7}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	0800b9b8 	.word	0x0800b9b8
 80093e8:	0800b9c8 	.word	0x0800b9c8
 80093ec:	40021000 	.word	0x40021000
 80093f0:	007a1200 	.word	0x007a1200
 80093f4:	003d0900 	.word	0x003d0900

080093f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <HAL_RCC_GetHCLKFreq+0x10>)
 80093fe:	681b      	ldr	r3, [r3, #0]
}
 8009400:	4618      	mov	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr
 8009408:	200011a0 	.word	0x200011a0

0800940c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009410:	f7ff fff2 	bl	80093f8 <HAL_RCC_GetHCLKFreq>
 8009414:	4601      	mov	r1, r0
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	4a03      	ldr	r2, [pc, #12]	; (8009430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009422:	5cd3      	ldrb	r3, [r2, r3]
 8009424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009428:	4618      	mov	r0, r3
 800942a:	bd80      	pop	{r7, pc}
 800942c:	40021000 	.word	0x40021000
 8009430:	0800badc 	.word	0x0800badc

08009434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009438:	f7ff ffde 	bl	80093f8 <HAL_RCC_GetHCLKFreq>
 800943c:	4601      	mov	r1, r0
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	0adb      	lsrs	r3, r3, #11
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	4a03      	ldr	r2, [pc, #12]	; (8009458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800944a:	5cd3      	ldrb	r3, [r2, r3]
 800944c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009450:	4618      	mov	r0, r3
 8009452:	bd80      	pop	{r7, pc}
 8009454:	40021000 	.word	0x40021000
 8009458:	0800badc 	.word	0x0800badc

0800945c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009464:	4b0a      	ldr	r3, [pc, #40]	; (8009490 <RCC_Delay+0x34>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <RCC_Delay+0x38>)
 800946a:	fba2 2303 	umull	r2, r3, r2, r3
 800946e:	0a5b      	lsrs	r3, r3, #9
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009478:	bf00      	nop
  }
  while (Delay --);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	60fa      	str	r2, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f9      	bne.n	8009478 <RCC_Delay+0x1c>
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	200011a0 	.word	0x200011a0
 8009494:	10624dd3 	.word	0x10624dd3

08009498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e076      	b.n	8009598 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d108      	bne.n	80094c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ba:	d009      	beq.n	80094d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	61da      	str	r2, [r3, #28]
 80094c2:	e005      	b.n	80094d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fc fe30 	bl	8006150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009554:	ea42 0103 	orr.w	r1, r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	0c1a      	lsrs	r2, r3, #16
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f002 0204 	and.w	r2, r2, #4
 8009576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69da      	ldr	r2, [r3, #28]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e041      	b.n	8009636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fd f8c4 	bl	8006754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f000 fe00 	bl	800a1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	d001      	beq.n	8009658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e03a      	b.n	80096ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0201 	orr.w	r2, r2, #1
 800966e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <HAL_TIM_Base_Start_IT+0x98>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00e      	beq.n	8009698 <HAL_TIM_Base_Start_IT+0x58>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009682:	d009      	beq.n	8009698 <HAL_TIM_Base_Start_IT+0x58>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a14      	ldr	r2, [pc, #80]	; (80096dc <HAL_TIM_Base_Start_IT+0x9c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_TIM_Base_Start_IT+0x58>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a13      	ldr	r2, [pc, #76]	; (80096e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d111      	bne.n	80096bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b06      	cmp	r3, #6
 80096a8:	d010      	beq.n	80096cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0201 	orr.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ba:	e007      	b.n	80096cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0201 	orr.w	r2, r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr
 80096d8:	40012c00 	.word	0x40012c00
 80096dc:	40000400 	.word	0x40000400
 80096e0:	40000800 	.word	0x40000800

080096e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e041      	b.n	800977a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f839 	bl	8009782 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f000 fd5e 	bl	800a1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d109      	bne.n	80097b8 <HAL_TIM_PWM_Start+0x24>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	e022      	b.n	80097fe <HAL_TIM_PWM_Start+0x6a>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d109      	bne.n	80097d2 <HAL_TIM_PWM_Start+0x3e>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	bf14      	ite	ne
 80097ca:	2301      	movne	r3, #1
 80097cc:	2300      	moveq	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	e015      	b.n	80097fe <HAL_TIM_PWM_Start+0x6a>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d109      	bne.n	80097ec <HAL_TIM_PWM_Start+0x58>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	bf14      	ite	ne
 80097e4:	2301      	movne	r3, #1
 80097e6:	2300      	moveq	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	e008      	b.n	80097fe <HAL_TIM_PWM_Start+0x6a>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	bf14      	ite	ne
 80097f8:	2301      	movne	r3, #1
 80097fa:	2300      	moveq	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e05e      	b.n	80098c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <HAL_TIM_PWM_Start+0x82>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009814:	e013      	b.n	800983e <HAL_TIM_PWM_Start+0xaa>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b04      	cmp	r3, #4
 800981a:	d104      	bne.n	8009826 <HAL_TIM_PWM_Start+0x92>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009824:	e00b      	b.n	800983e <HAL_TIM_PWM_Start+0xaa>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b08      	cmp	r3, #8
 800982a:	d104      	bne.n	8009836 <HAL_TIM_PWM_Start+0xa2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009834:	e003      	b.n	800983e <HAL_TIM_PWM_Start+0xaa>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2201      	movs	r2, #1
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 ff4c 	bl	800a6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <HAL_TIM_PWM_Start+0x138>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d107      	bne.n	8009866 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a18      	ldr	r2, [pc, #96]	; (80098cc <HAL_TIM_PWM_Start+0x138>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <HAL_TIM_PWM_Start+0xfa>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009878:	d009      	beq.n	800988e <HAL_TIM_PWM_Start+0xfa>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a14      	ldr	r2, [pc, #80]	; (80098d0 <HAL_TIM_PWM_Start+0x13c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_TIM_PWM_Start+0xfa>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <HAL_TIM_PWM_Start+0x140>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d111      	bne.n	80098b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b06      	cmp	r3, #6
 800989e:	d010      	beq.n	80098c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 0201 	orr.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b0:	e007      	b.n	80098c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0201 	orr.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	40012c00 	.word	0x40012c00
 80098d0:	40000400 	.word	0x40000400
 80098d4:	40000800 	.word	0x40000800

080098d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b0c      	cmp	r3, #12
 80098e6:	d855      	bhi.n	8009994 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80098e8:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009925 	.word	0x08009925
 80098f4:	08009995 	.word	0x08009995
 80098f8:	08009995 	.word	0x08009995
 80098fc:	08009995 	.word	0x08009995
 8009900:	08009941 	.word	0x08009941
 8009904:	08009995 	.word	0x08009995
 8009908:	08009995 	.word	0x08009995
 800990c:	08009995 	.word	0x08009995
 8009910:	0800995d 	.word	0x0800995d
 8009914:	08009995 	.word	0x08009995
 8009918:	08009995 	.word	0x08009995
 800991c:	08009995 	.word	0x08009995
 8009920:	08009979 	.word	0x08009979
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009932:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd fc6d 	bl	8007218 <HAL_DMA_Abort_IT>
      break;
 800993e:	e02a      	b.n	8009996 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800994e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd fc5f 	bl	8007218 <HAL_DMA_Abort_IT>
      break;
 800995a:	e01c      	b.n	8009996 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800996a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	4618      	mov	r0, r3
 8009972:	f7fd fc51 	bl	8007218 <HAL_DMA_Abort_IT>
      break;
 8009976:	e00e      	b.n	8009996 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009986:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	4618      	mov	r0, r3
 800998e:	f7fd fc43 	bl	8007218 <HAL_DMA_Abort_IT>
      break;
 8009992:	e000      	b.n	8009996 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8009994:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2200      	movs	r2, #0
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fea0 	bl	800a6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a29      	ldr	r2, [pc, #164]	; (8009a50 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d117      	bne.n	80099de <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80099b8:	4013      	ands	r3, r2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10f      	bne.n	80099de <HAL_TIM_PWM_Stop_DMA+0x106>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	f240 4344 	movw	r3, #1092	; 0x444
 80099c8:	4013      	ands	r3, r2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <HAL_TIM_PWM_Stop_DMA+0x106>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6a1a      	ldr	r2, [r3, #32]
 80099e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80099e8:	4013      	ands	r3, r2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10f      	bne.n	8009a0e <HAL_TIM_PWM_Stop_DMA+0x136>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6a1a      	ldr	r2, [r3, #32]
 80099f4:	f240 4344 	movw	r3, #1092	; 0x444
 80099f8:	4013      	ands	r3, r2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d107      	bne.n	8009a0e <HAL_TIM_PWM_Stop_DMA+0x136>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0201 	bic.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_TIM_PWM_Stop_DMA+0x146>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a1c:	e013      	b.n	8009a46 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d104      	bne.n	8009a2e <HAL_TIM_PWM_Stop_DMA+0x156>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a2c:	e00b      	b.n	8009a46 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d104      	bne.n	8009a3e <HAL_TIM_PWM_Stop_DMA+0x166>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a3c:	e003      	b.n	8009a46 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	40012c00 	.word	0x40012c00

08009a54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e093      	b.n	8009b90 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fc fea1 	bl	80067c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6812      	ldr	r2, [r2, #0]
 8009a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a98:	f023 0307 	bic.w	r3, r3, #7
 8009a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f000 fb9b 	bl	800a1e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009af4:	f023 030c 	bic.w	r3, r3, #12
 8009af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	4313      	orrs	r3, r2
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	011a      	lsls	r2, r3, #4
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	031b      	lsls	r3, r3, #12
 8009b24:	4313      	orrs	r3, r2
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009b32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ba8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009bc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d110      	bne.n	8009bea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d102      	bne.n	8009bd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bce:	7b7b      	ldrb	r3, [r7, #13]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d001      	beq.n	8009bd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e068      	b.n	8009caa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009be8:	e031      	b.n	8009c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d110      	bne.n	8009c12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d102      	bne.n	8009bfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bf6:	7b3b      	ldrb	r3, [r7, #12]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d001      	beq.n	8009c00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e054      	b.n	8009caa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c10:	e01d      	b.n	8009c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d108      	bne.n	8009c2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d105      	bne.n	8009c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c1e:	7b7b      	ldrb	r3, [r7, #13]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d102      	bne.n	8009c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c24:	7b3b      	ldrb	r3, [r7, #12]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d001      	beq.n	8009c2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e03d      	b.n	8009caa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2202      	movs	r2, #2
 8009c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <HAL_TIM_Encoder_Start+0xc2>
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d008      	beq.n	8009c6a <HAL_TIM_Encoder_Start+0xd2>
 8009c58:	e00f      	b.n	8009c7a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fd3e 	bl	800a6e4 <TIM_CCxChannelCmd>
      break;
 8009c68:	e016      	b.n	8009c98 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	2104      	movs	r1, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fd36 	bl	800a6e4 <TIM_CCxChannelCmd>
      break;
 8009c78:	e00e      	b.n	8009c98 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fd2e 	bl	800a6e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fd27 	bl	800a6e4 <TIM_CCxChannelCmd>
      break;
 8009c96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0201 	orr.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f003 0302 	and.w	r3, r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d122      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d11b      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f06f 0202 	mvn.w	r2, #2
 8009cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fa63 	bl	800a1c0 <HAL_TIM_IC_CaptureCallback>
 8009cfa:	e005      	b.n	8009d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fa56 	bl	800a1ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7fb fbe6 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d122      	bne.n	8009d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d11b      	bne.n	8009d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f06f 0204 	mvn.w	r2, #4
 8009d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fa39 	bl	800a1c0 <HAL_TIM_IC_CaptureCallback>
 8009d4e:	e005      	b.n	8009d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fa2c 	bl	800a1ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7fb fbbc 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d122      	bne.n	8009db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	d11b      	bne.n	8009db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f06f 0208 	mvn.w	r2, #8
 8009d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fa0f 	bl	800a1c0 <HAL_TIM_IC_CaptureCallback>
 8009da2:	e005      	b.n	8009db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fa02 	bl	800a1ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fb fb92 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d122      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d11b      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f06f 0210 	mvn.w	r2, #16
 8009dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2208      	movs	r2, #8
 8009de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f9e5 	bl	800a1c0 <HAL_TIM_IC_CaptureCallback>
 8009df6:	e005      	b.n	8009e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f9d8 	bl	800a1ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fb fb68 	bl	80054d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d10e      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d107      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f06f 0201 	mvn.w	r2, #1
 8009e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7fb ff3d 	bl	8005cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e40:	2b80      	cmp	r3, #128	; 0x80
 8009e42:	d10e      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d107      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fd1d 	bl	800a89c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b40      	cmp	r3, #64	; 0x40
 8009e6e:	d10e      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b40      	cmp	r3, #64	; 0x40
 8009e7c:	d107      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f9a2 	bl	800a1d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d10e      	bne.n	8009eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d107      	bne.n	8009eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f06f 0220 	mvn.w	r2, #32
 8009eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fce8 	bl	800a88a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e0ac      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b0c      	cmp	r3, #12
 8009eea:	f200 809f 	bhi.w	800a02c <HAL_TIM_PWM_ConfigChannel+0x168>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f29 	.word	0x08009f29
 8009ef8:	0800a02d 	.word	0x0800a02d
 8009efc:	0800a02d 	.word	0x0800a02d
 8009f00:	0800a02d 	.word	0x0800a02d
 8009f04:	08009f69 	.word	0x08009f69
 8009f08:	0800a02d 	.word	0x0800a02d
 8009f0c:	0800a02d 	.word	0x0800a02d
 8009f10:	0800a02d 	.word	0x0800a02d
 8009f14:	08009fab 	.word	0x08009fab
 8009f18:	0800a02d 	.word	0x0800a02d
 8009f1c:	0800a02d 	.word	0x0800a02d
 8009f20:	0800a02d 	.word	0x0800a02d
 8009f24:	08009feb 	.word	0x08009feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f9ba 	bl	800a2a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	699a      	ldr	r2, [r3, #24]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0208 	orr.w	r2, r2, #8
 8009f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 0204 	bic.w	r2, r2, #4
 8009f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6999      	ldr	r1, [r3, #24]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	691a      	ldr	r2, [r3, #16]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	619a      	str	r2, [r3, #24]
      break;
 8009f66:	e062      	b.n	800a02e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fa00 	bl	800a374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6999      	ldr	r1, [r3, #24]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	021a      	lsls	r2, r3, #8
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	619a      	str	r2, [r3, #24]
      break;
 8009fa8:	e041      	b.n	800a02e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fa49 	bl	800a448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69da      	ldr	r2, [r3, #28]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0208 	orr.w	r2, r2, #8
 8009fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0204 	bic.w	r2, r2, #4
 8009fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	61da      	str	r2, [r3, #28]
      break;
 8009fe8:	e021      	b.n	800a02e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fa93 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69da      	ldr	r2, [r3, #28]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69d9      	ldr	r1, [r3, #28]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	021a      	lsls	r2, r3, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	61da      	str	r2, [r3, #28]
      break;
 800a02a:	e000      	b.n	800a02e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a02c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_TIM_ConfigClockSource+0x18>
 800a054:	2302      	movs	r3, #2
 800a056:	e0a6      	b.n	800a1a6 <HAL_TIM_ConfigClockSource+0x166>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2202      	movs	r2, #2
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a07e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d067      	beq.n	800a160 <HAL_TIM_ConfigClockSource+0x120>
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	d80b      	bhi.n	800a0ac <HAL_TIM_ConfigClockSource+0x6c>
 800a094:	2b10      	cmp	r3, #16
 800a096:	d073      	beq.n	800a180 <HAL_TIM_ConfigClockSource+0x140>
 800a098:	2b10      	cmp	r3, #16
 800a09a:	d802      	bhi.n	800a0a2 <HAL_TIM_ConfigClockSource+0x62>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d06f      	beq.n	800a180 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a0a0:	e078      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d06c      	beq.n	800a180 <HAL_TIM_ConfigClockSource+0x140>
 800a0a6:	2b30      	cmp	r3, #48	; 0x30
 800a0a8:	d06a      	beq.n	800a180 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a0aa:	e073      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a0ac:	2b70      	cmp	r3, #112	; 0x70
 800a0ae:	d00d      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0x8c>
 800a0b0:	2b70      	cmp	r3, #112	; 0x70
 800a0b2:	d804      	bhi.n	800a0be <HAL_TIM_ConfigClockSource+0x7e>
 800a0b4:	2b50      	cmp	r3, #80	; 0x50
 800a0b6:	d033      	beq.n	800a120 <HAL_TIM_ConfigClockSource+0xe0>
 800a0b8:	2b60      	cmp	r3, #96	; 0x60
 800a0ba:	d041      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a0bc:	e06a      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c2:	d066      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x152>
 800a0c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c8:	d017      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a0ca:	e063      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	6899      	ldr	r1, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	f000 fae3 	bl	800a6a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	609a      	str	r2, [r3, #8]
      break;
 800a0f8:	e04c      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6899      	ldr	r1, [r3, #8]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f000 facc 	bl	800a6a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a11c:	609a      	str	r2, [r3, #8]
      break;
 800a11e:	e039      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	6859      	ldr	r1, [r3, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	461a      	mov	r2, r3
 800a12e:	f000 fa43 	bl	800a5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2150      	movs	r1, #80	; 0x50
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fa9a 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a13e:	e029      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	6859      	ldr	r1, [r3, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	461a      	mov	r2, r3
 800a14e:	f000 fa61 	bl	800a614 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2160      	movs	r1, #96	; 0x60
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fa8a 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a15e:	e019      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	6859      	ldr	r1, [r3, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	461a      	mov	r2, r3
 800a16e:	f000 fa23 	bl	800a5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2140      	movs	r1, #64	; 0x40
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fa7a 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a17e:	e009      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f000 fa71 	bl	800a672 <TIM_ITRx_SetConfig>
        break;
 800a190:	e000      	b.n	800a194 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bc80      	pop	{r7}
 800a1e2:	4770      	bx	lr

0800a1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a29      	ldr	r2, [pc, #164]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00b      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a202:	d007      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a26      	ldr	r2, [pc, #152]	; (800a2a0 <TIM_Base_SetConfig+0xbc>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d003      	beq.n	800a214 <TIM_Base_SetConfig+0x30>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a25      	ldr	r2, [pc, #148]	; (800a2a4 <TIM_Base_SetConfig+0xc0>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d108      	bne.n	800a226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00b      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a234:	d007      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a19      	ldr	r2, [pc, #100]	; (800a2a0 <TIM_Base_SetConfig+0xbc>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_Base_SetConfig+0x62>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <TIM_Base_SetConfig+0xc0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d108      	bne.n	800a258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a07      	ldr	r2, [pc, #28]	; (800a29c <TIM_Base_SetConfig+0xb8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d103      	bne.n	800a28c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	691a      	ldr	r2, [r3, #16]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	615a      	str	r2, [r3, #20]
}
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	bc80      	pop	{r7}
 800a29a:	4770      	bx	lr
 800a29c:	40012c00 	.word	0x40012c00
 800a2a0:	40000400 	.word	0x40000400
 800a2a4:	40000800 	.word	0x40000800

0800a2a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	f023 0201 	bic.w	r2, r3, #1
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f023 0302 	bic.w	r3, r3, #2
 800a2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a1c      	ldr	r2, [pc, #112]	; (800a370 <TIM_OC1_SetConfig+0xc8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d10c      	bne.n	800a31e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0308 	bic.w	r3, r3, #8
 800a30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f023 0304 	bic.w	r3, r3, #4
 800a31c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a13      	ldr	r2, [pc, #76]	; (800a370 <TIM_OC1_SetConfig+0xc8>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d111      	bne.n	800a34a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a32c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40012c00 	.word	0x40012c00

0800a374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 0210 	bic.w	r2, r3, #16
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	021b      	lsls	r3, r3, #8
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f023 0320 	bic.w	r3, r3, #32
 800a3be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	011b      	lsls	r3, r3, #4
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a1d      	ldr	r2, [pc, #116]	; (800a444 <TIM_OC2_SetConfig+0xd0>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d10d      	bne.n	800a3f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a14      	ldr	r2, [pc, #80]	; (800a444 <TIM_OC2_SetConfig+0xd0>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d113      	bne.n	800a420 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	4313      	orrs	r3, r2
 800a412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr
 800a444:	40012c00 	.word	0x40012c00

0800a448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a1d      	ldr	r2, [pc, #116]	; (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10d      	bne.n	800a4c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a14      	ldr	r2, [pc, #80]	; (800a518 <TIM_OC3_SetConfig+0xd0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d113      	bne.n	800a4f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	621a      	str	r2, [r3, #32]
}
 800a50c:	bf00      	nop
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	40012c00 	.word	0x40012c00

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a0f      	ldr	r2, [pc, #60]	; (800a5b4 <TIM_OC4_SetConfig+0x98>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d109      	bne.n	800a590 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	019b      	lsls	r3, r3, #6
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	40012c00 	.word	0x40012c00

0800a5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	f023 0201 	bic.w	r2, r3, #1
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f023 030a 	bic.w	r3, r3, #10
 800a5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr

0800a614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	f023 0210 	bic.w	r2, r3, #16
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a63e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	031b      	lsls	r3, r3, #12
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4313      	orrs	r3, r2
 800a648:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a650:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	621a      	str	r2, [r3, #32]
}
 800a668:	bf00      	nop
 800a66a:	371c      	adds	r7, #28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4313      	orrs	r3, r2
 800a690:	f043 0307 	orr.w	r3, r3, #7
 800a694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	609a      	str	r2, [r3, #8]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bc80      	pop	{r7}
 800a6a4:	4770      	bx	lr

0800a6a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b087      	sub	sp, #28
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
 800a6b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	021a      	lsls	r2, r3, #8
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	609a      	str	r2, [r3, #8]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr

0800a6e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f003 031f 	and.w	r3, r3, #31
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6a1a      	ldr	r2, [r3, #32]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	43db      	mvns	r3, r3
 800a706:	401a      	ands	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a1a      	ldr	r2, [r3, #32]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f003 031f 	and.w	r3, r3, #31
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	fa01 f303 	lsl.w	r3, r1, r3
 800a71c:	431a      	orrs	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a740:	2302      	movs	r3, #2
 800a742:	e046      	b.n	800a7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a76a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a16      	ldr	r2, [pc, #88]	; (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d00e      	beq.n	800a7a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a790:	d009      	beq.n	800a7a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a12      	ldr	r2, [pc, #72]	; (800a7e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d004      	beq.n	800a7a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d10c      	bne.n	800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bc80      	pop	{r7}
 800a7da:	4770      	bx	lr
 800a7dc:	40012c00 	.word	0x40012c00
 800a7e0:	40000400 	.word	0x40000400
 800a7e4:	40000800 	.word	0x40000800

0800a7e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a800:	2302      	movs	r3, #2
 800a802:	e03d      	b.n	800a880 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4313      	orrs	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr

0800a88a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	bc80      	pop	{r7}
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bc80      	pop	{r7}
 800a8ac:	4770      	bx	lr

0800a8ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e03f      	b.n	800a940 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7fc f8b1 	bl	8006a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2224      	movs	r2, #36	; 0x24
 800a8de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fc16 	bl	800b124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a906:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	695a      	ldr	r2, [r3, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a916:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a926:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2220      	movs	r2, #32
 800a932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d153      	bne.n	800aa0a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <HAL_UART_Transmit_DMA+0x26>
 800a968:	88fb      	ldrh	r3, [r7, #6]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e04c      	b.n	800aa0c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <HAL_UART_Transmit_DMA+0x38>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e045      	b.n	800aa0c <HAL_UART_Transmit_DMA+0xc4>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	88fa      	ldrh	r2, [r7, #6]
 800a992:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	88fa      	ldrh	r2, [r7, #6]
 800a998:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2221      	movs	r2, #33	; 0x21
 800a9a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ac:	4a19      	ldr	r2, [pc, #100]	; (800aa14 <HAL_UART_Transmit_DMA+0xcc>)
 800a9ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b4:	4a18      	ldr	r2, [pc, #96]	; (800aa18 <HAL_UART_Transmit_DMA+0xd0>)
 800a9b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9bc:	4a17      	ldr	r2, [pc, #92]	; (800aa1c <HAL_UART_Transmit_DMA+0xd4>)
 800a9be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6819      	ldr	r1, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	461a      	mov	r2, r3
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	f7fc fbba 	bl	8007158 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9ec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	695a      	ldr	r2, [r3, #20]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa04:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	e000      	b.n	800aa0c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800aa0a:	2302      	movs	r3, #2
  }
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	0800ad45 	.word	0x0800ad45
 800aa18:	0800ad97 	.word	0x0800ad97
 800aa1c:	0800ae37 	.word	0x0800ae37

0800aa20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d166      	bne.n	800ab08 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <HAL_UART_Receive_DMA+0x26>
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e05f      	b.n	800ab0a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_UART_Receive_DMA+0x38>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e058      	b.n	800ab0a <HAL_UART_Receive_DMA+0xea>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	88fa      	ldrh	r2, [r7, #6]
 800aa6a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2222      	movs	r2, #34	; 0x22
 800aa76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	4a25      	ldr	r2, [pc, #148]	; (800ab14 <HAL_UART_Receive_DMA+0xf4>)
 800aa80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa86:	4a24      	ldr	r2, [pc, #144]	; (800ab18 <HAL_UART_Receive_DMA+0xf8>)
 800aa88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8e:	4a23      	ldr	r2, [pc, #140]	; (800ab1c <HAL_UART_Receive_DMA+0xfc>)
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	2200      	movs	r2, #0
 800aa98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	4619      	mov	r1, r3
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	88fb      	ldrh	r3, [r7, #6]
 800aab2:	f7fc fb51 	bl	8007158 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	613b      	str	r3, [r7, #16]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aae2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695a      	ldr	r2, [r3, #20]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	695a      	ldr	r2, [r3, #20]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab02:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e000      	b.n	800ab0a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ab08:	2302      	movs	r3, #2
  }
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	0800adb3 	.word	0x0800adb3
 800ab18:	0800ae1b 	.word	0x0800ae1b
 800ab1c:	0800ae37 	.word	0x0800ae37

0800ab20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f003 030f 	and.w	r3, r3, #15
 800ab4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10d      	bne.n	800ab72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d008      	beq.n	800ab72 <HAL_UART_IRQHandler+0x52>
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa5a 	bl	800b024 <UART_Receive_IT>
      return;
 800ab70:	e0d1      	b.n	800ad16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 80b0 	beq.w	800acda <HAL_UART_IRQHandler+0x1ba>
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d105      	bne.n	800ab90 <HAL_UART_IRQHandler+0x70>
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 80a5 	beq.w	800acda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <HAL_UART_IRQHandler+0x90>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	f043 0201 	orr.w	r2, r3, #1
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <HAL_UART_IRQHandler+0xb0>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc8:	f043 0202 	orr.w	r2, r3, #2
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <HAL_UART_IRQHandler+0xd0>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe8:	f043 0204 	orr.w	r2, r3, #4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f003 0308 	and.w	r3, r3, #8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00f      	beq.n	800ac1a <HAL_UART_IRQHandler+0xfa>
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <HAL_UART_IRQHandler+0xee>
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	f043 0208 	orr.w	r2, r3, #8
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d078      	beq.n	800ad14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <HAL_UART_IRQHandler+0x11c>
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9f4 	bl	800b024 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bf14      	ite	ne
 800ac4a:	2301      	movne	r3, #1
 800ac4c:	2300      	moveq	r3, #0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac56:	f003 0308 	and.w	r3, r3, #8
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <HAL_UART_IRQHandler+0x144>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d031      	beq.n	800acc8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f945 	bl	800aef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d023      	beq.n	800acc0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695a      	ldr	r2, [r3, #20]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d013      	beq.n	800acb8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac94:	4a21      	ldr	r2, [pc, #132]	; (800ad1c <HAL_UART_IRQHandler+0x1fc>)
 800ac96:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fc fabb 	bl	8007218 <HAL_DMA_Abort_IT>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d016      	beq.n	800acd6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acb2:	4610      	mov	r0, r2
 800acb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb6:	e00e      	b.n	800acd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f83a 	bl	800ad32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acbe:	e00a      	b.n	800acd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 f836 	bl	800ad32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc6:	e006      	b.n	800acd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f832 	bl	800ad32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800acd4:	e01e      	b.n	800ad14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd6:	bf00      	nop
    return;
 800acd8:	e01c      	b.n	800ad14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d008      	beq.n	800acf6 <HAL_UART_IRQHandler+0x1d6>
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f931 	bl	800af56 <UART_Transmit_IT>
    return;
 800acf4:	e00f      	b.n	800ad16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <HAL_UART_IRQHandler+0x1f6>
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f972 	bl	800aff4 <UART_EndTransmit_IT>
    return;
 800ad10:	bf00      	nop
 800ad12:	e000      	b.n	800ad16 <HAL_UART_IRQHandler+0x1f6>
    return;
 800ad14:	bf00      	nop
  }
}
 800ad16:	3720      	adds	r7, #32
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	0800af2f 	.word	0x0800af2f

0800ad20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bc80      	pop	{r7}
 800ad42:	4770      	bx	lr

0800ad44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d113      	bne.n	800ad88 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad74:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad84:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad86:	e002      	b.n	800ad8e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7f7 fd0f 	bl	80027ac <HAL_UART_TxCpltCallback>
}
 800ad8e:	bf00      	nop
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f7ff ffbb 	bl	800ad20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11e      	bne.n	800ae0c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ade2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	695a      	ldr	r2, [r3, #20]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f022 0201 	bic.w	r2, r2, #1
 800adf2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695a      	ldr	r2, [r3, #20]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae02:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7f7 fcef 	bl	80027f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7f7 fcd5 	bl	80027d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	bf14      	ite	ne
 800ae56:	2301      	movne	r3, #1
 800ae58:	2300      	moveq	r3, #0
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b21      	cmp	r3, #33	; 0x21
 800ae68:	d108      	bne.n	800ae7c <UART_DMAError+0x46>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f000 f827 	bl	800aeca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bf14      	ite	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	2300      	moveq	r3, #0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b22      	cmp	r3, #34	; 0x22
 800ae9c:	d108      	bne.n	800aeb0 <UART_DMAError+0x7a>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2200      	movs	r2, #0
 800aea8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aeaa:	68b8      	ldr	r0, [r7, #8]
 800aeac:	f000 f822 	bl	800aef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb4:	f043 0210 	orr.w	r2, r3, #16
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aebc:	68b8      	ldr	r0, [r7, #8]
 800aebe:	f7ff ff38 	bl	800ad32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aee0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bc80      	pop	{r7}
 800aef2:	4770      	bx	lr

0800aef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695a      	ldr	r2, [r3, #20]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0201 	bic.w	r2, r2, #1
 800af1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	bc80      	pop	{r7}
 800af2c:	4770      	bx	lr

0800af2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff fef2 	bl	800ad32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af56:	b480      	push	{r7}
 800af58:	b085      	sub	sp, #20
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b21      	cmp	r3, #33	; 0x21
 800af68:	d13e      	bne.n	800afe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af72:	d114      	bne.n	800af9e <UART_Transmit_IT+0x48>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d110      	bne.n	800af9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	1c9a      	adds	r2, r3, #2
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	621a      	str	r2, [r3, #32]
 800af9c:	e008      	b.n	800afb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	1c59      	adds	r1, r3, #1
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	6211      	str	r1, [r2, #32]
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3b01      	subs	r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	4619      	mov	r1, r3
 800afbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10f      	bne.n	800afe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68da      	ldr	r2, [r3, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	e000      	b.n	800afea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afe8:	2302      	movs	r3, #2
  }
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr

0800aff4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b00a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7f7 fbc9 	bl	80027ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b22      	cmp	r3, #34	; 0x22
 800b036:	d170      	bne.n	800b11a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b040:	d117      	bne.n	800b072 <UART_Receive_IT+0x4e>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d113      	bne.n	800b072 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b052:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b060:	b29a      	uxth	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	1c9a      	adds	r2, r3, #2
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	629a      	str	r2, [r3, #40]	; 0x28
 800b070:	e026      	b.n	800b0c0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b084:	d007      	beq.n	800b096 <UART_Receive_IT+0x72>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <UART_Receive_IT+0x80>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	e008      	b.n	800b0b6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d120      	bne.n	800b116 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f022 0220 	bic.w	r2, r2, #32
 800b0e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	695a      	ldr	r2, [r3, #20]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 0201 	bic.w	r2, r2, #1
 800b102:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7f7 fb6f 	bl	80027f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	e002      	b.n	800b11c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	e000      	b.n	800b11c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b11a:	2302      	movs	r3, #2
  }
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68da      	ldr	r2, [r3, #12]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	431a      	orrs	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	4313      	orrs	r3, r2
 800b152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b15e:	f023 030c 	bic.w	r3, r3, #12
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6812      	ldr	r2, [r2, #0]
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	430b      	orrs	r3, r1
 800b16a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a2c      	ldr	r2, [pc, #176]	; (800b238 <UART_SetConfig+0x114>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d103      	bne.n	800b194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b18c:	f7fe f952 	bl	8009434 <HAL_RCC_GetPCLK2Freq>
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	e002      	b.n	800b19a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b194:	f7fe f93a 	bl	800940c <HAL_RCC_GetPCLK1Freq>
 800b198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009a      	lsls	r2, r3, #2
 800b1a4:	441a      	add	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b0:	4a22      	ldr	r2, [pc, #136]	; (800b23c <UART_SetConfig+0x118>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	095b      	lsrs	r3, r3, #5
 800b1b8:	0119      	lsls	r1, r3, #4
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009a      	lsls	r2, r3, #2
 800b1c4:	441a      	add	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <UART_SetConfig+0x118>)
 800b1d2:	fba3 0302 	umull	r0, r3, r3, r2
 800b1d6:	095b      	lsrs	r3, r3, #5
 800b1d8:	2064      	movs	r0, #100	; 0x64
 800b1da:	fb00 f303 	mul.w	r3, r0, r3
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	3332      	adds	r3, #50	; 0x32
 800b1e4:	4a15      	ldr	r2, [pc, #84]	; (800b23c <UART_SetConfig+0x118>)
 800b1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1f0:	4419      	add	r1, r3
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009a      	lsls	r2, r3, #2
 800b1fc:	441a      	add	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	fbb2 f2f3 	udiv	r2, r2, r3
 800b208:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <UART_SetConfig+0x118>)
 800b20a:	fba3 0302 	umull	r0, r3, r3, r2
 800b20e:	095b      	lsrs	r3, r3, #5
 800b210:	2064      	movs	r0, #100	; 0x64
 800b212:	fb00 f303 	mul.w	r3, r0, r3
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	011b      	lsls	r3, r3, #4
 800b21a:	3332      	adds	r3, #50	; 0x32
 800b21c:	4a07      	ldr	r2, [pc, #28]	; (800b23c <UART_SetConfig+0x118>)
 800b21e:	fba2 2303 	umull	r2, r3, r2, r3
 800b222:	095b      	lsrs	r3, r3, #5
 800b224:	f003 020f 	and.w	r2, r3, #15
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	440a      	add	r2, r1
 800b22e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	40013800 	.word	0x40013800
 800b23c:	51eb851f 	.word	0x51eb851f

0800b240 <__errno>:
 800b240:	4b01      	ldr	r3, [pc, #4]	; (800b248 <__errno+0x8>)
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	200011ac 	.word	0x200011ac

0800b24c <__libc_init_array>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	2500      	movs	r5, #0
 800b250:	4e0c      	ldr	r6, [pc, #48]	; (800b284 <__libc_init_array+0x38>)
 800b252:	4c0d      	ldr	r4, [pc, #52]	; (800b288 <__libc_init_array+0x3c>)
 800b254:	1ba4      	subs	r4, r4, r6
 800b256:	10a4      	asrs	r4, r4, #2
 800b258:	42a5      	cmp	r5, r4
 800b25a:	d109      	bne.n	800b270 <__libc_init_array+0x24>
 800b25c:	f000 fba0 	bl	800b9a0 <_init>
 800b260:	2500      	movs	r5, #0
 800b262:	4e0a      	ldr	r6, [pc, #40]	; (800b28c <__libc_init_array+0x40>)
 800b264:	4c0a      	ldr	r4, [pc, #40]	; (800b290 <__libc_init_array+0x44>)
 800b266:	1ba4      	subs	r4, r4, r6
 800b268:	10a4      	asrs	r4, r4, #2
 800b26a:	42a5      	cmp	r5, r4
 800b26c:	d105      	bne.n	800b27a <__libc_init_array+0x2e>
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b274:	4798      	blx	r3
 800b276:	3501      	adds	r5, #1
 800b278:	e7ee      	b.n	800b258 <__libc_init_array+0xc>
 800b27a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b27e:	4798      	blx	r3
 800b280:	3501      	adds	r5, #1
 800b282:	e7f2      	b.n	800b26a <__libc_init_array+0x1e>
 800b284:	0800bb30 	.word	0x0800bb30
 800b288:	0800bb30 	.word	0x0800bb30
 800b28c:	0800bb30 	.word	0x0800bb30
 800b290:	0800bb34 	.word	0x0800bb34

0800b294 <memcpy>:
 800b294:	b510      	push	{r4, lr}
 800b296:	1e43      	subs	r3, r0, #1
 800b298:	440a      	add	r2, r1
 800b29a:	4291      	cmp	r1, r2
 800b29c:	d100      	bne.n	800b2a0 <memcpy+0xc>
 800b29e:	bd10      	pop	{r4, pc}
 800b2a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2a8:	e7f7      	b.n	800b29a <memcpy+0x6>

0800b2aa <memset>:
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4402      	add	r2, r0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d100      	bne.n	800b2b4 <memset+0xa>
 800b2b2:	4770      	bx	lr
 800b2b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b8:	e7f9      	b.n	800b2ae <memset+0x4>

0800b2ba <atan2>:
 800b2ba:	f000 b855 	b.w	800b368 <__ieee754_atan2>
	...

0800b2c0 <sqrt>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	b08b      	sub	sp, #44	; 0x2c
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	f000 f92b 	bl	800b524 <__ieee754_sqrt>
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <sqrt+0xa0>)
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	f993 a000 	ldrsb.w	sl, [r3]
 800b2d6:	4689      	mov	r9, r1
 800b2d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2dc:	d02b      	beq.n	800b336 <sqrt+0x76>
 800b2de:	4622      	mov	r2, r4
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	f7f5 fb89 	bl	80009fc <__aeabi_dcmpun>
 800b2ea:	4683      	mov	fp, r0
 800b2ec:	bb18      	cbnz	r0, 800b336 <sqrt+0x76>
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	2700      	movs	r7, #0
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f5 fb57 	bl	80009ac <__aeabi_dcmplt>
 800b2fe:	b1d0      	cbz	r0, 800b336 <sqrt+0x76>
 800b300:	2301      	movs	r3, #1
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	4b17      	ldr	r3, [pc, #92]	; (800b364 <sqrt+0xa4>)
 800b306:	f8cd b020 	str.w	fp, [sp, #32]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b310:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b314:	f1ba 0f00 	cmp.w	sl, #0
 800b318:	d112      	bne.n	800b340 <sqrt+0x80>
 800b31a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b31e:	4668      	mov	r0, sp
 800b320:	f000 fb3c 	bl	800b99c <matherr>
 800b324:	b1b8      	cbz	r0, 800b356 <sqrt+0x96>
 800b326:	9b08      	ldr	r3, [sp, #32]
 800b328:	b11b      	cbz	r3, 800b332 <sqrt+0x72>
 800b32a:	f7ff ff89 	bl	800b240 <__errno>
 800b32e:	9b08      	ldr	r3, [sp, #32]
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b336:	4640      	mov	r0, r8
 800b338:	4649      	mov	r1, r9
 800b33a:	b00b      	add	sp, #44	; 0x2c
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f5 f9e8 	bl	800071c <__aeabi_ddiv>
 800b34c:	f1ba 0f02 	cmp.w	sl, #2
 800b350:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b354:	d1e3      	bne.n	800b31e <sqrt+0x5e>
 800b356:	f7ff ff73 	bl	800b240 <__errno>
 800b35a:	2321      	movs	r3, #33	; 0x21
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	e7e2      	b.n	800b326 <sqrt+0x66>
 800b360:	20001210 	.word	0x20001210
 800b364:	0800bae4 	.word	0x0800bae4

0800b368 <__ieee754_atan2>:
 800b368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	4256      	negs	r6, r2
 800b36e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b372:	4316      	orrs	r6, r2
 800b374:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800b520 <__ieee754_atan2+0x1b8>
 800b378:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b37c:	454e      	cmp	r6, r9
 800b37e:	4604      	mov	r4, r0
 800b380:	460d      	mov	r5, r1
 800b382:	469e      	mov	lr, r3
 800b384:	d808      	bhi.n	800b398 <__ieee754_atan2+0x30>
 800b386:	4246      	negs	r6, r0
 800b388:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b38c:	4306      	orrs	r6, r0
 800b38e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b392:	454e      	cmp	r6, r9
 800b394:	4688      	mov	r8, r1
 800b396:	d906      	bls.n	800b3a6 <__ieee754_atan2+0x3e>
 800b398:	4620      	mov	r0, r4
 800b39a:	4629      	mov	r1, r5
 800b39c:	f7f4 fede 	bl	800015c <__adddf3>
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	e030      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b3a6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b3aa:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b3ae:	4316      	orrs	r6, r2
 800b3b0:	d103      	bne.n	800b3ba <__ieee754_atan2+0x52>
 800b3b2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b6:	f000 b963 	b.w	800b680 <atan>
 800b3ba:	179e      	asrs	r6, r3, #30
 800b3bc:	f006 0602 	and.w	r6, r6, #2
 800b3c0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b3c4:	ea57 0100 	orrs.w	r1, r7, r0
 800b3c8:	d107      	bne.n	800b3da <__ieee754_atan2+0x72>
 800b3ca:	2e02      	cmp	r6, #2
 800b3cc:	d079      	beq.n	800b4c2 <__ieee754_atan2+0x15a>
 800b3ce:	2e03      	cmp	r6, #3
 800b3d0:	d11a      	bne.n	800b408 <__ieee754_atan2+0xa0>
 800b3d2:	a541      	add	r5, pc, #260	; (adr r5, 800b4d8 <__ieee754_atan2+0x170>)
 800b3d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3d8:	e016      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b3da:	ea5c 0102 	orrs.w	r1, ip, r2
 800b3de:	d106      	bne.n	800b3ee <__ieee754_atan2+0x86>
 800b3e0:	f1b8 0f00 	cmp.w	r8, #0
 800b3e4:	da71      	bge.n	800b4ca <__ieee754_atan2+0x162>
 800b3e6:	a53e      	add	r5, pc, #248	; (adr r5, 800b4e0 <__ieee754_atan2+0x178>)
 800b3e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3ec:	e00c      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b3ee:	45cc      	cmp	ip, r9
 800b3f0:	d123      	bne.n	800b43a <__ieee754_atan2+0xd2>
 800b3f2:	4567      	cmp	r7, ip
 800b3f4:	d114      	bne.n	800b420 <__ieee754_atan2+0xb8>
 800b3f6:	2e02      	cmp	r6, #2
 800b3f8:	d00a      	beq.n	800b410 <__ieee754_atan2+0xa8>
 800b3fa:	2e03      	cmp	r6, #3
 800b3fc:	d00c      	beq.n	800b418 <__ieee754_atan2+0xb0>
 800b3fe:	2e01      	cmp	r6, #1
 800b400:	d15b      	bne.n	800b4ba <__ieee754_atan2+0x152>
 800b402:	a539      	add	r5, pc, #228	; (adr r5, 800b4e8 <__ieee754_atan2+0x180>)
 800b404:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b408:	4620      	mov	r0, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b410:	a537      	add	r5, pc, #220	; (adr r5, 800b4f0 <__ieee754_atan2+0x188>)
 800b412:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b416:	e7f7      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b418:	a537      	add	r5, pc, #220	; (adr r5, 800b4f8 <__ieee754_atan2+0x190>)
 800b41a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b41e:	e7f3      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b420:	2e02      	cmp	r6, #2
 800b422:	d04e      	beq.n	800b4c2 <__ieee754_atan2+0x15a>
 800b424:	2e03      	cmp	r6, #3
 800b426:	d0d4      	beq.n	800b3d2 <__ieee754_atan2+0x6a>
 800b428:	2e01      	cmp	r6, #1
 800b42a:	f04f 0400 	mov.w	r4, #0
 800b42e:	d102      	bne.n	800b436 <__ieee754_atan2+0xce>
 800b430:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b434:	e7e8      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b436:	2500      	movs	r5, #0
 800b438:	e7e6      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b43a:	454f      	cmp	r7, r9
 800b43c:	d0d0      	beq.n	800b3e0 <__ieee754_atan2+0x78>
 800b43e:	eba7 070c 	sub.w	r7, r7, ip
 800b442:	153f      	asrs	r7, r7, #20
 800b444:	2f3c      	cmp	r7, #60	; 0x3c
 800b446:	dc1e      	bgt.n	800b486 <__ieee754_atan2+0x11e>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da01      	bge.n	800b450 <__ieee754_atan2+0xe8>
 800b44c:	373c      	adds	r7, #60	; 0x3c
 800b44e:	db1e      	blt.n	800b48e <__ieee754_atan2+0x126>
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f5 f962 	bl	800071c <__aeabi_ddiv>
 800b458:	f000 fa9c 	bl	800b994 <fabs>
 800b45c:	f000 f910 	bl	800b680 <atan>
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
 800b464:	2e01      	cmp	r6, #1
 800b466:	d015      	beq.n	800b494 <__ieee754_atan2+0x12c>
 800b468:	2e02      	cmp	r6, #2
 800b46a:	d017      	beq.n	800b49c <__ieee754_atan2+0x134>
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	d0cb      	beq.n	800b408 <__ieee754_atan2+0xa0>
 800b470:	a323      	add	r3, pc, #140	; (adr r3, 800b500 <__ieee754_atan2+0x198>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f4 fe6d 	bl	8000158 <__aeabi_dsub>
 800b47e:	a322      	add	r3, pc, #136	; (adr r3, 800b508 <__ieee754_atan2+0x1a0>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	e016      	b.n	800b4b4 <__ieee754_atan2+0x14c>
 800b486:	a522      	add	r5, pc, #136	; (adr r5, 800b510 <__ieee754_atan2+0x1a8>)
 800b488:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b48c:	e7ea      	b.n	800b464 <__ieee754_atan2+0xfc>
 800b48e:	2400      	movs	r4, #0
 800b490:	2500      	movs	r5, #0
 800b492:	e7e7      	b.n	800b464 <__ieee754_atan2+0xfc>
 800b494:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b498:	461d      	mov	r5, r3
 800b49a:	e7b5      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b49c:	a318      	add	r3, pc, #96	; (adr r3, 800b500 <__ieee754_atan2+0x198>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f4 fe57 	bl	8000158 <__aeabi_dsub>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	a116      	add	r1, pc, #88	; (adr r1, 800b508 <__ieee754_atan2+0x1a0>)
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	f7f4 fe50 	bl	8000158 <__aeabi_dsub>
 800b4b8:	e772      	b.n	800b3a0 <__ieee754_atan2+0x38>
 800b4ba:	a517      	add	r5, pc, #92	; (adr r5, 800b518 <__ieee754_atan2+0x1b0>)
 800b4bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4c0:	e7a2      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b4c2:	a511      	add	r5, pc, #68	; (adr r5, 800b508 <__ieee754_atan2+0x1a0>)
 800b4c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4c8:	e79e      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b4ca:	a511      	add	r5, pc, #68	; (adr r5, 800b510 <__ieee754_atan2+0x1a8>)
 800b4cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4d0:	e79a      	b.n	800b408 <__ieee754_atan2+0xa0>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	54442d18 	.word	0x54442d18
 800b4dc:	c00921fb 	.word	0xc00921fb
 800b4e0:	54442d18 	.word	0x54442d18
 800b4e4:	bff921fb 	.word	0xbff921fb
 800b4e8:	54442d18 	.word	0x54442d18
 800b4ec:	bfe921fb 	.word	0xbfe921fb
 800b4f0:	7f3321d2 	.word	0x7f3321d2
 800b4f4:	4002d97c 	.word	0x4002d97c
 800b4f8:	7f3321d2 	.word	0x7f3321d2
 800b4fc:	c002d97c 	.word	0xc002d97c
 800b500:	33145c07 	.word	0x33145c07
 800b504:	3ca1a626 	.word	0x3ca1a626
 800b508:	54442d18 	.word	0x54442d18
 800b50c:	400921fb 	.word	0x400921fb
 800b510:	54442d18 	.word	0x54442d18
 800b514:	3ff921fb 	.word	0x3ff921fb
 800b518:	54442d18 	.word	0x54442d18
 800b51c:	3fe921fb 	.word	0x3fe921fb
 800b520:	7ff00000 	.word	0x7ff00000

0800b524 <__ieee754_sqrt>:
 800b524:	4b54      	ldr	r3, [pc, #336]	; (800b678 <__ieee754_sqrt+0x154>)
 800b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	438b      	bics	r3, r1
 800b52c:	4606      	mov	r6, r0
 800b52e:	460d      	mov	r5, r1
 800b530:	460a      	mov	r2, r1
 800b532:	460c      	mov	r4, r1
 800b534:	d10f      	bne.n	800b556 <__ieee754_sqrt+0x32>
 800b536:	4602      	mov	r2, r0
 800b538:	460b      	mov	r3, r1
 800b53a:	f7f4 ffc5 	bl	80004c8 <__aeabi_dmul>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4630      	mov	r0, r6
 800b544:	4629      	mov	r1, r5
 800b546:	f7f4 fe09 	bl	800015c <__adddf3>
 800b54a:	4606      	mov	r6, r0
 800b54c:	460d      	mov	r5, r1
 800b54e:	4630      	mov	r0, r6
 800b550:	4629      	mov	r1, r5
 800b552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b556:	2900      	cmp	r1, #0
 800b558:	4607      	mov	r7, r0
 800b55a:	4603      	mov	r3, r0
 800b55c:	dc0e      	bgt.n	800b57c <__ieee754_sqrt+0x58>
 800b55e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b562:	ea5c 0707 	orrs.w	r7, ip, r7
 800b566:	d0f2      	beq.n	800b54e <__ieee754_sqrt+0x2a>
 800b568:	b141      	cbz	r1, 800b57c <__ieee754_sqrt+0x58>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	f7f4 fdf3 	bl	8000158 <__aeabi_dsub>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	f7f5 f8d1 	bl	800071c <__aeabi_ddiv>
 800b57a:	e7e6      	b.n	800b54a <__ieee754_sqrt+0x26>
 800b57c:	1512      	asrs	r2, r2, #20
 800b57e:	d074      	beq.n	800b66a <__ieee754_sqrt+0x146>
 800b580:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b584:	07d5      	lsls	r5, r2, #31
 800b586:	f04f 0500 	mov.w	r5, #0
 800b58a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b58e:	bf48      	it	mi
 800b590:	0fd9      	lsrmi	r1, r3, #31
 800b592:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b596:	bf44      	itt	mi
 800b598:	005b      	lslmi	r3, r3, #1
 800b59a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b59e:	1051      	asrs	r1, r2, #1
 800b5a0:	0fda      	lsrs	r2, r3, #31
 800b5a2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	2216      	movs	r2, #22
 800b5aa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	1987      	adds	r7, r0, r6
 800b5b2:	42a7      	cmp	r7, r4
 800b5b4:	bfde      	ittt	le
 800b5b6:	19b8      	addle	r0, r7, r6
 800b5b8:	1be4      	suble	r4, r4, r7
 800b5ba:	19ad      	addle	r5, r5, r6
 800b5bc:	0fdf      	lsrs	r7, r3, #31
 800b5be:	3a01      	subs	r2, #1
 800b5c0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b5c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b5cc:	d1f0      	bne.n	800b5b0 <__ieee754_sqrt+0x8c>
 800b5ce:	f04f 0c20 	mov.w	ip, #32
 800b5d2:	4696      	mov	lr, r2
 800b5d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b5d8:	4284      	cmp	r4, r0
 800b5da:	eb06 070e 	add.w	r7, r6, lr
 800b5de:	dc02      	bgt.n	800b5e6 <__ieee754_sqrt+0xc2>
 800b5e0:	d112      	bne.n	800b608 <__ieee754_sqrt+0xe4>
 800b5e2:	429f      	cmp	r7, r3
 800b5e4:	d810      	bhi.n	800b608 <__ieee754_sqrt+0xe4>
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	eb07 0e06 	add.w	lr, r7, r6
 800b5ec:	da42      	bge.n	800b674 <__ieee754_sqrt+0x150>
 800b5ee:	f1be 0f00 	cmp.w	lr, #0
 800b5f2:	db3f      	blt.n	800b674 <__ieee754_sqrt+0x150>
 800b5f4:	f100 0801 	add.w	r8, r0, #1
 800b5f8:	1a24      	subs	r4, r4, r0
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	429f      	cmp	r7, r3
 800b5fe:	bf88      	it	hi
 800b600:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b604:	1bdb      	subs	r3, r3, r7
 800b606:	4432      	add	r2, r6
 800b608:	0064      	lsls	r4, r4, #1
 800b60a:	f1bc 0c01 	subs.w	ip, ip, #1
 800b60e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b612:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b616:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b61a:	d1dd      	bne.n	800b5d8 <__ieee754_sqrt+0xb4>
 800b61c:	4323      	orrs	r3, r4
 800b61e:	d006      	beq.n	800b62e <__ieee754_sqrt+0x10a>
 800b620:	1c54      	adds	r4, r2, #1
 800b622:	bf0b      	itete	eq
 800b624:	4662      	moveq	r2, ip
 800b626:	3201      	addne	r2, #1
 800b628:	3501      	addeq	r5, #1
 800b62a:	f022 0201 	bicne.w	r2, r2, #1
 800b62e:	106b      	asrs	r3, r5, #1
 800b630:	0852      	lsrs	r2, r2, #1
 800b632:	07e8      	lsls	r0, r5, #31
 800b634:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b638:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b63c:	bf48      	it	mi
 800b63e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b642:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b646:	4616      	mov	r6, r2
 800b648:	e781      	b.n	800b54e <__ieee754_sqrt+0x2a>
 800b64a:	0adc      	lsrs	r4, r3, #11
 800b64c:	3915      	subs	r1, #21
 800b64e:	055b      	lsls	r3, r3, #21
 800b650:	2c00      	cmp	r4, #0
 800b652:	d0fa      	beq.n	800b64a <__ieee754_sqrt+0x126>
 800b654:	02e6      	lsls	r6, r4, #11
 800b656:	d50a      	bpl.n	800b66e <__ieee754_sqrt+0x14a>
 800b658:	f1c2 0020 	rsb	r0, r2, #32
 800b65c:	fa23 f000 	lsr.w	r0, r3, r0
 800b660:	1e55      	subs	r5, r2, #1
 800b662:	4093      	lsls	r3, r2
 800b664:	4304      	orrs	r4, r0
 800b666:	1b4a      	subs	r2, r1, r5
 800b668:	e78a      	b.n	800b580 <__ieee754_sqrt+0x5c>
 800b66a:	4611      	mov	r1, r2
 800b66c:	e7f0      	b.n	800b650 <__ieee754_sqrt+0x12c>
 800b66e:	0064      	lsls	r4, r4, #1
 800b670:	3201      	adds	r2, #1
 800b672:	e7ef      	b.n	800b654 <__ieee754_sqrt+0x130>
 800b674:	4680      	mov	r8, r0
 800b676:	e7bf      	b.n	800b5f8 <__ieee754_sqrt+0xd4>
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	00000000 	.word	0x00000000

0800b680 <atan>:
 800b680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	4bb6      	ldr	r3, [pc, #728]	; (800b960 <atan+0x2e0>)
 800b686:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b68a:	429e      	cmp	r6, r3
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	468b      	mov	fp, r1
 800b692:	dd17      	ble.n	800b6c4 <atan+0x44>
 800b694:	4bb3      	ldr	r3, [pc, #716]	; (800b964 <atan+0x2e4>)
 800b696:	429e      	cmp	r6, r3
 800b698:	dc01      	bgt.n	800b69e <atan+0x1e>
 800b69a:	d109      	bne.n	800b6b0 <atan+0x30>
 800b69c:	b140      	cbz	r0, 800b6b0 <atan+0x30>
 800b69e:	4622      	mov	r2, r4
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7f4 fd59 	bl	800015c <__adddf3>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	e005      	b.n	800b6bc <atan+0x3c>
 800b6b0:	f1bb 0f00 	cmp.w	fp, #0
 800b6b4:	4cac      	ldr	r4, [pc, #688]	; (800b968 <atan+0x2e8>)
 800b6b6:	f340 8121 	ble.w	800b8fc <atan+0x27c>
 800b6ba:	4dac      	ldr	r5, [pc, #688]	; (800b96c <atan+0x2ec>)
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c4:	4baa      	ldr	r3, [pc, #680]	; (800b970 <atan+0x2f0>)
 800b6c6:	429e      	cmp	r6, r3
 800b6c8:	dc11      	bgt.n	800b6ee <atan+0x6e>
 800b6ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b6ce:	429e      	cmp	r6, r3
 800b6d0:	dc0a      	bgt.n	800b6e8 <atan+0x68>
 800b6d2:	a38b      	add	r3, pc, #556	; (adr r3, 800b900 <atan+0x280>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fd40 	bl	800015c <__adddf3>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4ba5      	ldr	r3, [pc, #660]	; (800b974 <atan+0x2f4>)
 800b6e0:	f7f5 f982 	bl	80009e8 <__aeabi_dcmpgt>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d1e9      	bne.n	800b6bc <atan+0x3c>
 800b6e8:	f04f 3aff 	mov.w	sl, #4294967295
 800b6ec:	e027      	b.n	800b73e <atan+0xbe>
 800b6ee:	f000 f951 	bl	800b994 <fabs>
 800b6f2:	4ba1      	ldr	r3, [pc, #644]	; (800b978 <atan+0x2f8>)
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	429e      	cmp	r6, r3
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	f300 80b8 	bgt.w	800b86e <atan+0x1ee>
 800b6fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b702:	429e      	cmp	r6, r3
 800b704:	f300 809c 	bgt.w	800b840 <atan+0x1c0>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	f7f4 fd26 	bl	800015c <__adddf3>
 800b710:	2200      	movs	r2, #0
 800b712:	4b98      	ldr	r3, [pc, #608]	; (800b974 <atan+0x2f4>)
 800b714:	f7f4 fd20 	bl	8000158 <__aeabi_dsub>
 800b718:	2200      	movs	r2, #0
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b722:	4620      	mov	r0, r4
 800b724:	4629      	mov	r1, r5
 800b726:	f7f4 fd19 	bl	800015c <__adddf3>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	f7f4 fff3 	bl	800071c <__aeabi_ddiv>
 800b736:	f04f 0a00 	mov.w	sl, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	460d      	mov	r5, r1
 800b73e:	4622      	mov	r2, r4
 800b740:	462b      	mov	r3, r5
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	f7f4 febf 	bl	80004c8 <__aeabi_dmul>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4680      	mov	r8, r0
 800b750:	4689      	mov	r9, r1
 800b752:	f7f4 feb9 	bl	80004c8 <__aeabi_dmul>
 800b756:	a36c      	add	r3, pc, #432	; (adr r3, 800b908 <atan+0x288>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	4606      	mov	r6, r0
 800b75e:	460f      	mov	r7, r1
 800b760:	f7f4 feb2 	bl	80004c8 <__aeabi_dmul>
 800b764:	a36a      	add	r3, pc, #424	; (adr r3, 800b910 <atan+0x290>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fcf7 	bl	800015c <__adddf3>
 800b76e:	4632      	mov	r2, r6
 800b770:	463b      	mov	r3, r7
 800b772:	f7f4 fea9 	bl	80004c8 <__aeabi_dmul>
 800b776:	a368      	add	r3, pc, #416	; (adr r3, 800b918 <atan+0x298>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 fcee 	bl	800015c <__adddf3>
 800b780:	4632      	mov	r2, r6
 800b782:	463b      	mov	r3, r7
 800b784:	f7f4 fea0 	bl	80004c8 <__aeabi_dmul>
 800b788:	a365      	add	r3, pc, #404	; (adr r3, 800b920 <atan+0x2a0>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 fce5 	bl	800015c <__adddf3>
 800b792:	4632      	mov	r2, r6
 800b794:	463b      	mov	r3, r7
 800b796:	f7f4 fe97 	bl	80004c8 <__aeabi_dmul>
 800b79a:	a363      	add	r3, pc, #396	; (adr r3, 800b928 <atan+0x2a8>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f4 fcdc 	bl	800015c <__adddf3>
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	463b      	mov	r3, r7
 800b7a8:	f7f4 fe8e 	bl	80004c8 <__aeabi_dmul>
 800b7ac:	a360      	add	r3, pc, #384	; (adr r3, 800b930 <atan+0x2b0>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fcd3 	bl	800015c <__adddf3>
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	f7f4 fe85 	bl	80004c8 <__aeabi_dmul>
 800b7be:	a35e      	add	r3, pc, #376	; (adr r3, 800b938 <atan+0x2b8>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	4689      	mov	r9, r1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f4 fe7c 	bl	80004c8 <__aeabi_dmul>
 800b7d0:	a35b      	add	r3, pc, #364	; (adr r3, 800b940 <atan+0x2c0>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fcbf 	bl	8000158 <__aeabi_dsub>
 800b7da:	4632      	mov	r2, r6
 800b7dc:	463b      	mov	r3, r7
 800b7de:	f7f4 fe73 	bl	80004c8 <__aeabi_dmul>
 800b7e2:	a359      	add	r3, pc, #356	; (adr r3, 800b948 <atan+0x2c8>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fcb6 	bl	8000158 <__aeabi_dsub>
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	f7f4 fe6a 	bl	80004c8 <__aeabi_dmul>
 800b7f4:	a356      	add	r3, pc, #344	; (adr r3, 800b950 <atan+0x2d0>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fcad 	bl	8000158 <__aeabi_dsub>
 800b7fe:	4632      	mov	r2, r6
 800b800:	463b      	mov	r3, r7
 800b802:	f7f4 fe61 	bl	80004c8 <__aeabi_dmul>
 800b806:	a354      	add	r3, pc, #336	; (adr r3, 800b958 <atan+0x2d8>)
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f7f4 fca4 	bl	8000158 <__aeabi_dsub>
 800b810:	4632      	mov	r2, r6
 800b812:	463b      	mov	r3, r7
 800b814:	f7f4 fe58 	bl	80004c8 <__aeabi_dmul>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4640      	mov	r0, r8
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f4 fc9c 	bl	800015c <__adddf3>
 800b824:	4622      	mov	r2, r4
 800b826:	462b      	mov	r3, r5
 800b828:	f7f4 fe4e 	bl	80004c8 <__aeabi_dmul>
 800b82c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	d144      	bne.n	800b8c0 <atan+0x240>
 800b836:	4620      	mov	r0, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	f7f4 fc8d 	bl	8000158 <__aeabi_dsub>
 800b83e:	e734      	b.n	800b6aa <atan+0x2a>
 800b840:	2200      	movs	r2, #0
 800b842:	4b4c      	ldr	r3, [pc, #304]	; (800b974 <atan+0x2f4>)
 800b844:	f7f4 fc88 	bl	8000158 <__aeabi_dsub>
 800b848:	2200      	movs	r2, #0
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	4b49      	ldr	r3, [pc, #292]	; (800b974 <atan+0x2f4>)
 800b850:	4620      	mov	r0, r4
 800b852:	4629      	mov	r1, r5
 800b854:	f7f4 fc82 	bl	800015c <__adddf3>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f4 ff5c 	bl	800071c <__aeabi_ddiv>
 800b864:	f04f 0a01 	mov.w	sl, #1
 800b868:	4604      	mov	r4, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	e767      	b.n	800b73e <atan+0xbe>
 800b86e:	4b43      	ldr	r3, [pc, #268]	; (800b97c <atan+0x2fc>)
 800b870:	429e      	cmp	r6, r3
 800b872:	dc1a      	bgt.n	800b8aa <atan+0x22a>
 800b874:	2200      	movs	r2, #0
 800b876:	4b42      	ldr	r3, [pc, #264]	; (800b980 <atan+0x300>)
 800b878:	f7f4 fc6e 	bl	8000158 <__aeabi_dsub>
 800b87c:	2200      	movs	r2, #0
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	4b3f      	ldr	r3, [pc, #252]	; (800b980 <atan+0x300>)
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fe1e 	bl	80004c8 <__aeabi_dmul>
 800b88c:	2200      	movs	r2, #0
 800b88e:	4b39      	ldr	r3, [pc, #228]	; (800b974 <atan+0x2f4>)
 800b890:	f7f4 fc64 	bl	800015c <__adddf3>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f4 ff3e 	bl	800071c <__aeabi_ddiv>
 800b8a0:	f04f 0a02 	mov.w	sl, #2
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	e749      	b.n	800b73e <atan+0xbe>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4934      	ldr	r1, [pc, #208]	; (800b984 <atan+0x304>)
 800b8b2:	f7f4 ff33 	bl	800071c <__aeabi_ddiv>
 800b8b6:	f04f 0a03 	mov.w	sl, #3
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	e73e      	b.n	800b73e <atan+0xbe>
 800b8c0:	4b31      	ldr	r3, [pc, #196]	; (800b988 <atan+0x308>)
 800b8c2:	4e32      	ldr	r6, [pc, #200]	; (800b98c <atan+0x30c>)
 800b8c4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b8c8:	4456      	add	r6, sl
 800b8ca:	449a      	add	sl, r3
 800b8cc:	e9da 2300 	ldrd	r2, r3, [sl]
 800b8d0:	f7f4 fc42 	bl	8000158 <__aeabi_dsub>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	f7f4 fc3e 	bl	8000158 <__aeabi_dsub>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b8e4:	f7f4 fc38 	bl	8000158 <__aeabi_dsub>
 800b8e8:	f1bb 0f00 	cmp.w	fp, #0
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	f6bf aee4 	bge.w	800b6bc <atan+0x3c>
 800b8f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8f8:	461d      	mov	r5, r3
 800b8fa:	e6df      	b.n	800b6bc <atan+0x3c>
 800b8fc:	4d24      	ldr	r5, [pc, #144]	; (800b990 <atan+0x310>)
 800b8fe:	e6dd      	b.n	800b6bc <atan+0x3c>
 800b900:	8800759c 	.word	0x8800759c
 800b904:	7e37e43c 	.word	0x7e37e43c
 800b908:	e322da11 	.word	0xe322da11
 800b90c:	3f90ad3a 	.word	0x3f90ad3a
 800b910:	24760deb 	.word	0x24760deb
 800b914:	3fa97b4b 	.word	0x3fa97b4b
 800b918:	a0d03d51 	.word	0xa0d03d51
 800b91c:	3fb10d66 	.word	0x3fb10d66
 800b920:	c54c206e 	.word	0xc54c206e
 800b924:	3fb745cd 	.word	0x3fb745cd
 800b928:	920083ff 	.word	0x920083ff
 800b92c:	3fc24924 	.word	0x3fc24924
 800b930:	5555550d 	.word	0x5555550d
 800b934:	3fd55555 	.word	0x3fd55555
 800b938:	2c6a6c2f 	.word	0x2c6a6c2f
 800b93c:	bfa2b444 	.word	0xbfa2b444
 800b940:	52defd9a 	.word	0x52defd9a
 800b944:	3fadde2d 	.word	0x3fadde2d
 800b948:	af749a6d 	.word	0xaf749a6d
 800b94c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b950:	fe231671 	.word	0xfe231671
 800b954:	3fbc71c6 	.word	0x3fbc71c6
 800b958:	9998ebc4 	.word	0x9998ebc4
 800b95c:	3fc99999 	.word	0x3fc99999
 800b960:	440fffff 	.word	0x440fffff
 800b964:	7ff00000 	.word	0x7ff00000
 800b968:	54442d18 	.word	0x54442d18
 800b96c:	3ff921fb 	.word	0x3ff921fb
 800b970:	3fdbffff 	.word	0x3fdbffff
 800b974:	3ff00000 	.word	0x3ff00000
 800b978:	3ff2ffff 	.word	0x3ff2ffff
 800b97c:	40037fff 	.word	0x40037fff
 800b980:	3ff80000 	.word	0x3ff80000
 800b984:	bff00000 	.word	0xbff00000
 800b988:	0800bb10 	.word	0x0800bb10
 800b98c:	0800baf0 	.word	0x0800baf0
 800b990:	bff921fb 	.word	0xbff921fb

0800b994 <fabs>:
 800b994:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b998:	4619      	mov	r1, r3
 800b99a:	4770      	bx	lr

0800b99c <matherr>:
 800b99c:	2000      	movs	r0, #0
 800b99e:	4770      	bx	lr

0800b9a0 <_init>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr

0800b9ac <_fini>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr
